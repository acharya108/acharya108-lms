This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
docs/adminnotes
docs/apis
docs/archtecture
docs/memorytrigger
docs/projectdocDB
docs/starter
docs/techstack
eslint.config.js
index.html
package.json
prisma/dev.db
prisma/migrations/20251020143520_add_decision_log_system/migration.sql
prisma/migrations/migration_lock.toml
prisma/schema.prisma
public/logo.png
public/vite.svg
public/Vyasa.jpg
README.md
src/App.css
src/App.jsx
src/assets/logo.png
src/assets/react.svg
src/assets/Vyasa.jpg
src/components/admin/AdminHeader.jsx
src/components/admin/AdminLayout.jsx
src/components/admin/CourseManager.jsx
src/components/admin/DecisionManager.jsx
src/components/admin/Sidebar.jsx
src/components/CategorySection.jsx
src/components/CourseCard.jsx
src/components/CourseEnrollment.jsx
src/components/CourseGrid.jsx
src/components/Footer.jsx
src/components/Footer.module.css
src/components/HamburgerMenu.jsx
src/components/Header.jsx
src/components/Header.module.css
src/components/layout.jsx
src/components/Layout.module.css
src/components/LoginForm.jsx
src/components/ProtectedCourseRoute.jsx
src/components/SchoolBoardTabs.jsx
src/components/SubCategorySection.jsx
src/context/AuthContext.jsx
src/index.css
src/index.js
src/lib/context/session-starter.js
src/lib/db.js
src/lib/utils/decision-capture.js
src/LoginForm.jsx
src/main.jsx
src/pages/AboutUs.jsx
src/pages/Admin.jsx
src/pages/admin/AdminDashboard.jsx
src/pages/admin/Categoriespage.jsx
src/pages/admin/CoursesPage.jsx
src/pages/admin/ProgramsPage.jsx
src/pages/Career.jsx
src/pages/CourseContentPage.jsx
src/pages/CourseIntroPage.jsx
src/pages/FAQs.jsx
src/pages/Home.jsx
src/pages/SchoolTuitions.jsx
src/pages/Support.jsx
src/routes/decisions.js
src/scripts/decision-guard.js
src/scripts/log-admin-development-plan.js
src/scripts/log-admin-panel-decision.js
src/scripts/log-decisions.js
src/scripts/log-tanstack-decision.js
src/scripts/log-todays-decisions.js
src/scripts/pre-dev-checklist.js
src/scripts/seed-decisions.js
src/scripts/seed.js
src/scripts/test-decision-system.js
src/services/courseService.js
src/styles/AboutUs.module.css
src/styles/Admin.module.css
src/styles/Career.module.css
src/styles/CategorySection.module.css
src/styles/Common.module.css
src/styles/CourseCard.module.css
src/styles/CourseContent.module.css
src/styles/CourseEnrollment.module.css
src/styles/CourseGrid.module.css
src/styles/FAQs.modules.css
src/styles/Home.module.css
src/styles/SchoolBoardTabs.module.css
src/styles/SubCategorySection.module.css
src/styles/Support.module.css
src/utils/userIdParser.jsx
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/adminnotes">
// In your admin panel - Development section
class DevContextManager {
  // Add memory triggers
  async addMemoryTrigger(category, key, value) {
    return await prisma.systemSetting.upsert({
      where: { key: `MEMORY_${category}_${key}` },
      update: { value },
      create: {
        key: `MEMORY_${category}_${key}`,
        value,
        category: "memory",
        description: `Memory trigger for ${category} - ${key}`
      }
    });
  }

  // Get all context for new sessions
  async getDevelopmentContext() {
    return await prisma.systemSetting.findMany({
      where: { 
        OR: [
          { category: "memory" },
          { key: { startsWith: "MEMORY_" } }
        ]
      }
    });
  }
}
</file>

<file path="docs/archtecture">
// lib/context/development-context.js
export const DevelopmentContext = {
  // TECH STACK (IMMUTABLE)
  techStack: {
    database: "Neon PostgreSQL + Prisma",
    ai: "Hugging Face Models",
    frontend: "Next.js 14",
    deployment: "Vercel", 
    storage: "Cloudflare R2"
  },
  
  // ARCHITECTURE DECISIONS
  architecture: {
    lessonLevels: 5,
    versioning: "syllabus-based with cloning",
    evaluation: "Hugging Face AI pipeline",
    contentTypes: ["video", "animation", "formula", "interactive"]
  },
  
  // CURRENT FOCUS
  currentPhase: "Phase 1 - Database & Basic Structure",
  nextSteps: [
    "Deploy Prisma schema to Neon",
    "Implement admin content management", 
    "Integrate Hugging Face models"
  ],
  
  // MEMORY TRIGGERS FOR AI
  memoryPrompts: [
    "CONTEXT: Building LMS with Neon DB, Hugging Face AI, Next.js 14",
    "ARCHITECTURE: 5-level lessons, syllabus versioning, rich media content",
    "CURRENT: Implementing database schema and admin panel",
    "REMEMBER: Already decided on tech stack - no alternatives needed"
  ]
};
</file>

<file path="docs/memorytrigger">
// Memory triggers storage
const memoryTriggers = {
  techStack: {
    database: "Neon PostgreSQL + Prisma",
    ai: "Hugging Face Models",
    frontend: "Next.js 14", 
    deployment: "Vercel",
    storage: "Cloudflare R2"
  },
  keyDecisions: {
    architecture: "5-level lesson system with versioning",
    evaluation: "Hugging Face for AI assessment",
    content: "Rich media with interactive elements"
  },
  contextPrompts: [
    "Recall our previous decisions about [technology]",
    "Continue from where we left off with [feature]",
    "Remember we already decided on [X], now implement Y"
  ]
};
</file>

<file path="docs/projectdocDB">
// Add to our schema for development notes
model DevelopmentNote {
  id          String   @id @default(cuid())
  title       String
  content     String   // Markdown supported
  category    String   // "tech-decisions", "credentials", "architecture", "todo"
  priority    String   @default("medium") // low, medium, high, critical
  
  // Relationships
  relatedTo   String?  // courseId, lessonId, or "system"
  createdBy   String   // developer name
  tags        String[]
  
  // Access control
  isPrivate   Boolean  @default(false) // for passwords/keys
  encrypted   Boolean  @default(false) // for sensitive data
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("dev_notes")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique // "AI_API_KEY", "DB_URL", "MEMORY_TRIGGERS"
  value       String
  category    String   // "api", "database", "ai", "memory"
  isEncrypted Boolean  @default(true)
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_settings")
}
</file>

<file path="docs/starter">
// Start each development session with this:
const sessionContext = `
IMPORTANT CONTEXT - READ FIRST:

TECH STACK:
- Database: Neon PostgreSQL + Prisma ✅
- AI: Hugging Face Models ✅  
- Frontend: Next.js 14 ✅
- Deployment: Vercel ✅
- Storage: Cloudflare R2 ✅

CURRENT STATUS:
- Database schema designed ✅
- Ready for Neon deployment 🚀
- Next: Admin panel + Hugging Face integration

KEY DECISIONS:
1. 5-level lesson system with difficulty progression
2. Syllabus versioning with cloning capability  
3. Hugging Face for AI evaluation (free tier)
4. Rich media content (videos, animations, formulas)

DO NOT SUGGEST:
- Alternative databases (stick with Neon)
- Paid AI APIs (stick with Hugging Face)
- Different frameworks (stick with Next.js)

NEXT ACTIONS:
1. Deploy Prisma to Neon
2. Build content management admin
3. Integrate Hugging Face models
`;
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>my-lms</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="prisma/migrations/20251020143520_add_decision_log_system/migration.sql">
-- CreateTable
CREATE TABLE "users" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "email" TEXT NOT NULL,
    "name" TEXT,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateTable
CREATE TABLE "courses" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "courseId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "category" TEXT NOT NULL,
    "board" TEXT,
    "medium" TEXT,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- CreateTable
CREATE TABLE "enrollments" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "userId" TEXT NOT NULL,
    "courseId" TEXT NOT NULL,
    "enrolledAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "status" TEXT NOT NULL DEFAULT 'active',
    CONSTRAINT "enrollments_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "enrollments_courseId_fkey" FOREIGN KEY ("courseId") REFERENCES "courses" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "lessons" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "courseId" TEXT NOT NULL,
    "lessonId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "description" TEXT,
    "order" INTEGER NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "lessons_courseId_fkey" FOREIGN KEY ("courseId") REFERENCES "courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "user_progress" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "userId" TEXT NOT NULL,
    "lessonId" TEXT NOT NULL,
    "level" TEXT NOT NULL,
    "completed" BOOLEAN NOT NULL DEFAULT false,
    "score" INTEGER,
    "timeSpent" INTEGER,
    "lastAccessed" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "user_progress_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "user_progress_lessonId_fkey" FOREIGN KEY ("lessonId") REFERENCES "lessons" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "quiz_attempts" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "userId" TEXT NOT NULL,
    "lessonId" TEXT NOT NULL,
    "level" TEXT NOT NULL,
    "score" INTEGER NOT NULL,
    "answers" JSONB NOT NULL,
    "completed" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "quiz_attempts_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "quiz_attempts_lessonId_fkey" FOREIGN KEY ("lessonId") REFERENCES "lessons" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "decision_logs" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "title" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "decision" TEXT NOT NULL,
    "rationale" TEXT NOT NULL,
    "alternativesConsidered" JSONB NOT NULL,
    "category" TEXT NOT NULL,
    "impact" TEXT NOT NULL DEFAULT 'medium',
    "status" TEXT NOT NULL DEFAULT 'active',
    "relatedTo" TEXT,
    "dependsOn" JSONB NOT NULL,
    "replacedBy" TEXT,
    "madeBy" TEXT NOT NULL DEFAULT 'ai-assisted',
    "participants" JSONB NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "reviewedAt" DATETIME,
    "expiresAt" DATETIME
);

-- CreateIndex
CREATE UNIQUE INDEX "users_email_key" ON "users"("email");

-- CreateIndex
CREATE UNIQUE INDEX "courses_courseId_key" ON "courses"("courseId");

-- CreateIndex
CREATE UNIQUE INDEX "enrollments_userId_courseId_key" ON "enrollments"("userId", "courseId");

-- CreateIndex
CREATE UNIQUE INDEX "lessons_courseId_lessonId_key" ON "lessons"("courseId", "lessonId");

-- CreateIndex
CREATE UNIQUE INDEX "user_progress_userId_lessonId_level_key" ON "user_progress"("userId", "lessonId", "level");
</file>

<file path="prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "sqlite"
</file>

<file path="prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User progress tracking
  enrollments Enrollment[]
  progress    UserProgress[]
  quizAttempts QuizAttempt[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  courseId    String   @unique // ST_TN_10_E, ST_TN_10_T, etc.
  name        String
  description String?
  category    String   // School Tuitions, Recruitment Exams, etc.
  board       String?  // TN Board, CBSE, etc.
  medium      String?  // English, Tamil
  createdAt   DateTime @default(now())
  
  enrollments Enrollment[]
  lessons     Lesson[]
  
  @@map("courses")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  status     String   @default("active") // active, completed, paused
  
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  lessonId    String   // laws-of-motion, light-reflection, etc.
  title       String
  description String?
  order       Int      // Lesson sequence
  createdAt   DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress UserProgress[]
  quizAttempts QuizAttempt[]

  @@unique([courseId, lessonId])
  @@map("lessons")
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  level        String   // foundation, elementary, intermediate, advanced, expert
  completed    Boolean  @default(false)
  score        Int?     // Quiz score (0-100)
  timeSpent    Int?     // Time spent in seconds
  lastAccessed DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
  
  @@unique([userId, lessonId, level])
  @@map("user_progress")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  level     String
  score     Int
  answers   Json     // Store quiz answers
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
  
  @@map("quiz_attempts")
}

// Add this model to your existing schema.prisma
model DecisionLog {
  id          String   @id @default(cuid())
  title       String
  description String
  decision    String
  rationale   String
  alternativesConsidered Json  // ✅ CHANGED FROM String[] to Json
  category    String
  impact      String   @default("medium")
  status      String   @default("active")
  
  // Context
  relatedTo   String?
  dependsOn   Json     // ✅ CHANGED FROM String[] to Json
  replacedBy  String?
  
  // Ownership
  madeBy      String   @default("ai-assisted")
  participants Json    // ✅ CHANGED FROM String[] to Json
  
  createdAt   DateTime @default(now())
  reviewedAt  DateTime?
  expiresAt   DateTime?
  
  @@map("decision_logs")
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.css">
/* src/styles/App.css */
.app-container {
  width: 100%;
  min-height: 100vh;
}

main {
  width: 100%;
  min-height: calc(100vh - 80px);
}
/* src/App.css */
.app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main-content {
  flex: 1;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/admin/AdminHeader.jsx">
// src/components/admin/AdminHeader.jsx
import { useState } from 'react'

export function AdminHeader({ onToggleSidebar, sidebarOpen }) {
  const [userMenuOpen, setUserMenuOpen] = useState(false)

  return (
    <header className="bg-white border-b border-gray-200 shadow-sm">
      <div className="px-6 py-4">
        <div className="flex items-center justify-between">
          {/* Left side - Breadcrumb and sidebar toggle */}
          <div className="flex items-center space-x-4">
            <button
              onClick={onToggleSidebar}
              className="p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors"
              title={sidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'}
            >
              {sidebarOpen ? '◀' : '▶'}
            </button>
            
            {/* Breadcrumb */}
            <nav className="flex text-sm">
              <span className="text-gray-500">Admin</span>
              <span className="mx-2 text-gray-300">/</span>
              <span className="text-gray-900 font-medium">Content Management</span>
            </nav>
          </div>
          
          {/* Right side - User menu and actions */}
          <div className="flex items-center space-x-4">
            {/* Notifications */}
            <button className="p-2 text-gray-400 hover:text-gray-600 relative">
              <span className="text-lg">🔔</span>
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>
            
            {/* Search */}
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <span className="text-lg">🔍</span>
            </button>
            
            {/* User menu */}
            <div className="relative">
              <button 
                onClick={() => setUserMenuOpen(!userMenuOpen)}
                className="flex items-center space-x-3 p-2 rounded-md hover:bg-gray-100 transition-colors"
              >
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                  A
                </div>
                <div className="text-left">
                  <div className="text-sm font-medium text-gray-900">Admin User</div>
                  <div className="text-xs text-gray-500">Content Manager</div>
                </div>
                <span className="text-gray-400">▼</span>
              </button>
              
              {/* Dropdown menu */}
              {userMenuOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50">
                  <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    👤 Profile
                  </a>
                  <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    ⚙️ Settings
                  </a>
                  <div className="border-t border-gray-200 my-1"></div>
                  <a href="#" className="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                    🚪 Sign out
                  </a>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </header>
  )
}

export default AdminHeader
</file>

<file path="src/components/admin/AdminLayout.jsx">
// src/components/admin/AdminLayout.jsx
import { useState } from 'react'
import { Sidebar } from './Sidebar.jsx'
import { AdminHeader } from './AdminHeader.jsx'
import { Outlet } from 'react-router-dom'

export function AdminLayout({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(true)

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <Sidebar 
        isOpen={sidebarOpen} 
        onToggle={() => setSidebarOpen(!sidebarOpen)}
      />
      
      {/* Main content area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <AdminHeader 
          onToggleSidebar={() => setSidebarOpen(!sidebarOpen)}
          sidebarOpen={sidebarOpen}
        />
        
        {/* Page content */}
        <main className="flex-1 overflow-auto p-6">
          <div className="max-w-7xl mx-auto">
            {children}
          </div>
        </main>
      </div>
    </div>
  )
}

// Default export for easier imports
export default AdminLayout
</file>

<file path="src/components/admin/CourseManager.jsx">
// src/components/admin/CourseManager.jsx
import React, { useState, useEffect } from 'react';
import styles from '../../styles/Admin.module.css';

const CourseManager = () => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [newCourse, setNewCourse] = useState({
    courseId: '',
    name: '',
    category: 'School Tuitions',
    description: '',
    duration: '',
    level: '',
    board: '',
    classGrade: '',
    medium: 'English',
    subjects: '',
    price: '',
    status: 'active'
  });

  // Categories from your Excel structure
  const categories = [
    'School Tuitions',
    'Recruitment Exams', 
    'Entrance Exams',
    'Professional Courses',
    'Technology & IT Certification',
    'Skill Development',
    'Language Courses',
    'Creative Arts',
    'Business & Management',
    'Health & Wellness',
    'Personal Development & Soft Skills',
    'Vocational & Technical Training',
    'Sanatana Dharmic Life Styles'
  ];

  // Boards for school tuitions
  const boards = [
    'TN State Board',
    'CBSE', 
    'ICSE',
    'Pearson,UK',
    'Canada'
  ];

  // Fetch existing courses (mock data for now)
  useEffect(() => {
    const fetchCourses = async () => {
      setLoading(true);
      try {
        // TODO: Replace with actual API call
        const mockCourses = [
          {
            id: '1',
            courseId: 'STTNE10',
            name: 'Class 10 - English Medium',
            category: 'School Tuitions',
            description: 'Complete TN Board Class 10 English Medium syllabus with SSLC preparation',
            duration: '12 months',
            level: 'SSLC',
            board: 'TN State Board',
            classGrade: '10',
            medium: 'English',
            subjects: 'Mathematics,Science,Social Science,English,Tamil',
            price: '₹8,999',
            status: 'active',
            createdAt: new Date().toISOString()
          },
          {
            id: '2', 
            courseId: 'RETPE1',
            name: 'TNPSC Group 1 - English Medium',
            category: 'Recruitment Exams',
            description: 'Complete preparation for TNPSC Group 1 examinations',
            duration: '18 months',
            level: 'Graduate',
            board: '',
            classGrade: '',
            medium: 'English',
            subjects: 'General Studies,Aptitude,Current Affairs',
            price: '₹15,999',
            status: 'active',
            createdAt: new Date().toISOString()
          }
        ];
        setCourses(mockCourses);
      } catch (error) {
        console.error('Error fetching courses:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchCourses();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Generate a unique ID for the new course
      const courseToAdd = {
        ...newCourse,
        id: Date.now().toString(),
        createdAt: new Date().toISOString()
      };

      // Add to local state (replace with API call later)
      setCourses(prev => [courseToAdd, ...prev]);
      
      // Reset form
      setNewCourse({
        courseId: '',
        name: '',
        category: 'School Tuitions',
        description: '',
        duration: '',
        level: '',
        board: '',
        classGrade: '',
        medium: 'English',
        subjects: '',
        price: '',
        status: 'active'
      });
      
      alert('Course added successfully!');
    } catch (error) {
      console.error('Error saving course:', error);
      alert('Failed to add course');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setNewCourse(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const deleteCourse = (courseId) => {
    if (window.confirm('Are you sure you want to delete this course?')) {
      setCourses(prev => prev.filter(course => course.id !== courseId));
    }
  };

  return (
    <div className={styles.courseManager}>
      <div className={styles.header}>
        <h1>Course Management</h1>
        <p>Add and manage all courses in the system</p>
      </div>

      {/* Add New Course Form */}
      <form onSubmit={handleSubmit} className={styles.courseForm}>
        <h2>Add New Course</h2>
        
        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label>Course ID *</label>
            <input
              type="text"
              value={newCourse.courseId}
              onChange={(e) => handleInputChange('courseId', e.target.value)}
              placeholder="STTNE10, RETPE1, EEMENE1"
              required
            />
            <small>Follow Excel pattern: STTNE10, STTNE6, RETPE1, EEMENE1</small>
          </div>

          <div className={styles.formGroup}>
            <label>Course Name *</label>
            <input
              type="text"
              value={newCourse.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              placeholder="Class 10 - English Medium"
              required
            />
          </div>
        </div>

        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label>Category *</label>
            <select
              value={newCourse.category}
              onChange={(e) => handleInputChange('category', e.target.value)}
              required
            >
              {categories.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label>Duration</label>
            <input
              type="text"
              value={newCourse.duration}
              onChange={(e) => handleInputChange('duration', e.target.value)}
              placeholder="6-12 months"
            />
          </div>
        </div>

        <div className={styles.formGroup}>
          <label>Description *</label>
          <textarea
            value={newCourse.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="Detailed course description..."
            rows="3"
            required
          />
        </div>

        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label>Level</label>
            <input
              type="text"
              value={newCourse.level}
              onChange={(e) => handleInputChange('level', e.target.value)}
              placeholder="SSLC, Graduate, Beginner, Intermediate, Advanced"
            />
          </div>

          <div className={styles.formGroup}>
            <label>Price</label>
            <input
              type="text"
              value={newCourse.price}
              onChange={(e) => handleInputChange('price', e.target.value)}
              placeholder="₹8,999"
            />
          </div>
        </div>

        {/* School-specific fields */}
        {newCourse.category === 'School Tuitions' && (
          <div className={styles.formGrid}>
            <div className={styles.formGroup}>
              <label>Board</label>
              <select
                value={newCourse.board}
                onChange={(e) => handleInputChange('board', e.target.value)}
              >
                <option value="">Select Board</option>
                {boards.map(board => (
                  <option key={board} value={board}>{board}</option>
                ))}
              </select>
            </div>

            <div className={styles.formGroup}>
              <label>Class/Grade</label>
              <input
                type="text"
                value={newCourse.classGrade}
                onChange={(e) => handleInputChange('classGrade', e.target.value)}
                placeholder="6, 7, 8, 9, 10, 11, 12"
              />
            </div>
          </div>
        )}

        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label>Medium</label>
            <select
              value={newCourse.medium}
              onChange={(e) => handleInputChange('medium', e.target.value)}
            >
              <option value="English">English</option>
              <option value="Tamil">Tamil</option>
              <option value="Hindi">Hindi</option>
              <option value="Bilingual">Bilingual</option>
            </select>
          </div>

          <div className={styles.formGroup}>
            <label>Status</label>
            <select
              value={newCourse.status}
              onChange={(e) => handleInputChange('status', e.target.value)}
            >
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
              <option value="draft">Draft</option>
            </select>
          </div>
        </div>

        <div className={styles.formGroup}>
          <label>Subjects (comma separated)</label>
          <input
            type="text"
            value={newCourse.subjects}
            onChange={(e) => handleInputChange('subjects', e.target.value)}
            placeholder="Mathematics, Science, Social Science, English, Tamil"
          />
        </div>

        <div className={styles.formFooter}>
          <button 
            type="submit" 
            className={styles.submitButton}
            disabled={loading}
          >
            {loading ? 'Adding Course...' : 'Add Course'}
          </button>
        </div>
      </form>

      {/* Courses List */}
      <div className={styles.coursesList}>
        <h2>Existing Courses ({courses.length})</h2>
        
        {loading ? (
          <div className={styles.loading}>Loading courses...</div>
        ) : courses.length === 0 ? (
          <div className={styles.emptyState}>
            <p>No courses added yet. Create your first course above!</p>
          </div>
        ) : (
          <div className={styles.coursesGrid}>
            {courses.map((course) => (
              <div key={course.id} className={styles.courseCard}>
                <div className={styles.courseHeader}>
                  <h3>{course.name}</h3>
                  <div>
                    <span className={styles.courseId}>{course.courseId}</span>
                    <span className={`${styles.status} ${styles[course.status]}`}>
                      {course.status}
                    </span>
                  </div>
                </div>
                
                <div className={styles.courseMeta}>
                  <span className={styles.category}>{course.category}</span>
                  {course.board && <span className={styles.board}>{course.board}</span>}
                  {course.classGrade && <span className={styles.grade}>Class {course.classGrade}</span>}
                  {course.level && <span className={styles.level}>{course.level}</span>}
                </div>

                <p className={styles.description}>{course.description}</p>
                
                <div className={styles.courseDetails}>
                  {course.duration && <span>⏱️ {course.duration}</span>}
                  {course.medium && <span>🗣️ {course.medium}</span>}
                  {course.price && <span>💰 {course.price}</span>}
                </div>

                {course.subjects && (
                  <div className={styles.subjects}>
                    <strong>Subjects:</strong> {course.subjects}
                  </div>
                )}

                <div className={styles.courseActions}>
                  <button className={styles.editButton}>Edit</button>
                  <button 
                    className={styles.deleteButton}
                    onClick={() => deleteCourse(course.id)}
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CourseManager;
</file>

<file path="src/components/admin/DecisionManager.jsx">
// src/components/admin/DecisionManager.jsx
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import styles from '../../styles/Admin.module.css';

const DecisionManager = () => {
  const [newDecision, setNewDecision] = useState({
    title: '',
    description: '',
    decision: '',
    rationale: '',
    category: 'architecture',
    impact: 'medium'
  });

  // Fetch decisions
  const { data: decisions, isLoading, error } = useQuery({
    queryKey: ['decisions'],
    queryFn: async () => {
      const response = await fetch('/api/decisions');
      if (!response.ok) throw new Error('Failed to fetch decisions');
      return response.json();
    }
  });

  const queryClient = useQueryClient();

  // Create decision mutation
  const createMutation = useMutation({
    mutationFn: async (decisionData) => {
      const response = await fetch('/api/decisions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(decisionData)
      });
      if (!response.ok) throw new Error('Failed to create decision');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries(['decisions']);
      // Reset form
      setNewDecision({
        title: '',
        description: '',
        decision: '',
        rationale: '',
        category: 'architecture',
        impact: 'medium'
      });
    }
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    createMutation.mutate(newDecision);
  };

  const handleInputChange = (field, value) => {
    setNewDecision(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (error) {
    return (
      <div className={styles.errorContainer}>
        <h2>Error Loading Decisions</h2>
        <p>{error.message}</p>
      </div>
    );
  }

  return (
    <div className={styles.decisionManager}>
      <div className={styles.header}>
        <h1>Decision Log</h1>
        <p>Track and manage architectural and development decisions</p>
      </div>

      {/* Add New Decision Form */}
      <form onSubmit={handleSubmit} className={styles.decisionForm}>
        <h2>Log New Decision</h2>
        
        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label>Title *</label>
            <input
              type="text"
              value={newDecision.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              placeholder="Brief decision title"
              required
            />
          </div>

          <div className={styles.formGroup}>
            <label>Category</label>
            <select
              value={newDecision.category}
              onChange={(e) => handleInputChange('category', e.target.value)}
            >
              <option value="architecture">Architecture</option>
              <option value="ui">UI/UX</option>
              <option value="data">Data</option>
              <option value="naming">Naming</option>
              <option value="security">Security</option>
              <option value="performance">Performance</option>
              <option value="general">General</option>
            </select>
          </div>
        </div>

        <div className={styles.formGroup}>
          <label>Description</label>
          <textarea
            value={newDecision.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="Context and background for this decision"
            rows="2"
          />
        </div>

        <div className={styles.formGroup}>
          <label>The Decision *</label>
          <textarea
            value={newDecision.decision}
            onChange={(e) => handleInputChange('decision', e.target.value)}
            placeholder="What was decided? Be specific and actionable."
            rows="3"
            required
          />
        </div>

        <div className={styles.formGroup}>
          <label>Rationale *</label>
          <textarea
            value={newDecision.rationale}
            onChange={(e) => handleInputChange('rationale', e.target.value)}
            placeholder="Why was this decision made? What alternatives were considered?"
            rows="3"
            required
          />
        </div>

        <div className={styles.formFooter}>
          <div className={styles.formGroup}>
            <label>Impact Level</label>
            <select
              value={newDecision.impact}
              onChange={(e) => handleInputChange('impact', e.target.value)}
            >
              <option value="low">Low Impact</option>
              <option value="medium">Medium Impact</option>
              <option value="high">High Impact</option>
            </select>
          </div>

          <button
            type="submit"
            disabled={createMutation.isLoading}
            className={styles.submitButton}
          >
            {createMutation.isLoading ? 'Logging...' : 'Log Decision'}
          </button>
        </div>
      </form>

      {/* Decisions List */}
      <div className={styles.decisionsList}>
        <h2>Recent Decisions ({decisions?.length || 0})</h2>
        
        {isLoading ? (
          <div className={styles.loading}>Loading decisions...</div>
        ) : decisions?.length === 0 ? (
          <div className={styles.emptyState}>
            <p>No decisions logged yet. Create your first decision above!</p>
          </div>
        ) : (
          <div className={styles.decisionsGrid}>
            {decisions?.map((decision) => (
              <div key={decision.id} className={styles.decisionCard}>
                <div className={styles.decisionHeader}>
                  <h3>{decision.title}</h3>
                  <span className={`${styles.impactBadge} ${styles[decision.impact]}`}>
                    {decision.impact} impact
                  </span>
                </div>
                
                <div className={styles.decisionMeta}>
                  <span className={styles.category}>{decision.category}</span>
                  <span className={styles.date}>
                    {new Date(decision.createdAt).toLocaleDateString()}
                  </span>
                </div>

                {decision.description && (
                  <p className={styles.description}>{decision.description}</p>
                )}
                
                <div className={styles.decisionContent}>
                  <strong>Decision:</strong> {decision.decision}
                </div>
                
                <div className={styles.rationale}>
                  <strong>Rationale:</strong> {decision.rationale}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default DecisionManager;
</file>

<file path="src/components/admin/Sidebar.jsx">
// src/components/admin/Sidebar.jsx
import { Link, useLocation } from 'react-router-dom'

const menuItems = [
  { name: 'Dashboard', href: '/admin', icon: '📊', badge: null },
  { name: 'Categories', href: '/admin/categories', icon: '📁', badge: null },
  { name: 'Academic Programs', href: '/admin/programs', icon: '🎓', badge: null },
  { name: 'Courses', href: '/admin/courses', icon: '📚', badge: null },
  { name: 'Subjects', href: '/admin/subjects', icon: '📖', badge: null },
  { name: 'Lessons', href: '/admin/lessons', icon: '✏️', badge: null },
  { name: 'Content', href: '/admin/content', icon: '🔄', badge: null },
  { name: 'Media Library', href: '/admin/media', icon: '🖼️', badge: null },
  { name: 'Users', href: '/admin/users', icon: '👥', badge: null },
  { name: 'Analytics', href: '/admin/analytics', icon: '📈', badge: null },
]

export function Sidebar({ isOpen, onToggle }) {
  const location = useLocation()

  return (
    <div className={`bg-white border-r border-gray-200 transition-all duration-300 flex flex-col ${
      isOpen ? 'w-64' : 'w-20'
    }`}>
      {/* Logo/Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <span className="text-2xl">🎓</span>
            <h1 className={`font-bold text-xl ml-3 ${isOpen ? 'block' : 'hidden'}`}>
              LMS Admin
            </h1>
          </div>
          <button
            onClick={onToggle}
            className="p-1 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors"
            title={isOpen ? 'Collapse sidebar' : 'Expand sidebar'}
          >
            {isOpen ? '‹' : '›'}
          </button>
        </div>
      </div>
      
      {/* Navigation */}
      <nav className="flex-1 overflow-y-auto py-4">
        {menuItems.map((item) => (
          <Link
            key={item.name}
            to={item.href}
            className={`flex items-center px-4 py-3 text-sm font-medium transition-colors group relative ${
              location.pathname === item.href 
                ? 'bg-blue-50 text-blue-600 border-r-2 border-blue-600' 
                : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
            }`}
            title={!isOpen ? item.name : ''}
          >
            <span className="text-lg flex-shrink-0">{item.icon}</span>
            <span className={`ml-3 transition-opacity ${isOpen ? 'opacity-100' : 'opacity-0 absolute left-12'}`}>
              {item.name}
            </span>
            
            {/* Badge */}
            {item.badge && (
              <span className={`ml-auto bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full ${
                isOpen ? 'block' : 'hidden'
              }`}>
                {item.badge}
              </span>
            )}
            
            {/* Tooltip for collapsed state */}
            {!isOpen && (
              <div className="absolute left-full ml-2 px-2 py-1 bg-gray-900 text-white text-sm rounded opacity-0 group-hover:opacity-100 transition-opacity z-50 whitespace-nowrap">
                {item.name}
              </div>
            )}
          </Link>
        ))}
      </nav>
      
      {/* Footer */}
      <div className="p-4 border-t border-gray-200">
        <div className={`flex items-center ${isOpen ? 'justify-between' : 'justify-center'}`}>
          {isOpen && (
            <div className="text-xs text-gray-500">
              <div>LMS Platform</div>
              <div>v1.0.0</div>
            </div>
          )}
          <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-sm font-medium">
            A
          </div>
        </div>
      </div>
    </div>
  )
}

export default Sidebar
</file>

<file path="src/components/CategorySection.jsx">
// src/components/CategorySection.jsx
import React, { useState } from 'react';
import SubCategorySection from './SubCategorySection';
import styles from '../styles/CategorySection.module.css';

const CategorySection = ({ category, onCourseClick }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
  };

  const getTotalCourses = () => {
    return category.subCategories.reduce((total, subCategory) => 
      total + (subCategory.courses?.length || 0), 0
    );
  };

  return (
    <div className={styles.categorySection}>
      <div 
        className={styles.categoryHeader}
        onClick={toggleExpand}
      >
        <div className={styles.categoryInfo}>
          <h3 className={styles.categoryTitle}>
            {category.name}
          </h3>
          <span className={styles.categoryDescription}>
            {category.description}
          </span>
        </div>
        
        <div className={styles.categoryStats}>
          <span className={styles.subCategoryCount}>
            {category.subCategories.length} Sub-Categories
          </span>
          <span className={styles.courseCount}>
            {getTotalCourses()} Courses
          </span>
          <span className={`${styles.arrow} ${isExpanded ? styles.arrowOpen : ''}`}>
            ▼
          </span>
        </div>
      </div>

      <div className={`${styles.categoryContent} ${isExpanded ? styles.contentVisible : styles.contentHidden}`}>
        {category.subCategories.map((subCategory) => (
          <SubCategorySection
            key={subCategory.id}
            subCategory={subCategory}
            onCourseClick={onCourseClick}
          />
        ))}
      </div>
    </div>
  );
};

export default CategorySection;
</file>

<file path="src/components/CourseCard.jsx">
// src/components/CourseCard.jsx
import React from 'react';
import styles from '../styles/CourseCard.module.css';

const CourseCard = ({ course, onClick }) => {
  return (
    <div className={styles.courseCard} onClick={() => onClick(course.id)}>
      <div className={styles.courseIcon}>
        {course.name.charAt(0)}
      </div>
      <div className={styles.courseInfo}>
        <h4 className={styles.courseName}>{course.name}</h4>
        <p className={styles.courseDescription}>
          {course.description && course.description.length > 120 
            ? `${course.description.substring(0, 120)}...` 
            : course.description || 'Course details available after enrollment'
          }
        </p>
        <div className={styles.courseMeta}>
          {course.duration && (
            <span className={styles.courseDuration}>⏱️ {course.duration}</span>
          )}
          {course.level && (
            <span className={styles.courseLevel}>{course.level}</span>
          )}
        </div>
        <button className={styles.learnMoreBtn}>
          Explore Course →
        </button>
      </div>
    </div>
  );
};

export default CourseCard;
</file>

<file path="src/components/CourseEnrollment.jsx">
// src/components/CourseEnrollment.jsx
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import styles from '../styles/Common.module.css';

export default function CourseEnrollment({ courseId, courseName, onEnrollmentSuccess }) {
  const { user, enrollInCourse, isUserEnrolled, canEnrollInCourse, userInfo } = useAuth();
  const [isEnrolling, setIsEnrolling] = useState(false);
  const [message, setMessage] = useState('');

  const handleEnroll = async () => {
    if (!user) {
      setMessage('Please login to enroll in this course');
      return;
    }

    if (isUserEnrolled(courseId)) {
      setMessage('You are already enrolled in this course');
      return;
    }

    // Check if user has access to this course
    if (!canEnrollInCourse(courseId)) {
      setMessage('Access denied. This course is not available for your user account.');
      return;
    }

    setIsEnrolling(true);
    setMessage('');

    const result = enrollInCourse(courseId);
    
    if (result.success) {
      setMessage('Successfully enrolled in the course!');
      if (onEnrollmentSuccess) {
        onEnrollmentSuccess(result.enrollment);
      }
      
      // Refresh the page after 2 seconds to show course content
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      setMessage(result.error);
    }
    
    setIsEnrolling(false);
  };

  if (isUserEnrolled(courseId)) {
    return (
      <div style={{ 
        background: '#d4edda', 
        color: '#155724', 
        padding: '1rem', 
        borderRadius: '6px',
        textAlign: 'center',
        margin: '1rem 0'
      }}>
        <div style={{ 
          background: '#28a745', 
          color: 'white', 
          padding: '8px 16px', 
          borderRadius: '20px',
          fontWeight: 'bold',
          display: 'inline-block',
          marginBottom: '0.5rem'
        }}>
          ✅ Enrolled
        </div>
        <p style={{ margin: 0 }}>You have access to this course content.</p>
      </div>
    );
  }

  // Check if user has access to this course
  const hasAccess = canEnrollInCourse(courseId);

  return (
    <div style={{ 
      background: 'white', 
      padding: '2rem', 
      borderRadius: '8px',
      boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
      textAlign: 'center',
      maxWidth: '500px',
      margin: '0 auto'
    }}>
      <h3 style={{ color: '#333', marginBottom: '1rem' }}>Enroll in {courseName}</h3>
      
      {userInfo && userInfo.valid && (
        <div style={{
          background: hasAccess ? '#e8f5e8' : '#fff3cd',
          padding: '1rem',
          borderRadius: '6px',
          marginBottom: '1rem',
          border: `1px solid ${hasAccess ? '#c3e6cb' : '#ffeaa7'}`
        }}>
          <p style={{ 
            margin: 0, 
            fontWeight: 'bold',
            color: hasAccess ? '#155724' : '#856404'
          }}>
            {hasAccess ? '✅ Access Granted' : '⚠️ Limited Access'}
          </p>
          <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', color: '#666' }}>
            User: {userInfo.category} • {userInfo.board || 'General'} • {userInfo.class || 'All Levels'}
          </p>
        </div>
      )}

      <p style={{ color: '#666', marginBottom: '1.5rem' }}>
        {hasAccess 
          ? 'Enroll now to access all course materials, quizzes, and progress tracking.'
          : 'Your user account has restricted access to this course.'
        }
      </p>
      
      <button 
        onClick={handleEnroll}
        style={{
          background: hasAccess 
            ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' 
            : '#6c757d',
          color: 'white',
          border: 'none',
          padding: '12px 30px',
          borderRadius: '6px',
          fontSize: '1.1rem',
          fontWeight: 'bold',
          cursor: hasAccess ? 'pointer' : 'not-allowed',
          transition: 'transform 0.2s ease',
          opacity: isEnrolling || !user || !hasAccess ? 0.6 : 1
        }}
        disabled={isEnrolling || !user || !hasAccess}
        onMouseOver={(e) => {
          if (!isEnrolling && user && hasAccess) e.target.style.transform = 'translateY(-2px)';
        }}
        onMouseOut={(e) => {
          e.target.style.transform = 'translateY(0)';
        }}
      >
        {isEnrolling ? 'Enrolling...' : (
          hasAccess ? 'Enroll Now' : 'Access Restricted'
        )}
      </button>

      {!user && (
        <p style={{ 
          color: '#dc3545', 
          fontStyle: 'italic', 
          marginTop: '1rem',
          fontSize: '0.9rem'
        }}>
          Please login first to enroll in courses.
        </p>
      )}

      {!hasAccess && user && (
        <p style={{ 
          color: '#856404', 
          fontStyle: 'italic', 
          marginTop: '1rem',
          fontSize: '0.9rem'
        }}>
          Contact support if you need access to this course.
        </p>
      )}

      {message && (
        <div style={{ 
          marginTop: '1rem',
          padding: '0.75rem',
          borderRadius: '4px',
          background: message.includes('Successfully') ? '#d4edda' : 
                     message.includes('Access denied') ? '#fff3cd' : '#f8d7da',
          color: message.includes('Successfully') ? '#155724' : 
                message.includes('Access denied') ? '#856404' : '#721c24',
          fontSize: '0.9rem'
        }}>
          {message}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/CourseGrid.jsx">
// src/components/CourseGrid.jsx
import React from 'react';
import CourseCard from './CourseCard';
import styles from '../styles/CourseGrid.module.css';

const CourseGrid = ({ courses, onCourseClick }) => {
  return (
    <div className={styles.courseGrid}>
      {courses.map((course) => (
        <CourseCard
          key={course.id}
          course={course}
          onClick={() => onCourseClick(course.id)}
        />
      ))}
    </div>
  );
};

export default CourseGrid;
</file>

<file path="src/components/Footer.jsx">
import React from 'react';
import styles from './Footer.module.css';

export default function Footer() {
  return (
    <footer className={styles.footer}>
      <div className={styles.copyright}>
        © 2025 DrillMasters LMS. All rights reserved.
      </div>

      <nav className={styles.links} aria-label="Footer navigation">
        <a href="https://www.drillmasters.in/index.html">Home</a> |
        <a href="https://www.drillmasters.in/about.html">About</a> |
        <a href="https://www.drillmasters.in/contact.html">Contact</a> |
        <a href="https://www.drillmasters.in/privacy.html">Privacy Policy</a> |
        <a href="https://www.drillmasters.in/terms.html">Terms of Use</a>
      </nav>

      <div className={styles.socials} aria-label="Social media links">
        <span className={styles.followLabel}>Follow us:</span>
        <a href="https://www.drillmasters.in/#">Facebook</a> |
        <a href="https://www.drillmasters.in/#">Twitter</a> |
        <a href="https://www.drillmasters.in/#">YouTube</a>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/Footer.module.css">
.footer {
  background-color: #038cfc;
  color: white;
  padding: 1rem;
  text-align: center;
  border-radius: 4px;
  font-size: 0.9rem;
}
</file>

<file path="src/components/HamburgerMenu.jsx">
import React, { useState } from 'react';

export default function HamburgerMenu() {
  const [open, setOpen] = useState(false);

  return (
    <button onClick={() => setOpen(!open)} aria-label="Menu toggle">
      {open ? 'Close' : 'Menu'}
    </button>
  );
}
</file>

<file path="src/components/Header.module.css">
/* components/Header.module.css */

/* Global reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  width: 100%;
  overflow-x: hidden;
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 24px;
  background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
  color: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  position: relative;
  min-height: 80px;
  width: 100%;
  z-index: 100;
}

/* Logo Container */
.logoContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  width: 60px;
  height: 60px;
  background: white;
  border-radius: 8px;
  padding: 5px;
  border: 1px solid rgba(255, 255, 255, 0.3);
  margin-right: 15px;
}

.logo {
  width: 100%;
  height: 100%;
  object-fit: contain;
  border-radius: 4px;
}

/* Caption Container */
.captionContainer {
  display: flex;
  align-items: center;
  flex-grow: 1;
  justify-content: center;
  text-align: center;
  margin: 0 20px;
  min-width: 0;
}

.captionContent {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  min-width: 0;
}

.captionLine1 {
  font-size: 1.8rem;
  font-weight: 900;
  color: white;
  line-height: 1;
  margin-bottom: 4px;
  letter-spacing: 1px;
  text-transform: uppercase;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  max-width: 100%;
}

.captionLine2 {
  font-size: 0.9rem;
  font-weight: 500;
  color: white;
  line-height: 1.2;
  max-width: 100%;
  letter-spacing: 0.3px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
}

/* Hamburger Menu */
.hamburgerContainer {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  z-index: 101;
}

.hamburger {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 30px;
  height: 22px;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
}

.hamburger span {
  display: block;
  height: 3px;
  width: 100%;
  background-color: white;
  transition: all 0.3s ease;
  transform-origin: center;
  border-radius: 2px;
}

.hamburgerActive span:nth-child(1) {
  transform: rotate(45deg) translate(6px, 6px);
}

.hamburgerActive span:nth-child(2) {
  opacity: 0;
}

.hamburgerActive span:nth-child(3) {
  transform: rotate(-45deg) translate(6px, -6px);
}

/* Mobile Menu Container */
.mobileMenuContainer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
}

/* Overlay */
.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1001;
}

/* Mobile Navigation */
.mobileNav {
  position: absolute;
  top: 0;
  right: 0;
  width: 320px;
  height: 100%;
  background: #1e293b;
  z-index: 1002;
  display: flex;
  flex-direction: column;
  border-left: 3px solid #f59e0b;
  box-shadow: -5px 0 25px rgba(0, 0, 0, 0.8);
}

.mobileNavHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  background: #0f172a;
  border-bottom: 2px solid #334155;
}

.mobileNavHeader h3 {
  color: #f59e0b;
  font-size: 1.5rem;
  font-weight: bold;
}

.closeButton {
  background: #dc2626;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background-color 0.3s ease;
  font-weight: bold;
}

.closeButton:hover {
  background: #b91c1c;
}

.mobileNavList {
  display: flex;
  flex-direction: column;
  gap: 0;
  list-style: none;
  padding: 20px;
  flex: 1;
}

.mobileNavLink {
  color: #e2e8f0;
  text-decoration: none;
  font-weight: 600;
  font-size: 1.2rem;
  padding: 18px 20px;
  display: block;
  border-radius: 8px;
  transition: all 0.3s ease;
  margin-bottom: 8px;
  background: #334155;
  border-left: 4px solid transparent;
}

/* Special styling for Home link */
.mobileNavList li:first-child .mobileNavLink {
  background: #1e40af;
  border-left-color: #60a5fa;
  color: #ffffff;
}

.mobileNavList li:first-child .mobileNavLink:hover {
  background: #2563eb;
  border-left-color: #93c5fd;
  color: #ffffff;
}

.mobileNavLink:hover {
  background: #475569;
  border-left-color: #f59e0b;
  color: #fef3c7;
  transform: translateX(5px);
}

.logoutButton {
  border: 2px solid #dc2626;
  color: #dc2626;
  background: transparent;
  padding: 18px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1.2rem;
  transition: all 0.3s ease;
  margin-top: auto;
  width: 100%;
}

.logoutButton:hover {
  background: #dc2626;
  color: white;
  transform: translateY(-2px);
}

/* Logout Confirmation Modal Styles */
.modalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000;
}

.confirmationModal {
  background: white;
  padding: 30px;
  border-radius: 10px;
  text-align: center;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  max-width: 400px;
  width: 90%;
}

.confirmationModal h3 {
  color: #1e40af;
  margin-bottom: 15px;
  font-size: 1.5rem;
}

.confirmationModal p {
  color: #4b5563;
  margin-bottom: 25px;
  font-size: 1.1rem;
}

.modalButtons {
  display: flex;
  gap: 15px;
  justify-content: center;
}

.confirmButton {
  background: #dc2626;
  color: white;
  border: none;
  padding: 12px 25px;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: background 0.3s ease;
}

.confirmButton:hover {
  background: #b91c1c;
}

.cancelButton {
  background: #6b7280;
  color: white;
  border: none;
  padding: 12px 25px;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: background 0.3s ease;
}

.cancelButton:hover {
  background: #4b5563;
}

/* Responsive Design */
@media (max-width: 768px) {
  .header {
    padding: 10px 16px;
    min-height: 70px;
  }
  
  .logoContainer {
    width: 50px;
    height: 50px;
    margin-right: 12px;
  }
  
  .captionLine1 {
    font-size: 1.3rem;
  }
  
  .captionLine2 {
    font-size: 0.75rem;
    white-space: normal;
    line-height: 1.1;
  }
  
  .mobileNav {
    width: 300px;
  }
}

@media (max-width: 640px) {
  .captionLine1 {
    font-size: 1.1rem;
  }
  
  .captionLine2 {
    font-size: 0.7rem;
    white-space: normal;
    line-height: 1.1;
  }
  
  .mobileNav {
    width: 280px;
  }
}

@media (max-width: 480px) {
  .header {
    padding: 8px 12px;
    min-height: 65px;
  }
  
  .logoContainer {
    width: 45px;
    height: 45px;
  }
  
  .captionLine1 {
    font-size: 1rem;
  }
  
  .captionLine2 {
    font-size: 0.65rem;
    white-space: normal;
    line-height: 1.1;
  }
  
  .mobileNav {
    width: 260px;
  }
  
  .mobileNavHeader {
    padding: 15px;
  }
  
  .mobileNavList {
    padding: 15px;
  }
  
  .mobileNavLink {
    font-size: 1.1rem;
    padding: 15px;
  }
  
  .confirmationModal {
    padding: 20px;
  }
  
  .modalButtons {
    flex-direction: column;
    gap: 10px;
  }
  
  .confirmButton, .cancelButton {
    width: 100%;
  }
}
</file>

<file path="src/components/Layout.module.css">
.layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.header {
  background: white;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.headerContent {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.logo h1 {
  color: #667eea;
  margin: 0;
  font-size: 1.8rem;
}

.nav {
  display: flex;
  gap: 2rem;
}

.navLink {
  color: #333;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

.navLink:hover {
  color: #667eea;
}

.authSection {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.userInfo {
  display: flex;
  align-items: center;
  gap: 1rem;
  color: #333;
}

.loginBtn {
  background: #667eea;
  color: white;
  padding: 0.5rem 1.5rem;
  border-radius: 6px;
  text-decoration: none;
  font-weight: 500;
  transition: background 0.3s ease;
}

.loginBtn:hover {
  background: #5a6fd8;
}

.logoutBtn {
  background: #dc3545;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
}

.logoutBtn:hover {
  background: #c82333;
}

.main {
  flex: 1;
}

.footer {
  background: #f8f9fa;
  text-align: center;
  padding: 2rem;
  color: #666;
}
</file>

<file path="src/components/LoginForm.jsx">
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import styles from '../styles/Common.module.css';

export default function LoginForm({ onLoginSuccess, onClose }) {
  const [formData, setFormData] = useState({
    userId: '',
    password: ''
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    setError(''); // Clear error when user types
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    const result = login(formData.userId, formData.password);
    
    if (result.success) {
      onLoginSuccess(result.user);
    } else {
      setError(result.error);
    }
    
    setIsLoading(false);
  };

  const fillTestCredentials = () => {
    setFormData({
      userId: 'ST_TN_10_E_000001',
      password: 'std123'
    });
  };

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.loginContainer}>
        <div className={styles.loginHeader}>
          <h2>Student Login</h2>
          <button 
            className={styles.closeButton}
            onClick={onClose}
            aria-label="Close login form"
          >
            ✕
          </button>
        </div>

        <form onSubmit={handleSubmit} className={styles.loginForm}>
          {error && (
            <div className={styles.errorMessage}>
              {error}
            </div>
          )}

          <div className={styles.formGroup}>
            <label htmlFor="userId" className={styles.formLabel}>
              Student ID
            </label>
            <input
              type="text"
              id="userId"
              name="userId"
              value={formData.userId}
              onChange={handleChange}
              className={styles.formInput}
              placeholder="Enter your student ID"
              required
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="password" className={styles.formLabel}>
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className={styles.formInput}
              placeholder="Enter your password"
              required
            />
          </div>

          <button 
            type="submit" 
            className={styles.btnPrimary}
            disabled={isLoading}
          >
            {isLoading ? 'Logging in...' : 'Log In'}
          </button>

          <div className={styles.testCredentials}>
            <button 
              type="button"
              className={styles.testBtn}
              onClick={fillTestCredentials}
            >
              Fill Test Credentials
            </button>
            <p className={styles.credentialsNote}>
              Test User: Ravi (ST_TN_10_E_000001)
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ProtectedCourseRoute.jsx">
// src/components/ProtectedCourseRoute.jsx
import React from 'react';
import { useAuth } from '../context/AuthContext';
import CourseEnrollment from './CourseEnrollment';
import styles from '../styles/Common.module.css';

export default function ProtectedCourseRoute({ 
  courseId, 
  courseName, 
  children 
}) {
  const { user, isUserEnrolled, loading } = useAuth();

  if (loading) {
    return (
      <div className={styles.pageContainer}>
        <div className={styles.textCenter}>
          <div className={styles.loadingSpinner}></div>
          <p>Checking course access...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className={styles.pageContainer}>
        <div className={styles.textCenter}>
          <h2>Access Required</h2>
          <p>Please log in to access course content.</p>
        </div>
      </div>
    );
  }

  if (!isUserEnrolled(courseId)) {
    return (
      <div className={styles.pageContainer}>
        <div className={styles.textCenter}>
          <h2>Enrollment Required for {courseName}</h2>
          <p>You need to enroll in this course to access the content.</p>
          
          <div style={{ marginTop: '2rem' }}>
            <CourseEnrollment 
              courseId={courseId} 
              courseName={courseName}
            />
          </div>
          
          <div style={{ marginTop: '2rem', textAlign: 'left', maxWidth: '600px', margin: '2rem auto' }}>
            <h3>Course Preview</h3>
            <p>This course covers comprehensive preparation materials and practice tests.</p>
            <ul style={{ textAlign: 'left', display: 'inline-block' }}>
              <li>Structured learning path</li>
              <li>Interactive quizzes</li>
              <li>Progress tracking</li>
              <li>Expert guidance</li>
            </ul>
          </div>
        </div>
      </div>
    );
  }

  // User is enrolled, show course content
  return (
    <div className={styles.pageContainer}>
      <div style={{ 
        background: 'white', 
        padding: '2rem', 
        borderRadius: '8px',
        marginBottom: '2rem',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
      }}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          flexWrap: 'wrap',
          gap: '1rem'
        }}>
          <h1 style={{ margin: 0, color: '#333' }}>{courseName}</h1>
          <div style={{ 
            background: '#28a745', 
            color: 'white', 
            padding: '8px 16px', 
            borderRadius: '20px',
            fontWeight: 'bold',
            fontSize: '0.9rem'
          }}>
            ✅ Enrolled
          </div>
        </div>
      </div>
      {children}
    </div>
  );
}
</file>

<file path="src/components/SchoolBoardTabs.jsx">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from '../styles/SchoolBoardTabs.module.css';

const SchoolBoardTabs = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('cbse');
  const [selectedMedium, setSelectedMedium] = useState({});

  const boardData = {
    cbse: {
      name: 'CBSE',
      description: 'Central Board of Secondary Education',
      mediums: ['English', 'Hindi'],
      classes: [
        { id: 'cbse-1', name: 'Class 1', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'cbse-2', name: 'Class 2', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'cbse-3', name: 'Class 3', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'cbse-4', name: 'Class 4', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'cbse-5', name: 'Class 5', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'cbse-6', name: 'Class 6', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science', 'Computer'] },
        { id: 'cbse-7', name: 'Class 7', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science', 'Computer'] },
        { id: 'cbse-8', name: 'Class 8', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science', 'Computer'] },
        { id: 'cbse-9', name: 'Class 9', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science', 'Computer'] },
        { id: 'cbse-10', name: 'Class 10', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science', 'Computer'] },
        { id: 'cbse-11-sci', name: 'Class 11 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'cbse-12-sci', name: 'Class 12 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'cbse-11-com', name: 'Class 11 Commerce', subjects: ['Accountancy', 'Business Studies', 'Economics', 'Mathematics', 'Computer Science', 'English'] },
        { id: 'cbse-12-com', name: 'Class 12 Commerce', subjects: ['Accountancy', 'Business Studies', 'Economics', 'Mathematics', 'Computer Science', 'English'] }
      ]
    },
    state: {
      name: 'State Board',
      description: 'Tamil Nadu State Board',
      mediums: ['English', 'Tamil'],
      classes: [
        { id: 'state-1', name: 'Class 1', subjects: ['Tamil', 'English', 'Mathematics', 'EVS'] },
        { id: 'state-2', name: 'Class 2', subjects: ['Tamil', 'English', 'Mathematics', 'EVS'] },
        { id: 'state-3', name: 'Class 3', subjects: ['Tamil', 'English', 'Mathematics', 'EVS'] },
        { id: 'state-4', name: 'Class 4', subjects: ['Tamil', 'English', 'Mathematics', 'EVS'] },
        { id: 'state-5', name: 'Class 5', subjects: ['Tamil', 'English', 'Mathematics', 'EVS'] },
        { id: 'state-6', name: 'Class 6', subjects: ['Tamil', 'English', 'Mathematics', 'Science', 'Social Science'] },
        { id: 'state-7', name: 'Class 7', subjects: ['Tamil', 'English', 'Mathematics', 'Science', 'Social Science'] },
        { id: 'state-8', name: 'Class 8', subjects: ['Tamil', 'English', 'Mathematics', 'Science', 'Social Science'] },
        { id: 'state-9', name: 'Class 9', subjects: ['Tamil', 'English', 'Mathematics', 'Science', 'Social Science'] },
        { id: 'state-10', name: 'Class 10', subjects: ['Tamil', 'English', 'Mathematics', 'Science', 'Social Science'] },
        { id: 'state-11-sci', name: 'Class 11 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'state-12-sci', name: 'Class 12 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'state-11-com', name: 'Class 11 Commerce', subjects: ['Accountancy', 'Commerce', 'Economics', 'Business Mathematics', 'English'] },
        { id: 'state-12-com', name: 'Class 12 Commerce', subjects: ['Accountancy', 'Commerce', 'Economics', 'Business Mathematics', 'English'] }
      ]
    },
    icse: {
      name: 'ICSE/ISC',
      description: 'Indian Certificate of Secondary Education',
      mediums: ['English', 'Hindi'],
      classes: [
        { id: 'icse-1', name: 'Class 1', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'icse-2', name: 'Class 2', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'icse-3', name: 'Class 3', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'icse-4', name: 'Class 4', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'icse-5', name: 'Class 5', subjects: ['English', 'Hindi', 'Mathematics', 'EVS', 'Computer'] },
        { id: 'icse-6', name: 'Class 6', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'History', 'Geography', 'Computer'] },
        { id: 'icse-7', name: 'Class 7', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'History', 'Geography', 'Computer'] },
        { id: 'icse-8', name: 'Class 8', subjects: ['English', 'Hindi', 'Mathematics', 'Science', 'History', 'Geography', 'Computer'] },
        { id: 'icse-9', name: 'Class 9', subjects: ['English', 'Hindi', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'History', 'Geography'] },
        { id: 'icse-10', name: 'Class 10', subjects: ['English', 'Hindi', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'History', 'Geography'] },
        { id: 'icse-11-sci', name: 'Class 11 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'icse-12-sci', name: 'Class 12 Science', subjects: ['Physics', 'Chemistry', 'Mathematics', 'Biology', 'Computer Science', 'English'] },
        { id: 'icse-11-com', name: 'Class 11 Commerce', subjects: ['Accounts', 'Commerce', 'Economics', 'Business Studies', 'English'] },
        { id: 'icse-12-com', name: 'Class 12 Commerce', subjects: ['Accounts', 'Commerce', 'Economics', 'Business Studies', 'English'] }
      ]
    },
    pearson: {
      name: 'Pearson Edexcel',
      description: 'Pearson Edexcel International Curriculum',
      mediums: ['English'],
      classes: [
        { id: 'pearson-1', name: 'Year 1', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives'] },
        { id: 'pearson-2', name: 'Year 2', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives'] },
        { id: 'pearson-3', name: 'Year 3', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives'] },
        { id: 'pearson-4', name: 'Year 4', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives'] },
        { id: 'pearson-5', name: 'Year 5', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives'] },
        { id: 'pearson-6', name: 'Year 6', subjects: ['English', 'Mathematics', 'Science', 'Global Perspectives', 'ICT'] },
        { id: 'pearson-7', name: 'Year 7', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'ICT'] },
        { id: 'pearson-8', name: 'Year 8', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'ICT'] },
        { id: 'pearson-9', name: 'Year 9', subjects: ['English Language', 'Mathematics', 'Additional Mathematics', 'Physics', 'Chemistry', 'Biology', 'Economics'] },
        { id: 'pearson-10', name: 'Year 10', subjects: ['English Language', 'Mathematics', 'Additional Mathematics', 'Physics', 'Chemistry', 'Biology', 'Economics'] },
        { id: 'pearson-11', name: 'AS Level', subjects: ['Mathematics', 'Further Mathematics', 'Physics', 'Chemistry', 'Biology', 'Economics', 'Business Studies'] },
        { id: 'pearson-12', name: 'A Level', subjects: ['Mathematics', 'Further Mathematics', 'Physics', 'Chemistry', 'Biology', 'Economics', 'Business Studies'] }
      ]
    },
    uk: {
      name: 'UK Curriculum',
      description: 'United Kingdom National Curriculum',
      mediums: ['English'],
      classes: [
        { id: 'uk-1', name: 'Year 1', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History'] },
        { id: 'uk-2', name: 'Year 2', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History'] },
        { id: 'uk-3', name: 'Year 3', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History'] },
        { id: 'uk-4', name: 'Year 4', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History'] },
        { id: 'uk-5', name: 'Year 5', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History'] },
        { id: 'uk-6', name: 'Year 6', subjects: ['English', 'Mathematics', 'Science', 'Geography', 'History', 'French'] },
        { id: 'uk-7', name: 'Year 7', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French'] },
        { id: 'uk-8', name: 'Year 8', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French'] },
        { id: 'uk-9', name: 'Year 9', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French', 'Economics'] },
        { id: 'uk-10', name: 'Year 10', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French', 'Economics'] },
        { id: 'uk-11', name: 'Year 11 (GCSE)', subjects: ['English Literature', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'Business Studies'] },
        { id: 'uk-12', name: 'Year 12 (A-Level)', subjects: ['Mathematics', 'Further Mathematics', 'Physics', 'Chemistry', 'Biology', 'Economics', 'Business Studies'] }
      ]
    },
    canada: {
      name: 'Canada Curriculum',
      description: 'Canadian Provincial Curriculum',
      mediums: ['English', 'French'],
      classes: [
        { id: 'canada-1', name: 'Grade 1', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French'] },
        { id: 'canada-2', name: 'Grade 2', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French'] },
        { id: 'canada-3', name: 'Grade 3', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French'] },
        { id: 'canada-4', name: 'Grade 4', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French'] },
        { id: 'canada-5', name: 'Grade 5', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French'] },
        { id: 'canada-6', name: 'Grade 6', subjects: ['English', 'Mathematics', 'Science', 'Social Studies', 'French', 'ICT'] },
        { id: 'canada-7', name: 'Grade 7', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Social Studies', 'French', 'ICT'] },
        { id: 'canada-8', name: 'Grade 8', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Social Studies', 'French', 'ICT'] },
        { id: 'canada-9', name: 'Grade 9', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French', 'Economics'] },
        { id: 'canada-10', name: 'Grade 10', subjects: ['English', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'French', 'Economics'] },
        { id: 'canada-11', name: 'Grade 11', subjects: ['English', 'Advanced Mathematics', 'Physics', 'Chemistry', 'Biology', 'Computer Science', 'Economics', 'Business'] },
        { id: 'canada-12', name: 'Grade 12', subjects: ['English', 'Advanced Mathematics', 'Physics', 'Chemistry', 'Biology', 'Computer Science', 'Economics', 'Business'] }
      ]
    }
  };

  const handleEnrollClick = (classId, medium) => {
    const boardName = boardData[activeTab].name;
    alert(`Please contact support to enroll in ${classId} - ${boardName} (${medium} Medium)`);
  };

  const handleMediumChange = (medium) => {
    setSelectedMedium(prev => ({
      ...prev,
      [activeTab]: medium
    }));
  };

  const getCurrentMedium = () => {
    return selectedMedium[activeTab] || boardData[activeTab].mediums[0];
  };

  return (
    <div className={styles.schoolTabsContainer}>
      {/* Tab Headers */}
      <div className={styles.tabHeaders}>
        {Object.keys(boardData).map((boardKey) => (
          <button
            key={boardKey}
            className={`${styles.tabHeader} ${activeTab === boardKey ? styles.activeTab : ''}`}
            onClick={() => setActiveTab(boardKey)}
          >
            {boardData[boardKey].name}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      <div className={styles.tabContent}>
        <div className={styles.boardInfo}>
          <h3>{boardData[activeTab].name}</h3>
          <p>{boardData[activeTab].description}</p>
          
          {/* Language Medium Selection */}
          <div className={styles.mediumSelector}>
            <label>Select Medium:</label>
            <div className={styles.mediumButtons}>
              {boardData[activeTab].mediums.map((medium) => (
                <button
                  key={medium}
                  className={`${styles.mediumButton} ${getCurrentMedium() === medium ? styles.activeMedium : ''}`}
                  onClick={() => handleMediumChange(medium)}
                >
                  {medium}
                  {medium === 'Tamil' && ' 🇮🇳'}
                  {medium === 'Hindi' && ' 🇮🇳'}
                  {medium === 'English' && ' 🇬🇧'}
                  {medium === 'French' && ' 🇫🇷'}
                </button>
              ))}
            </div>
          </div>
        </div>

        <div className={styles.classesGrid}>
          {boardData[activeTab].classes.map((classItem) => (
            <div key={classItem.id} className={styles.classCard}>
              <div className={styles.classHeader}>
                <h4>{classItem.name}</h4>
                <div className={styles.classInfo}>
                  <span className={styles.mediumBadge}>
                    {getCurrentMedium()} Medium
                  </span>
                  <span className={styles.classLevel}>
                    {classItem.id.includes('1') || classItem.id.includes('2') || classItem.id.includes('3') || 
                     classItem.id.includes('4') || classItem.id.includes('5') ? 'Primary' : 
                     classItem.id.includes('6') || classItem.id.includes('7') || classItem.id.includes('8') ? 'Middle School' :
                     classItem.id.includes('9') || classItem.id.includes('10') ? 'Secondary' : 'Senior Secondary'}
                  </span>
                </div>
              </div>
              
              <div className={styles.subjectsList}>
                <h5>Subjects Offered ({getCurrentMedium()}):</h5>
                <div className={styles.subjectsGrid}>
                  {classItem.subjects.map((subject, index) => (
                    <span key={index} className={styles.subjectTag}>
                      {subject}
                    </span>
                  ))}
                </div>
              </div>

              <div className={styles.classFeatures}>
                <div className={styles.feature}>
                  <span>📚</span>
                  Complete Syllabus
                </div>
                <div className={styles.feature}>
                  <span>🎥</span>
                  Video Lectures
                </div>
                <div className={styles.feature}>
                  <span>📝</span>
                  Regular Tests
                </div>
                <div className={styles.feature}>
                  <span>🤝</span>
                  Doubt Sessions
                </div>
                {getCurrentMedium() === 'French' && (
                  <div className={styles.feature}>
                    <span>🇫🇷</span>
                    Bilingual Support
                  </div>
                )}
                {(getCurrentMedium() === 'Tamil' || getCurrentMedium() === 'Hindi') && (
                  <div className={styles.feature}>
                    <span>🇮🇳</span>
                    Regional Language Expert
                  </div>
                )}
              </div>

              <button 
                className={styles.enrollButton}
                onClick={() => handleEnrollClick(classItem.name, getCurrentMedium())}
              >
                Enroll in {classItem.name} ({getCurrentMedium()})
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default SchoolBoardTabs;
</file>

<file path="src/components/SubCategorySection.jsx">
// src/components/SubCategorySection.jsx
import React, { useState } from 'react';
import CourseGrid from './CourseGrid';
import styles from '../styles/SubCategorySection.module.css';

const SubCategorySection = ({ subCategory, onCourseClick }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className={styles.subCategorySection}>
      <div 
        className={styles.subCategoryHeader}
        onClick={toggleExpand}
      >
        <div className={styles.subCategoryInfo}>
          <h4 className={styles.subCategoryTitle}>
            {subCategory.name}
          </h4>
          <span className={styles.subCategoryDescription}>
            {subCategory.description}
          </span>
        </div>
        
        <div className={styles.subCategoryStats}>
          <span className={styles.courseCount}>
            {subCategory.courses?.length || 0} Courses
          </span>
          <span className={`${styles.arrow} ${isExpanded ? styles.arrowOpen : ''}`}>
            ▼
          </span>
        </div>
      </div>

      <div className={`${styles.subCategoryContent} ${isExpanded ? styles.contentVisible : styles.contentHidden}`}>
        {subCategory.courses && subCategory.courses.length > 0 ? (
          <CourseGrid 
            courses={subCategory.courses}
            onCourseClick={onCourseClick}
          />
        ) : (
          <div className={styles.noCourses}>
            Courses coming soon...
          </div>
        )}
      </div>
    </div>
  );
};

export default SubCategorySection;
</file>

<file path="src/context/AuthContext.jsx">
// src/context/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { parseUserId } from '../utils/userIdParser';

// Create the context FIRST
const AuthContext = createContext();

// Pre-defined test users with restricted access
const HARDCODED_USERS = [
  {
    name: 'Ravi',
    id: 'ST_TN_10_E_000001',
    password: 'std123'
    // Remove allowedCourses - access determined by ID parsing
  },
  {
    name: 'Priya', 
    id: 'ST_CB_12_E_000003',
    password: 'std123'
    // Remove allowedCourses - access determined by ID parsing
  },
  {
    name: 'Arun',
    id: 'RE_TP_00_E_000006', 
    password: 'std123',
    allowedCourses: ['Rectt1'] // Only TNPSC course access
  }
];

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [enrollments, setEnrollments] = useState({});
  const [loading, setLoading] = useState(true);
  const [userInfo, setUserInfo] = useState(null);

  // Load auth state from localStorage on app start
  useEffect(() => {
    const savedUser = localStorage.getItem('drillmasters_user');
    const savedEnrollments = localStorage.getItem('drillmasters_enrollments');
    
    if (savedUser) {
      const userData = JSON.parse(savedUser);
      setUser(userData);
      setUserInfo(parseUserId(userData.id));
    }
    if (savedEnrollments) {
      setEnrollments(JSON.parse(savedEnrollments));
    }
    setLoading(false);
  }, []);

  const login = (userId, password) => {
    console.log('Login attempt:', userId);
    
    const foundUser = HARDCODED_USERS.find(u => u.id === userId && u.password === password);
    
    if (foundUser) {
      const userData = { ...foundUser };
      const parsedInfo = parseUserId(userId);
      
      console.log('User found:', userData);
      console.log('Parsed user info:', parsedInfo);
      
      setUser(userData);
      setUserInfo(parsedInfo);
      localStorage.setItem('drillmasters_user', JSON.stringify(userData));
      return { success: true, user: userData, userInfo: parsedInfo };
    }
    
    console.log('User not found');
    return { success: false, error: 'Invalid credentials' };
  };

  const logout = () => {
    setUser(null);
    setUserInfo(null);
    setEnrollments({});
    localStorage.removeItem('drillmasters_user');
    localStorage.removeItem('drillmasters_enrollments');
  };

  const canEnrollInCourse = (courseId) => {
    if (!user || !userInfo || !userInfo.isValid) return false;
    
    console.log('Checking enrollment for:', { 
      userId: user.id, 
      courseId, 
      userInfo
    });

    // Check explicit allowed courses (for non-school tuition users)
    if (user.allowedCourses && user.allowedCourses.includes(courseId)) {
      console.log('Access granted via allowedCourses');
      return true;
    }
    
    // Check school tuition access via ID parsing
    if (courseId.startsWith('ST_') && userInfo.categoryCode === 'ST') {
      // Extract board, class, medium from courseId (format: ST_Board_Class_Medium)
      const parts = courseId.split('_');
      if (parts.length >= 4) {
        const [, courseBoard, courseClass, courseMedium] = parts;
        const canAccess = userInfo.board === courseBoard && 
               userInfo.classGrade === courseClass && 
               userInfo.medium === courseMedium;
        console.log('School tuition access check:', { 
          userBoard: userInfo.board, courseBoard,
          userClass: userInfo.classGrade, courseClass,
          userMedium: userInfo.medium, courseMedium,
          canAccess 
        });
        return canAccess;
      }
    }
    
    // Check recruitment exam access via ID parsing
    if (courseId.startsWith('Rectt') && userInfo.categoryCode === 'RE') {
      const courseMap = {
        'Rectt1': 'TP', // TNPSC
        'Rectt2': 'TR', // TRB
        'Rectt3': 'TU', // TNUSRB
        'Rectt4': 'SS', // SSC
        'Rectt5': 'UP', // UPSC
        'Rectt6': 'RR', // RRB
        'Rectt7': 'IB'  // IBPS
      };
      const canAccess = courseMap[courseId] === userInfo.examCode;
      console.log('Recruitment exam access check:', canAccess);
      return canAccess;
    }
    
    console.log('No access granted');
    return false;
  };

  const enrollInCourse = (courseId) => {
    if (!user) return { success: false, error: 'User not logged in' };
    if (!canEnrollInCourse(courseId)) {
      return { 
        success: false, 
        error: 'Access denied. This course is not available for your user account.' 
      };
    }

    const newEnrollments = {
      ...enrollments,
      [user.id]: {
        ...enrollments[user.id],
        [courseId]: {
          enrolledAt: new Date().toISOString(),
          progress: 0,
          completedLevels: []
        }
      }
    };

    setEnrollments(newEnrollments);
    localStorage.setItem('drillmasters_enrollments', JSON.stringify(newEnrollments));
    
    return { success: true, enrollment: newEnrollments[user.id][courseId] };
  };

  const isUserEnrolled = (courseId) => {
    if (!user) return false;
    return !!(enrollments[user.id]?.[courseId]);
  };

  const getEnrollmentProgress = (courseId) => {
    if (!user || !enrollments[user.id]?.[courseId]) return null;
    return enrollments[user.id][courseId];
  };

  const updateProgress = (courseId, progressData) => {
    if (!user || !enrollments[user.id]?.[courseId]) return false;

    const updatedEnrollments = {
      ...enrollments,
      [user.id]: {
        ...enrollments[user.id],
        [courseId]: {
          ...enrollments[user.id][courseId],
          ...progressData,
          lastUpdated: new Date().toISOString()
        }
      }
    };

    setEnrollments(updatedEnrollments);
    localStorage.setItem('drillmasters_enrollments', JSON.stringify(updatedEnrollments));
    return true;
  };

  const value = {
    user,
    userInfo,
    enrollments,
    loading,
    login,
    logout,
    enrollInCourse,
    isUserEnrolled,
    canEnrollInCourse,
    getEnrollmentProgress,
    updateProgress
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Export the context itself if needed elsewhere
export default AuthContext;
</file>

<file path="src/index.css">
/* src/styles/index.css - GLOBAL STYLES */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, #root {
  width: 100%;
  min-height: 100vh;
  overflow-x: hidden;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Ensure all pages take full width */
.app-container {
  width: 100%;
  min-height: 100vh;
}

.page-container {
  width: 100%;
  min-height: calc(100vh - 80px); /* Subtract header height */
  padding: 20px;
  background: #f8fafc; /* Light background for pages */
}

/* If you're using React Router, make sure main content area is full width */
main {
  width: 100%;
  min-height: calc(100vh - 80px);
}
</file>

<file path="src/index.js">
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'; // Updated path to styles folder
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
</file>

<file path="src/lib/context/session-starter.js">
// src/lib/context/session-starter.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

/**
 * Get comprehensive development context for session start
 */
export async function getSessionContext() {
  try {
    const recentDecisions = await prisma.decisionLog.findMany({
      where: {
        OR: [
          { impact: 'high' },
          { createdAt: { gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } }
        ]
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    })

    // Get tech stack decisions
    const techDecisions = await prisma.decisionLog.findMany({
      where: {
        category: { in: ['architecture', 'database', 'ai'] }
      },
      orderBy: { createdAt: 'desc' },
      take: 5
    })

    const context = `
🧠 DEVELOPMENT CONTEXT - REVIEW BEFORE STARTING:

TECH STACK DECISIONS:
${techDecisions.map(d => `• ${d.title}: ${d.decision}`).join('\n')}

RECENT KEY DECISIONS (Last 7 days):
${recentDecisions.map(d => `• ${d.title}`).join('\n')}

CORE ARCHITECTURE:
• Frontend: React Vite
• Database: Neon PostgreSQL + Prisma  
• AI: Hugging Face Models
• Storage: Cloudflare R2
• Lesson System: 5-level progression
• Content: Rich media with versioning

🚫 NO RE-DISCUSSION NEEDED: Above decisions are final.
🔍 CHECK DecisionLog TABLE for full context.

    `

    return context
  } catch (error) {
    return `⚠️ Context load failed: ${error.message}`
  } finally {
    await prisma.$disconnect()
  }
}

/**
 * Quick context for fast session start
 */
export function getQuickContext() {
  return `
QUICK CONTEXT - DO NOT FORGET:
• Stack: React Vite + Neon PostgreSQL + Hugging Face ✅
• Architecture: 5-level lessons, syllabus versioning ✅  
• Current: Building LMS admin panel
• Memory: DecisionLog system active (10 decisions)
• NO stack/architecture changes - build features instead!
  `.trim()
}

/**
 * Get decisions by category
 */
export async function getDecisionsByCategory(category) {
  try {
    const decisions = await prisma.decisionLog.findMany({
      where: { category },
      orderBy: { createdAt: 'desc' }
    })
    return decisions
  } catch (error) {
    console.error('Error fetching decisions:', error)
    return []
  } finally {
    await prisma.$disconnect()
  }
}
</file>

<file path="src/lib/db.js">
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis

export const prisma = globalForPrisma.prisma || new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
</file>

<file path="src/lib/utils/decision-capture.js">
// src/lib/utils/decision-capture.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

/**
 * Capture a new decision in the DecisionLog system
 */
export async function captureNewDecision(decisionData) {
  try {
    const decision = await prisma.decisionLog.create({
      data: {
        ...decisionData,
        participants: ['Developer', 'AI Assistant'],
        dependsOn: decisionData.dependsOn || [],
        madeBy: 'ai-assisted-development',
        reviewedAt: new Date(),
        expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // 90 days
      }
    })
    
    console.log(`📝 Decision logged: ${decisionData.title}`)
    return decision
  } catch (error) {
    console.error('❌ Failed to log decision:', error)
    throw error
  }
}

/**
 * Template for new decisions
 */
export const decisionTemplate = {
  title: "",
  description: "",
  decision: "", 
  rationale: "",
  alternativesConsidered: [],
  category: "architecture", // architecture, database, ai, education, ui, content, assessment
  impact: "medium" // low, medium, high
}

/**
 * Update an existing decision
 */
export async function updateDecision(decisionId, updates) {
  try {
    const decision = await prisma.decisionLog.update({
      where: { id: decisionId },
      data: {
        ...updates,
        reviewedAt: new Date()
      }
    })
    
    console.log(`📝 Decision updated: ${decision.title}`)
    return decision
  } catch (error) {
    console.error('❌ Failed to update decision:', error)
    throw error
  }
}

/**
 * Mark a decision as deprecated (replaced by new one)
 */
export async function deprecateDecision(decisionId, replacedById) {
  return await updateDecision(decisionId, {
    status: "deprecated",
    replacedBy: replacedById
  })
}
</file>

<file path="src/LoginForm.jsx">
import React from 'react';
import Header from './Header';
import Footer from './Footer';

export default function Layout({ children }) {
  return (
    <>
      <Header />
      <main style={{ minHeight: '80vh', padding: '1rem 2rem' }}>
        {children}
      </main>
      <Footer />
    </>
  );
}
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/pages/Admin.jsx">
// src/pages/Admin.jsx
import React from 'react';
import { Routes, Route, Navigate, Link, useLocation } from 'react-router-dom';
//import { useAuth } from '../context/AuthContext';
import Layout from '../components/Layout';
import DecisionManager from '../components/admin/DecisionManager';
import styles from '../styles/Admin.module.css';
import CourseManager from '../components/admin/CourseManager';

const AdminDashboard = () => {
  return (
    <div className={styles.dashboard}>
      <h1>Admin Dashboard</h1>
      <div className={styles.statsGrid}>
        <div className={styles.statCard}>
          <h3>Total Courses</h3>
          <p className={styles.statNumber}>150+</p>
        </div>
        <div className={styles.statCard}>
          <h3>Active Students</h3>
          <p className={styles.statNumber}>20,000+</p>
        </div>
        <div className={styles.statCard}>
          <h3>Decisions Logged</h3>
          <p className={styles.statNumber}>15+</p>
        </div>
      </div>
    </div>
  );
};

const AdminSidebar = () => {
  const location = useLocation();
  
  const menuItems = [
    { path: '/admin', label: 'Dashboard', icon: '📊' },
    { path: '/admin/decisions', label: 'Decision Log', icon: '📝' },
    { path: '/admin/courses', label: 'Course Management', icon: '📚' },
    { path: '/admin/users', label: 'User Management', icon: '👥' },
    { path: '/admin/content', label: 'Content Manager', icon: '🎬' },
  ];

  return (
    <div className={styles.sidebar}>
      <div className={styles.sidebarHeader}>
        <h2>Admin Panel</h2>
      </div>
      <nav className={styles.sidebarNav}>
        {menuItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`${styles.navLink} ${
              location.pathname === item.path ? styles.active : ''
            }`}
          >
            <span className={styles.navIcon}>{item.icon}</span>
            {item.label}
          </Link>
        ))}
      </nav>
    </div>
  );
};

const Admin = () => {
  // TEMPORARILY COMMENT OUT AUTH FOR DEVELOPMENT
  // const { user } = useAuth();
  // if (!user) {
  //   return (
  //     <Layout>
  //       <div className={styles.accessDenied}>
  //         <h2>Access Denied</h2>
  //         <p>Please log in to access the admin panel.</p>
  //       </div>
  //     </Layout>
  //   );
  // }

  return (
    <Layout>
      <div className={styles.adminContainer}>
        <AdminSidebar />
        <div className={styles.adminContent}>
          <Routes>
            <Route path="/" element={<AdminDashboard />} />
            <Route path="/decisions" element={<DecisionManager />} />
            
            <Route path="/users" element={<div>User Management - Coming Soon</div>} />
            <Route path="/content" element={<div>Content Manager - Coming Soon</div>} />
            <Route path="*" element={<Navigate to="/admin" replace />} />
            <Route path="/courses" element={<CourseManager />} />
          </Routes>
        </div>
      </div>
    </Layout>
  );
};

export default Admin;
</file>

<file path="src/pages/admin/AdminDashboard.jsx">
// src/pages/admin/AdminDashboard.jsx
import { useState, useEffect } from 'react'

export function AdminDashboard() {
  const [stats, setStats] = useState({
    totalCourses: 0,
    totalStudents: 0,
    totalLessons: 0,
    activePrograms: 0
  })

  const recentActivities = [
    { id: 1, action: 'Course created', target: 'Physics 101', time: '2 hours ago', user: 'Admin' },
    { id: 2, action: 'Lesson updated', target: 'Laws of Motion', time: '5 hours ago', user: 'Content Team' },
    { id: 3, action: 'User registered', target: 'student@example.com', time: '1 day ago', user: 'System' },
    { id: 4, action: 'Program created', target: 'Class 10 - CBSE', time: '2 days ago', user: 'Admin' }
  ]

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
        <p className="mt-2 text-gray-600">Welcome to your LMS administration panel</p>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
          <div className="flex items-center">
            <div className="p-3 bg-blue-100 rounded-lg">
              <span className="text-2xl">📚</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Courses</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalCourses}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
          <div className="flex items-center">
            <div className="p-3 bg-green-100 rounded-lg">
              <span className="text-2xl">👥</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Students</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalStudents}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
          <div className="flex items-center">
            <div className="p-3 bg-purple-100 rounded-lg">
              <span className="text-2xl">✏️</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Lessons</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalLessons}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
          <div className="flex items-center">
            <div className="p-3 bg-orange-100 rounded-lg">
              <span className="text-2xl">🎓</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Active Programs</p>
              <p className="text-2xl font-bold text-gray-900">{stats.activePrograms}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">Recent Activity</h2>
        </div>
        <div className="p-6">
          <div className="space-y-4">
            {recentActivities.map((activity) => (
              <div key={activity.id} className="flex items-center justify-between py-2">
                <div className="flex items-center space-x-4">
                  <div className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
                    <span className="text-lg">📝</span>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">
                      {activity.action}: <span className="text-blue-600">{activity.target}</span>
                    </p>
                    <p className="text-sm text-gray-500">By {activity.user}</p>
                  </div>
                </div>
                <span className="text-sm text-gray-500">{activity.time}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">Quick Actions</h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <button className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-center">
              <span className="text-2xl block mb-2">➕</span>
              Create Course
            </button>
            <button className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-center">
              <span className="text-2xl block mb-2">🎓</span>
              Add Program
            </button>
            <button className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-center">
              <span className="text-2xl block mb-2">👥</span>
              Manage Users
            </button>
            <button className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-center">
              <span className="text-2xl block mb-2">📊</span>
              View Reports
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AdminDashboard
</file>

<file path="src/pages/admin/Categoriespage.jsx">
// src/pages/admin/CategoriesPage.jsx
export function CategoriesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900">Categories</h1>
      <p className="mt-2 text-gray-600">Manage course categories and organization</p>
      <div className="mt-6 p-8 bg-gray-100 rounded-lg text-center">
        <span className="text-6xl">📁</span>
        <p className="mt-4 text-gray-500">Categories management coming soon...</p>
      </div>
    </div>
  )
}

export default CategoriesPage
</file>

<file path="src/pages/admin/CoursesPage.jsx">
// src/pages/admin/CoursesPage.jsx
export function CoursesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900">Courses</h1>
      <p className="mt-2 text-gray-600">Manage courses and subjects</p>
      <div className="mt-6 p-8 bg-gray-100 rounded-lg text-center">
        <span className="text-6xl">📚</span>
        <p className="mt-4 text-gray-500">Courses management coming soon...</p>
      </div>
    </div>
  )
}

export default CoursesPage
</file>

<file path="src/pages/admin/ProgramsPage.jsx">
// src/pages/admin/ProgramsPage.jsx
export function ProgramsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold text-gray-900">Academic Programs</h1>
      <p className="mt-2 text-gray-600">Manage academic programs and syllabus versions</p>
      <div className="mt-6 p-8 bg-gray-100 rounded-lg text-center">
        <span className="text-6xl">🎓</span>
        <p className="mt-4 text-gray-500">Programs management coming soon...</p>
      </div>
    </div>
  )
}

export default ProgramsPage
</file>

<file path="src/pages/CourseContentPage.jsx">
// src/pages/CourseContent.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import Layout from '../components/Layout';
import styles from '../styles/CourseContent.module.css';

const CourseContent = () => {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const { user, userInfo, isUserEnrolled, getEnrollmentProgress, updateProgress } = useAuth();
  const [activeModule, setActiveModule] = useState(0);
  const [activeLesson, setActiveLesson] = useState(0);
  const [progress, setProgress] = useState({});

  // Course content data for ALL courses including school tuitions
  const courseContentData = {
    // ================= SCHOOL TUITIONS COURSES =================
    'ST_TN_09_E': {
      name: 'Tamil Nadu Board - Class 9 - English Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '9',
      medium: 'English',
      modules: [
        {
          title: 'Mathematics',
          lessons: [
            { title: 'Number Systems', duration: '45 min', type: 'video', completed: false },
            { title: 'Algebra', duration: '60 min', type: 'video', completed: false },
            { title: 'Geometry', duration: '50 min', type: 'video', completed: false },
            { title: 'Coordinate Geometry', duration: '40 min', type: 'video', completed: false },
            { title: 'Mathematics Quiz 1', duration: '30 min', type: 'quiz', completed: false }
          ]
        },
        {
          title: 'Science',
          lessons: [
            { title: 'Matter in Our Surroundings', duration: '40 min', type: 'video', completed: false },
            { title: 'Atoms and Molecules', duration: '50 min', type: 'video', completed: false },
            { title: 'Force and Laws of Motion', duration: '45 min', type: 'video', completed: false },
            { title: 'Science Practical 1', duration: '60 min', type: 'lab', completed: false }
          ]
        },
        {
          title: 'Social Science',
          lessons: [
            { title: 'French Revolution', duration: '35 min', type: 'video', completed: false },
            { title: 'India - Size and Location', duration: '30 min', type: 'video', completed: false },
            { title: 'Constitutional Design', duration: '40 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'English',
          lessons: [
            { title: 'Literature - The Fun They Had', duration: '35 min', type: 'video', completed: false },
            { title: 'Grammar - Tenses', duration: '40 min', type: 'video', completed: false },
            { title: 'Writing Skills', duration: '45 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'Revision & Tests',
          lessons: [
            { title: 'Full Syllabus Revision', duration: '90 min', type: 'video', completed: false },
            { title: 'Model Question Paper 1', duration: '120 min', type: 'test', completed: false },
            { title: 'Model Question Paper 2', duration: '120 min', type: 'test', completed: false }
          ]
        }
      ]
    },

    'ST_TN_10_E': {
      name: 'Tamil Nadu Board - Class 10 - English Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '10',
      medium: 'English',
      modules: [
        {
          title: 'Mathematics - SSLC',
          lessons: [
            { title: 'Relations and Functions', duration: '50 min', type: 'video', completed: false },
            { title: 'Numbers and Sequences', duration: '45 min', type: 'video', completed: false },
            { title: 'Algebra', duration: '60 min', type: 'video', completed: false },
            { title: 'Geometry', duration: '55 min', type: 'video', completed: false },
            { title: 'Coordinate Geometry', duration: '40 min', type: 'video', completed: false },
            { title: 'Trigonometry', duration: '50 min', type: 'video', completed: false },
            { title: 'Mensuration', duration: '45 min', type: 'video', completed: false },
            { title: 'Statistics and Probability', duration: '35 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'Science - SSLC',
          lessons: [
            { title: 'Laws of Motion', duration: '45 min', type: 'video', completed: false },
            { title: 'Optics', duration: '50 min', type: 'video', completed: false },
            { title: 'Thermal Physics', duration: '40 min', type: 'video', completed: false },
            { title: 'Electricity', duration: '55 min', type: 'video', completed: false },
            { title: 'Atomic and Nuclear Physics', duration: '35 min', type: 'video', completed: false },
            { title: 'Periodic Classification', duration: '45 min', type: 'video', completed: false },
            { title: 'Carbon and its Compounds', duration: '50 min', type: 'video', completed: false },
            { title: 'Chemical Reactions', duration: '40 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'Social Science - SSLC',
          lessons: [
            { title: 'Outbreak of World War I', duration: '35 min', type: 'video', completed: false },
            { title: 'World Between Two World Wars', duration: '40 min', type: 'video', completed: false },
            { title: 'World War II', duration: '45 min', type: 'video', completed: false },
            { title: 'The World After 1945', duration: '35 min', type: 'video', completed: false },
            { title: 'Social and Religious Reform Movements', duration: '40 min', type: 'video', completed: false },
            { title: 'Freedom Struggle in Tamil Nadu', duration: '45 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'English - SSLC',
          lessons: [
            { title: 'Prose - His First Flight', duration: '35 min', type: 'video', completed: false },
            { title: 'Poem - The Secret of the Machines', duration: '30 min', type: 'video', completed: false },
            { title: 'Grammar - Parts of Speech', duration: '40 min', type: 'video', completed: false },
            { title: 'Writing - Letter Writing', duration: '45 min', type: 'video', completed: false },
            { title: 'Writing - Essay Writing', duration: '50 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'SSLC Board Exam Preparation',
          lessons: [
            { title: 'Important Questions - Mathematics', duration: '60 min', type: 'video', completed: false },
            { title: 'Important Questions - Science', duration: '60 min', type: 'video', completed: false },
            { title: 'Important Questions - Social Science', duration: '55 min', type: 'video', completed: false },
            { title: 'SSLC Model Question Paper 1', duration: '180 min', type: 'test', completed: false },
            { title: 'SSLC Model Question Paper 2', duration: '180 min', type: 'test', completed: false },
            { title: 'SSLC Previous Year Paper Discussion', duration: '90 min', type: 'video', completed: false }
          ]
        }
      ]
    },

    // Add other school tuition courses similarly...
    'ST_TN_09_T': {
      name: 'Tamil Nadu Board - Class 9 - Tamil Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '9',
      medium: 'Tamil',
      modules: [
        {
          title: 'கணிதம்',
          lessons: [
            { title: 'எண் முறைமைகள்', duration: '45 min', type: 'video', completed: false },
            { title: 'இயற்கணிதம்', duration: '60 min', type: 'video', completed: false },
            // ... more lessons in Tamil
          ]
        }
        // ... other modules
      ]
    },

    'ST_CB_10_E': {
      name: 'CBSE Board - Class 10 - English Medium',
      category: 'School Tuitions',
      board: 'CBSE',
      classGrade: '10',
      medium: 'English',
      modules: [
        {
          title: 'Mathematics - CBSE',
          lessons: [
            { title: 'Real Numbers', duration: '40 min', type: 'video', completed: false },
            { title: 'Polynomials', duration: '45 min', type: 'video', completed: false },
            { title: 'Pair of Linear Equations', duration: '50 min', type: 'video', completed: false },
            // ... CBSE specific lessons
          ]
        }
        // ... other CBSE modules
      ]
    },

    // ================= RECRUITMENT EXAM COURSES =================
    'Rectt1': {
      name: 'TNPSC Preparation',
      category: 'Recruitment Exams',
      modules: [
        {
          title: 'General Studies',
          lessons: [
            { title: 'Indian Polity', duration: '60 min', type: 'video', completed: false },
            { title: 'Indian Economy', duration: '55 min', type: 'video', completed: false },
            { title: 'Geography of India', duration: '50 min', type: 'video', completed: false },
            { title: 'History of India', duration: '65 min', type: 'video', completed: false }
          ]
        },
        {
          title: 'Aptitude & Mental Ability',
          lessons: [
            { title: 'Quantitative Aptitude', duration: '45 min', type: 'video', completed: false },
            { title: 'Logical Reasoning', duration: '40 min', type: 'video', completed: false },
            { title: 'Verbal Ability', duration: '35 min', type: 'video', completed: false }
          ]
        }
        // ... more modules
      ]
    },

    'Rectt2': {
      name: 'TRB Preparation',
      category: 'Recruitment Exams',
      modules: [
        {
          title: 'Teaching Methodology',
          lessons: [
            { title: 'Educational Psychology', duration: '50 min', type: 'video', completed: false },
            { title: 'Teaching Techniques', duration: '45 min', type: 'video', completed: false },
            // ... more lessons
          ]
        }
        // ... more modules
      ]
    },

    // ================= ENTRANCE EXAM COURSES =================
    'Ent1': {
      name: 'JEE Preparation',
      category: 'Entrance Exams',
      modules: [
        {
          title: 'Physics',
          lessons: [
            { title: 'Mechanics', duration: '60 min', type: 'video', completed: false },
            { title: 'Thermodynamics', duration: '55 min', type: 'video', completed: false },
            // ... more lessons
          ]
        }
        // ... more modules
      ]
    },

    'Ent2': {
      name: 'NEET Preparation',
      category: 'Entrance Exams',
      modules: [
        {
          title: 'Biology',
          lessons: [
            { title: 'Botany - Plant Physiology', duration: '50 min', type: 'video', completed: false },
            { title: 'Zoology - Human Physiology', duration: '55 min', type: 'video', completed: false },
            // ... more lessons
          ]
        }
        // ... more modules
      ]
    }

    // Add other courses as needed...
  };

  const course = courseContentData[courseId];

  // Load progress when component mounts
  useEffect(() => {
    if (user && courseId) {
      const enrollmentProgress = getEnrollmentProgress(courseId);
      if (enrollmentProgress) {
        setProgress(enrollmentProgress);
      }
    }
  }, [user, courseId, getEnrollmentProgress]);

  // Redirect if not enrolled
  useEffect(() => {
    if (user && !isUserEnrolled(courseId)) {
      navigate(`/intro/${courseId}`);
    }
  }, [user, courseId, isUserEnrolled, navigate]);

  const handleLessonComplete = (moduleIndex, lessonIndex) => {
    if (!user) return;

    const updatedProgress = {
      ...progress,
      completedLevels: [...(progress.completedLevels || [])],
      lastUpdated: new Date().toISOString()
    };

    const lessonKey = `${moduleIndex}-${lessonIndex}`;
    if (!updatedProgress.completedLevels.includes(lessonKey)) {
      updatedProgress.completedLevels.push(lessonKey);
    }

    // Calculate overall progress
    const totalLessons = course.modules.reduce((total, module) => total + module.lessons.length, 0);
    updatedProgress.progress = Math.round((updatedProgress.completedLevels.length / totalLessons) * 100);

    setProgress(updatedProgress);
    updateProgress(courseId, updatedProgress);
  };

  const isLessonCompleted = (moduleIndex, lessonIndex) => {
    const lessonKey = `${moduleIndex}-${lessonIndex}`;
    return progress.completedLevels?.includes(lessonKey) || false;
  };

  const getCourseProgress = () => {
    const totalLessons = course.modules.reduce((total, module) => total + module.lessons.length, 0);
    const completedLessons = progress.completedLevels?.length || 0;
    return totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;
  };

  if (!user) {
    return (
      <Layout>
        <div className={styles.container}>
          <div className={styles.error}>
            <h2>Please Login</h2>
            <p>You need to be logged in to access course content.</p>
            <button onClick={() => navigate('/')} className={styles.backButton}>
              Go to Home
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  if (!isUserEnrolled(courseId)) {
    return (
      <Layout>
        <div className={styles.container}>
          <div className={styles.error}>
            <h2>Not Enrolled</h2>
            <p>You are not enrolled in this course. Please enroll first.</p>
            <button onClick={() => navigate(`/intro/${courseId}`)} className={styles.backButton}>
              Go to Course Intro
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  if (!course) {
    return (
      <Layout>
        <div className={styles.container}>
          <div className={styles.error}>
            <h2>Course Not Found</h2>
            <p>The course content is not available.</p>
            <button onClick={() => navigate('/')} className={styles.backButton}>
              Back to Home
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    //<Layout>
      <div className={styles.container}>
        {/* Course Header */}
        <div className={styles.courseHeader}>
          <div className={styles.courseInfo}>
            <h1 className={styles.courseTitle}>{course.name}</h1>
            <p className={styles.courseCategory}>{course.category}</p>
            {course.board && (
              <div className={styles.courseDetails}>
                <span>Board: {course.board}</span>
                <span>Class: {course.classGrade}</span>
                <span>Medium: {course.medium}</span>
              </div>
            )}
          </div>
          <div className={styles.progressSection}>
            <div className={styles.progressCircle}>
              <span className={styles.progressText}>{getCourseProgress()}%</span>
            </div>
            <p className={styles.progressLabel}>Course Complete</p>
          </div>
        </div>

        {/* Course Content */}
        <div className={styles.courseLayout}>
          {/* Modules Sidebar */}
          <div className={styles.modulesSidebar}>
            <h3>Course Modules</h3>
            <div className={styles.modulesList}>
              {course.modules.map((module, moduleIndex) => (
                <div
                  key={moduleIndex}
                  className={`${styles.moduleItem} ${activeModule === moduleIndex ? styles.activeModule : ''}`}
                  onClick={() => setActiveModule(moduleIndex)}
                >
                  <div className={styles.moduleHeader}>
                    <h4>{module.title}</h4>
                    <span className={styles.lessonCount}>
                      {module.lessons.length} lessons
                    </span>
                  </div>
                  <div className={styles.moduleProgress}>
                    <div className={styles.progressBar}>
                      <div 
                        className={styles.progressFill}
                        style={{ 
                          width: `${Math.round((module.lessons.filter((_, lessonIndex) => isLessonCompleted(moduleIndex, lessonIndex)).length / module.lessons.length) * 100)}%` 
                        }}
                      ></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Lessons Content */}
          <div className={styles.lessonsContent}>
            {course.modules[activeModule] && (
              <>
                <div className={styles.moduleTitle}>
                  <h2>{course.modules[activeModule].title}</h2>
                  <p>{course.modules[activeModule].lessons.length} lessons in this module</p>
                </div>

                <div className={styles.lessonsList}>
                  {course.modules[activeModule].lessons.map((lesson, lessonIndex) => (
                    <div
                      key={lessonIndex}
                      className={`${styles.lessonItem} ${isLessonCompleted(activeModule, lessonIndex) ? styles.completed : ''} ${activeLesson === lessonIndex ? styles.activeLesson : ''}`}
                      onClick={() => setActiveLesson(lessonIndex)}
                    >
                      <div className={styles.lessonIcon}>
                        {lesson.type === 'video' && '📹'}
                        {lesson.type === 'quiz' && '📝'}
                        {lesson.type === 'test' && '🧪'}
                        {lesson.type === 'lab' && '🔬'}
                      </div>
                      <div className={styles.lessonInfo}>
                        <h4>{lesson.title}</h4>
                        <p className={styles.lessonMeta}>
                          <span className={styles.duration}>{lesson.duration}</span>
                          <span className={styles.type}>{lesson.type}</span>
                        </p>
                      </div>
                      <div className={styles.lessonActions}>
                        {isLessonCompleted(activeModule, lessonIndex) ? (
                          <span className={styles.completedBadge}>✅ Completed</span>
                        ) : (
                          <button
                            className={styles.completeButton}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleLessonComplete(activeModule, lessonIndex);
                            }}
                          >
                            Mark Complete
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Lesson Content Area */}
                <div className={styles.lessonContent}>
                  <h3>{course.modules[activeModule].lessons[activeLesson]?.title}</h3>
                  <div className={styles.contentPlaceholder}>
                    <div className={styles.placeholderIcon}>
                      {course.modules[activeModule].lessons[activeLesson]?.type === 'video' && '🎬'}
                      {course.modules[activeModule].lessons[activeLesson]?.type === 'quiz' && '📊'}
                      {course.modules[activeModule].lessons[activeLesson]?.type === 'test' && '📄'}
                      {course.modules[activeModule].lessons[activeLesson]?.type === 'lab' && '🔍'}
                    </div>
                    <h4>Lesson Content Will Appear Here</h4>
                    <p>This is where the actual {course.modules[activeModule].lessons[activeLesson]?.type} content would be displayed.</p>
                    <p>Duration: {course.modules[activeModule].lessons[activeLesson]?.duration}</p>
                    
                    <div className={styles.lessonActions}>
                      <button className={styles.primaryButton}>
                        Start {course.modules[activeModule].lessons[activeLesson]?.type}
                      </button>
                      {!isLessonCompleted(activeModule, activeLesson) && (
                        <button
                          className={styles.secondaryButton}
                          onClick={() => handleLessonComplete(activeModule, activeLesson)}
                        >
                          Mark as Completed
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    //</Layout>
  );
};

export default CourseContent;
</file>

<file path="src/pages/SchoolTuitions.jsx">
// src/pages/SchoolTuitions.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SchoolBoardTabs from '../components/SchoolBoardTabs';
import styles from '../styles/SchoolTuitions.module.css';

const SchoolTuitions = () => {
  const navigate = useNavigate();
  const { user, userInfo, enrollInCourse, isUserEnrolled } = useAuth();

  const handleEnrollSchoolTuitions = () => {
    if (!user) {
      alert('Please login to enroll in school tuitions');
      return;
    }

    const result = enrollInCourse('school-tuitions');
    if (result.success) {
      alert('Successfully enrolled in school tuitions!');
      navigate('/course/school-tuitions');
    } else {
      alert(result.error);
    }
  };

  return (
    <div className={styles.container}>
      <h1>School Tuitions</h1>
      
      {userInfo && userInfo.categoryCode === 'ST' && (
        <div className={styles.userInfo}>
          <h3>Your School Profile</h3>
          <p>Board: {userInfo.board}</p>
          <p>Class: {userInfo.classGrade}</p>
          <p>Medium: {userInfo.medium}</p>
        </div>
      )}

      {isUserEnrolled('school-tuitions') ? (
        <div className={styles.enrolledSection}>
          <h2>You are enrolled in School Tuitions</h2>
          <button onClick={() => navigate('/course/school-tuitions')}>
            Go to Course Content
          </button>
        </div>
      ) : (
        <div className={styles.enrollSection}>
          <h2>Enroll in School Tuitions</h2>
          <p>Access comprehensive school curriculum support for your board and class</p>
          <button onClick={handleEnrollSchoolTuitions}>
            Enroll Now
          </button>
        </div>
      )}

      <div className={styles.boardsSection}>
        <SchoolBoardTabs />
      </div>
    </div>
  );
};

export default SchoolTuitions;
</file>

<file path="src/routes/decisions.js">
// src/routes/decisions.js
const express = require('express');
const router = express.Router();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// GET all decisions
router.get('/', async (req, res) => {
  try {
    const decisions = await prisma.decision.findMany({
      orderBy: { createdAt: 'desc' }
    });
    res.json(decisions);
  } catch (error) {
    console.error('Error fetching decisions:', error);
    res.status(500).json({ error: 'Failed to fetch decisions' });
  }
});

// CREATE new decision
router.post('/', async (req, res) => {
  try {
    const { title, description, decision, rationale, category, impact } = req.body;
    
    const newDecision = await prisma.decision.create({
      data: {
        title,
        description,
        decision,
        rationale,
        category,
        impact
      }
    });
    
    res.json(newDecision);
  } catch (error) {
    console.error('Error creating decision:', error);
    res.status(500).json({ error: 'Failed to create decision' });
  }
});

module.exports = router;
</file>

<file path="src/scripts/decision-guard.js">
// src/scripts/decision-guard.js
import { getDecisionsByCategory } from '../lib/context/session-starter.js'

async function checkDecision(topic) {
  const architectureDecisions = await getDecisionsByCategory('architecture')
  const relevant = architectureDecisions.filter(d => 
    d.title.toLowerCase().includes(topic.toLowerCase()) ||
    d.decision.toLowerCase().includes(topic.toLowerCase())
  )
  
  if (relevant.length > 0) {
    console.log('🚨 DECISION ALREADY MADE:')
    relevant.forEach(decision => {
      console.log(`📌 ${decision.title}`)
      console.log(`✅ Decision: ${decision.decision}`)
      console.log(`🎯 Rationale: ${decision.rationale}`)
      console.log('---')
    })
    return false // Decision already exists
  }
  return true // No decision found, can discuss
}
</file>

<file path="src/scripts/log-admin-development-plan.js">
// src/scripts/log-admin-development-plan.js
import { captureNewDecision } from '../lib/utils/decision-capture.js'

async function logAdminDevelopmentPlan() {
  console.log('📝 Logging Admin Panel Development Plan...')
  
  try {
    await captureNewDecision({
      title: "Admin Content Management Panel - Development Plan",
      description: "Complete phased development plan for building the admin content management system",
      decision: `PHASE 1: FOUNDATION (Current)
• Admin layout component with sidebar navigation
• Basic routing structure for admin sections  
• Shadcn/UI component library integration
• TanStack Query setup for data fetching
• Basic admin dashboard

PHASE 2: CONTENT MANAGEMENT CORE
• Category management (Create, Read, Update, Delete)
• Academic Program creation with versioning system
• Course/Subject/Lesson hierarchy management
• React Hook Form integration with validation
• Basic media upload interface

PHASE 3: RICH CONTENT EDITOR
• 5-level lesson content editor (Foundation → Expert)
• Advanced media management (videos, images, animations)
• Formula and definition card creator
• Assessment question builder (MCQ & Descriptive)
• Content versioning and cloning interface

PHASE 4: ADVANCED FEATURES
• Bulk content operations
• Content analytics and reporting
• User role management for content teams
• AI-assisted content suggestions`,
      rationale: "Structured phased approach ensures systematic development. Build foundation first, then core content management, then advanced editing features. Each phase delivers usable functionality.",
      alternativesConsidered: [
        "Build all features at once (too complex, high risk)",
        "Start with rich editor first (requires foundation to be useful)",
        "Focus only on basic CRUD (limited functionality, poor user experience)",
        "External project management tools (breaks our integrated system)"
      ],
      category: "development-planning",
      impact: "high"
    })
    
    console.log('✅ Admin Panel Development Plan logged successfully!')
    console.log('📋 Plan is now permanently stored in DecisionLog table')
    console.log('🚀 Reference this plan throughout development')
    
  } catch (error) {
    console.error('❌ Failed to log development plan:', error)
  }
}

logAdminDevelopmentPlan()
</file>

<file path="src/scripts/log-admin-panel-decision.js">
// src/scripts/log-admin-panel-decision.js
import { captureNewDecision } from '../lib/utils/decision-capture.js'

async function logAdminPanelDecision() {
  console.log('📝 Logging Admin Panel development decision...')
  
  try {
    await captureNewDecision({
      title: "Next Development Phase: Admin Content Management Panel",
      description: "Decision about what to build after completing DecisionLog system foundation",
      decision: "Proceed with developing Admin Content Management Panel as immediate next priority",
      rationale: `1. Need to create educational content before student features can work
2. Tests our database structure with real data operations
3. Implements core LMS functionality for content creators
4. Utilizes our recent technology decisions (TanStack Query, Shadcn/UI, React Hook Form)
5. Provides immediate value for content team to start building courses`,
      alternativesConsidered: [
        "User authentication system (needed but content comes first)",
        "Student learning interface (requires content to exist)",
        "AI evaluation integration (needs content to evaluate)", 
        "Basic frontend framework setup (already have React Vite running)"
      ],
      category: "development-planning",
      impact: "high"
    })
    
    console.log('✅ Admin Panel development decision logged successfully!')
    console.log('🚀 Now proceeding with Admin Content Management Panel implementation...')
    
  } catch (error) {
    console.error('❌ Failed to log admin panel decision:', error)
  }
}

logAdminPanelDecision()
</file>

<file path="src/scripts/log-decisions.js">
// src/scripts/log-decisions.js
import { captureNewDecision } from '../lib/utils/decision-capture.js'

/**
 * Log ONLY today's new decisions about backup strategy and development process
 */
async function logTodaysDecisions() {
  console.log('📝 Logging TODAY\'S decisions from header recovery experience...')
  
  try {
    // DECISION 1: TODAY'S CRITICAL LESSON - Backup Strategy
    await captureNewDecision({
      title: "Prioritize Backup Restoration Over Rewrites",
      description: "Critical lesson from header component breakdown and recovery",
      decision: "Always restore from backup first when components break, rather than attempting complete rewrites",
      rationale: "Working code with minor issues is better than broken 'perfect' code. Backup restoration is faster, lower risk, and preserves existing styling and functionality.",
      alternativesConsidered: [
        "Continue rewriting broken components (high risk, time-consuming)",
        "Try multiple fix attempts without backup (led to complete style loss)", 
        "Start from scratch (wasted previous work)"
      ],
      category: "development-process",
      impact: "high"
    })
    console.log('✅ Backup strategy decision logged')

    // DECISION 2: Component Update Protocol
    await captureNewDecision({
      title: "Incremental Component Updates with Git Commits",
      description: "Process for safely updating React components", 
      decision: "Make incremental changes with Git commits at each stable point. Never overhaul working components in one go.",
      rationale: "Preserves ability to backtrack. Each small change can be tested and reverted if needed. Prevents complete component breakdown.",
      alternativesConsidered: [
        "Major refactors without commits (high risk)",
        "Overhaul styling and functionality simultaneously (breaks everything)",
        "No version control (unrecoverable errors)"
      ],
      category: "development-process",
      impact: "high"
    })
    console.log('✅ Component update protocol decision logged')

    console.log('🎉 Today\'s decisions logged successfully!')
    
  } catch (error) {
    console.error('❌ Error logging decisions:', error)
  }
}

// Run the function
logTodaysDecisions()
</file>

<file path="src/scripts/log-tanstack-decision.js">
// src/scripts/log-tanstack-decision.js
import { captureNewDecision } from '../lib/utils/decision-capture.js'

/**
 * Specific decision logging script - for single important decisions
 * Use this when we make one major architectural decision
 */
async function logTanStackDecision() {
  console.log('📝 Logging TanStack Query decision...')
  
  try {
    await captureNewDecision({
      title: "Use TanStack Query for server state",
      description: "Decision about data fetching strategy for the LMS platform",
      decision: "Implement TanStack Query (React Query) for all server state management including courses, lessons, user progress, and assessments",
      rationale: `1. Excellent caching and background updates
2. Automatic error handling and retries
3. Great for educational content that needs frequent updates
4. Reduces boilerplate code significantly
5. Perfect for real-time progress tracking`,
      alternativesConsidered: [
        "SWR - Simpler but lacks advanced features like mutations and pagination",
        "RTK Query - Tied to Redux ecosystem, heavier bundle",
        "Apollo Client - GraphQL focused, overkill for REST",
        "Custom hooks - Maintenance burden, inconsistent patterns",
        "Axios + useState - No caching, manual loading states"
      ],
      category: "architecture",
      impact: "high"
    })
    
    console.log('✅ TanStack Query decision logged successfully!')
    console.log('💡 This decision affects: Course loading, user progress, quiz results, admin data management')
    
  } catch (error) {
    console.error('❌ Failed to log TanStack decision:', error)
  }
}

// Run the function
logTanStackDecision()
</file>

<file path="src/scripts/log-todays-decisions.js">
// src/scripts/log-todays-decisions.js
import { captureNewDecision } from '../lib/utils/decision-capture.js'

/**
 * Log today's architecture decisions about course structure
 */
async function logTodaysDecisions() {
  console.log('📝 Logging today\'s course architecture decisions...')
  
  try {
    // DECISION 1: Course Taxonomy Structure
    await captureNewDecision({
      title: "Standardized Course Taxonomy Structure",
      description: "Decision about how to organize courses, categories, and sub-categories",
      decision: "Implement Categories → Sub-Categories → Courses → Subjects → Lessons hierarchy with Excel-matching course IDs (STTNE6, STTNE10, etc.)",
      rationale: "Matches existing Excel structure, provides clear navigation path, scalable for 100+ courses",
      alternativesConsidered: [
        "Flat course list (poor organization)",
        "Per-course files (unmaintainable at scale)",
        "Different ID patterns (breaks Excel compatibility)"
      ],
      category: "architecture",
      impact: "high"
    })

    // DECISION 2: Single Course Content Component
    await captureNewDecision({
      title: "Single Dynamic Course Content Component",
      description: "Decision about how to handle course content display",
      decision: "Use single CourseContentPage.jsx that dynamically handles ALL courses based on URL parameter (:courseId)",
      rationale: "Scalable approach prevents file explosion, consistent user experience, maintainable codebase",
      alternativesConsidered: [
        "Per-course component files (100+ files unmanageable)",
        "Course family components (still too many files)",
        "If-else routing logic (complex and fragile)"
      ],
      category: "architecture", 
      impact: "high"
    })

    // DECISION 3: Database-Driven Hybrid Approach
    await captureNewDecision({
      title: "Database-Driven Hybrid Data Strategy",
      description: "Decision about course content storage and retrieval",
      decision: "Implement hybrid approach: API/database first → static fallback data for development",
      rationale: "Balances development speed with production scalability, provides offline capability, progressive enhancement",
      alternativesConsidered: [
        "Pure static data (limited scalability)",
        "Pure database (development complexity)",
        "File-based per course (maintenance nightmare)"
      ],
      category: "data",
      impact: "high"
    })

    // DECISION 4: Consistent Header Visibility
    await captureNewDecision({
      title: "Consistent Header Across All Pages",
      description: "Decision about header visibility and layout consistency",
      decision: "Show header on ALL pages including home page, remove conditional header hiding",
      rationale: "Better navigation consistency, professional appearance, avoids user confusion",
      alternativesConsidered: [
        "Header only on non-home pages (broken navigation flow)",
        "Different headers per page type (inconsistent branding)",
        "Conditional header based on scroll (complex implementation)"
      ],
      category: "ui",
      impact: "medium"
    })

    // DECISION 5: Course ID Naming Convention
    await captureNewDecision({
      title: "Strict Course ID Naming Convention",
      description: "Decision about course ID format and consistency",
      decision: "Use exact Excel course IDs without modifications (STTNE6 not STTNE6.0, RETPE1 not Rectt1)",
      rationale: "Maintains data integrity, prevents mapping errors, ensures Excel compatibility",
      alternativesConsidered: [
        "Modified IDs for readability (breaks data consistency)",
        "Auto-generated IDs (loses Excel mapping)",
        "Versioned IDs (unnecessary complexity)"
      ],
      category: "naming",
      impact: "medium"
    })

    console.log('🎉 Today\'s course architecture decisions logged successfully!')
    
  } catch (error) {
    console.error('❌ Error logging today\'s decisions:', error)
  }
}

// Run the function
logTodaysDecisions()
</file>

<file path="src/scripts/pre-dev-checklist.js">
// src/scripts/pre-dev-checklist.js
import { getSessionContext } from '../lib/context/session-starter.js'

async function preDevChecklist() {
  console.log('🚀 PRE-DEVELOPMENT CHECKLIST')
  console.log('============================\n')
  
  const context = await getSessionContext()
  console.log(context)
  
  console.log('\n📋 CHECKLIST:')
  console.log('✅ Review DecisionLog table in Prisma Studio')
  console.log('✅ Remember: NO re-discussing settled architecture') 
  console.log('✅ Focus on BUILDING features, not changing stack')
  console.log('✅ Log new decisions when making important choices')
  console.log('✅ Use captured utilities for consistency')
  
  console.log('\n🎯 READY TO BUILD!')
}

preDevChecklist()
</file>

<file path="src/scripts/seed-decisions.js">
// src/scripts/seed-decisions.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const ourPastDecisions = [
  {
    title: "Tech Stack: React Vite + Neon + Hugging Face",
    description: "Core technology stack selection for the LMS platform",
    decision: "Use React Vite, Neon PostgreSQL, Prisma ORM, Hugging Face AI, Cloudflare R2",
    rationale: "Cost-effective, scalable, modern stack with zero initial costs and excellent developer experience",
    alternativesConsidered: ["React + Express", "Firebase", "OpenAI APIs", "AWS/Azure", "Railway/Render"],
    category: "architecture",
    impact: "high"
  },
  {
    title: "Database: Neon PostgreSQL with Prisma",
    description: "Database selection with branching capabilities",
    decision: "Neon PostgreSQL as primary database with Prisma ORM",
    rationale: "Instant branching for syllabus versioning, excellent Prisma compatibility, serverless performance",
    alternativesConsidered: ["SQLite", "Railway PostgreSQL", "Supabase", "MongoDB"],
    category: "database", 
    impact: "high"
  },
  {
    title: "AI: Hugging Face over Paid APIs",
    description: "AI evaluation system selection",
    decision: "Use Hugging Face free models for answer evaluation and content generation",
    rationale: "Zero cost for AI services, customizable models, data privacy, suitable for Indian student budget constraints",
    alternativesConsidered: ["OpenAI GPT-4", "Google Gemini", "Azure AI", "Anthropic Claude"],
    category: "ai",
    impact: "medium"
  },
  {
    title: "Lesson Structure: 5-Level Progressive System",
    description: "Educational content organization approach",
    decision: "Each lesson has 5 difficulty levels: Foundation, Elementary, Intermediate, Advanced, Expert",
    rationale: "Progressive learning, differentiated instruction, adaptive difficulty, comprehensive coverage",
    alternativesConsidered: ["3 levels", "Single level", "Continuous scaling", "Prerequisite chains"],
    category: "education",
    impact: "high"
  },
  {
    title: "Content Versioning: Syllabus-Based Cloning",
    description: "System for handling syllabus updates year-to-year",
    decision: "Academic program versioning with content cloning for new syllabus years",
    rationale: "Handle CBSE/State Board syllabus changes efficiently, preserve previous versions, minimal content duplication",
    alternativesConsidered: ["Overwrite existing content", "Manual copying", "Separate courses per year"],
    category: "content-management",
    impact: "high"
  },
  {
    title: "Assessment: AI + Rule-Based Hybrid Evaluation",
    description: "Answer evaluation methodology",
    decision: "Combine Hugging Face AI evaluation with rule-based fallback system",
    rationale: "Ensure reliability when AI fails, handle edge cases, provide consistent grading",
    alternativesConsidered: ["Pure AI evaluation", "Manual teacher evaluation", "Simple keyword matching"],
    category: "assessment",
    impact: "medium"
  },
  {
    title: "Media Storage: Cloudflare R2",
    description: "File and media storage solution",
    decision: "Use Cloudflare R2 for video, image, and animation storage",
    rationale: "Zero egress costs, generous free tier, global CDN, S3-compatible API",
    alternativesConsidered: ["AWS S3", "Google Cloud Storage", "Azure Blob Storage", "Self-hosted"],
    category: "storage",
    impact: "medium"
  },
  {
    title: "Authentication: NextAuth.js",
    description: "User authentication system",
    decision: "Implement NextAuth.js with Google OAuth and email authentication",
    rationale: "Built-in with Next.js, secure, extensible, supports multiple providers, zero cost",
    alternativesConsidered: ["Auth0", "Firebase Auth", "Supabase Auth", "Custom JWT system"],
    category: "authentication",
    impact: "medium"
  },
  {
    title: "Rich Content: Multi-Format Support",
    description: "Supported content types in lessons",
    decision: "Support videos, images, animations, formulas, interactive elements, quizzes in content blocks",
    rationale: "Comprehensive learning experience, engage different learning styles, modern educational standards",
    alternativesConsidered: ["Text-only", "PDF-based", "Video-focused", "Minimal media"],
    category: "content",
    impact: "high"
  },
  {
    title: "Frontend: React Vite (NOT Next.js)",
    description: "Correction of frontend framework context",
    decision: "We are using React with Vite, not Next.js",
    rationale: "Previous confusion corrected - maintain Vite configuration",
    alternativesConsidered: ["Next.js", "Create-React-App"],
    category: "architecture",
    impact: "high"
  }
]

async function seedPastDecisions() {
  console.log('📝 Seeding past decisions...')
  
  try {
    for (const decisionData of ourPastDecisions) {
      await prisma.decisionLog.create({
        data: {
          ...decisionData,
          participants: ['Developer', 'AI Assistant'],
          dependsOn: [],
          madeBy: 'ai-assisted-development',
          reviewedAt: new Date(),
          expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)
        }
      })
      console.log(`✅ Logged: ${decisionData.title}`)
    }
    
    console.log('🎉 All past decisions captured!')
    console.log('📊 Total decisions logged:', ourPastDecisions.length)
  } catch (error) {
    console.error('❌ Error seeding decisions:', error)
  } finally {
    await prisma.$disconnect()
  }
}

seedPastDecisions()
</file>

<file path="src/scripts/seed.js">
// src/scripts/seed.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seed() {
  try {
    console.log('🌱 Starting database seeding...')
    
    // Clear existing data (optional)
    await prisma.quizAttempt.deleteMany()
    await prisma.userProgress.deleteMany()
    await prisma.enrollment.deleteMany()
    await prisma.lesson.deleteMany()
    await prisma.course.deleteMany()
    await prisma.user.deleteMany()

    // Create sample courses
    const course1 = await prisma.course.create({
      data: {
        courseId: 'ST_TN_10_E',
        name: 'Class 10 Science - English Medium',
        description: 'Tamil Nadu Board - English Medium',
        category: 'School Tuitions',
        board: 'TN Board',
        medium: 'English'
      }
    })

    const course2 = await prisma.course.create({
      data: {
        courseId: 'ST_TN_10_T',
        name: 'Class 10 Science - Tamil Medium',
        description: 'Tamil Nadu Board - Tamil Medium',
        category: 'School Tuitions',
        board: 'TN Board',
        medium: 'Tamil'
      }
    })

    const course3 = await prisma.course.create({
      data: {
        courseId: 'ST_CB_10_E',
        name: 'Class 10 Science - CBSE',
        description: 'CBSE Board - English Medium',
        category: 'School Tuitions',
        board: 'CBSE',
        medium: 'English'
      }
    })

    console.log('✅ Sample courses created!')

    // Create sample lessons for Class 10 Science English
    await prisma.lesson.create({
      data: {
        courseId: 'ST_TN_10_E',
        lessonId: 'laws-of-motion',
        title: 'Laws of Motion',
        description: 'Foundation of classical mechanics - Newton\'s Laws',
        order: 1
      }
    })

    await prisma.lesson.create({
      data: {
        courseId: 'ST_TN_10_E',
        lessonId: 'light-reflection',
        title: 'Light - Reflection and Refraction',
        description: 'Properties of light and optical phenomena',
        order: 2
      }
    })

    await prisma.lesson.create({
      data: {
        courseId: 'ST_TN_10_E',
        lessonId: 'electricity',
        title: 'Electricity',
        description: 'Electrical circuits and power',
        order: 3
      }
    })

    console.log('✅ Sample lessons created!')

    console.log('🎉 Database seeding completed successfully!')
    
  } catch (error) {
    console.error('❌ Seeding error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the seed function
seed()
</file>

<file path="src/scripts/test-decision-system.js">
// src/scripts/test-decision-system.js
import { getQuickContext, getSessionContext } from '../lib/context/session-starter.js'
import { captureNewDecision } from '../lib/utils/decision-capture.js'

async function testDecisionSystem() {
  console.log('🧪 Testing DecisionLog System...\n')
  
  // Test 1: Quick Context
  console.log('1. QUICK CONTEXT:')
  console.log(getQuickContext())
  console.log('\n')
  
  // Test 2: Full Context
  console.log('2. FULL CONTEXT:')
  const fullContext = await getSessionContext()
  console.log(fullContext)
  console.log('\n')
  
  // Test 3: Capture a test decision
  console.log('3. CAPTURING TEST DECISION:')
  try {
    const testDecision = await captureNewDecision({
      title: "Test: DecisionLog System Working",
      description: "Testing the decision capture functionality",
      decision: "DecisionLog system is fully operational",
      rationale: "All utilities created and tested successfully",
      alternativesConsidered: ["No logging", "Manual documentation"],
      category: "architecture",
      impact: "low"
    })
    console.log('✅ Test decision captured successfully!')
  } catch (error) {
    console.log('⚠️ Test decision failed (might already exist):', error.message)
  }
}

testDecisionSystem()
</file>

<file path="src/services/courseService.js">
// src/services/courseService.js
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

export const courseService = {
  // Get all categories with sub-categories and courses
  async getCategories() {
    try {
      const response = await fetch(`${API_BASE_URL}/categories`);
      if (!response.ok) throw new Error('Failed to fetch categories');
      return await response.json();
    } catch (error) {
      console.error('Error fetching categories:', error);
      throw error;
    }
  },

  // Get specific category details
  async getCategory(categoryId) {
    try {
      const response = await fetch(`${API_BASE_URL}/categories/${categoryId}`);
      if (!response.ok) throw new Error('Failed to fetch category');
      return await response.json();
    } catch (error) {
      console.error('Error fetching category:', error);
      throw error;
    }
  },

  // Get courses for a specific sub-category
  async getCoursesBySubCategory(subCategoryId) {
    try {
      const response = await fetch(`${API_BASE_URL}/sub-categories/${subCategoryId}/courses`);
      if (!response.ok) throw new Error('Failed to fetch courses');
      return await response.json();
    } catch (error) {
      console.error('Error fetching courses:', error);
      throw error;
    }
  }
};
</file>

<file path="src/styles/AboutUs.module.css">
.aboutContainer {
  padding: 40px 20px;
  max-width: 1200px;
  margin: 0 auto;
  min-height: 60vh;
}

.aboutContainer h1 {
  color: #1e3c72;
  text-align: center;
  margin-bottom: 30px;
}
</file>

<file path="src/styles/Admin.module.css">
/* src/styles/Admin.module.css */
.adminContainer {
  display: flex;
  min-height: 80vh;
  background: #f8f9fa;
}

/* Sidebar Styles */
.sidebar {
  width: 280px;
  background: #2c3e50;
  color: white;
  padding: 0;
}

.sidebarHeader {
  padding: 2rem 1.5rem 1.5rem;
  border-bottom: 1px solid #34495e;
}

.sidebarHeader h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
}

.sidebarNav {
  padding: 1rem 0;
}

.navLink {
  display: flex;
  align-items: center;
  padding: 1rem 1.5rem;
  color: #bdc3c7;
  text-decoration: none;
  transition: all 0.3s ease;
  border-left: 4px solid transparent;
}

.navLink:hover {
  background: #34495e;
  color: white;
  border-left-color: #3498db;
}

.navLink.active {
  background: #34495e;
  color: white;
  border-left-color: #3498db;
  font-weight: 600;
}

.navIcon {
  margin-right: 0.75rem;
  font-size: 1.1rem;
}

/* Admin Content Area */
.adminContent {
  flex: 1;
  padding: 0;
  background: white;
  overflow-y: auto;
}

/* Dashboard Styles */
.dashboard {
  padding: 2rem;
}

.dashboard h1 {
  margin-bottom: 2rem;
  color: #2c3e50;
  font-size: 2.5rem;
}

.statsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.statCard {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  border-left: 4px solid #3498db;
}

.statCard h3 {
  margin: 0 0 0.5rem 0;
  color: #7f8c8d;
  font-size: 0.9rem;
  font-weight: 600;
  text-transform: uppercase;
}

.statNumber {
  margin: 0;
  font-size: 2rem;
  font-weight: bold;
  color: #2c3e50;
}

/* Decision Manager Styles */
.decisionManager {
  padding: 2rem;
  max-width: 1200px;
}

.header {
  margin-bottom: 2rem;
}

.header h1 {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
  color: #2c3e50;
}

.header p {
  color: #7f8c8d;
  font-size: 1.1rem;
}

.decisionForm {
  background: #f8f9fa;
  padding: 2rem;
  border-radius: 8px;
  margin-bottom: 3rem;
  border: 1px solid #e9ecef;
}

.decisionForm h2 {
  margin-bottom: 1.5rem;
  color: #2c3e50;
  font-size: 1.5rem;
}

.formGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.formGroup {
  margin-bottom: 1rem;
}

.formGroup label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #2c3e50;
}

.formGroup input,
.formGroup select,
.formGroup textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.formGroup input:focus,
.formGroup select:focus,
.formGroup textarea:focus {
  outline: none;
  border-color: #3498db;
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.formGroup textarea {
  resize: vertical;
  min-height: 80px;
  font-family: inherit;
}

.formFooter {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  margin-top: 1.5rem;
}

.submitButton {
  background: #3498db;
  color: white;
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submitButton:hover:not(:disabled) {
  background: #2980b9;
}

.submitButton:disabled {
  background: #bdc3c7;
  cursor: not-allowed;
}

.decisionsList h2 {
  margin-bottom: 1.5rem;
  color: #2c3e50;
  font-size: 1.8rem;
}

.decisionsGrid {
  display: grid;
  gap: 1.5rem;
}

.decisionCard {
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 1.5rem;
  background: white;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.decisionCard:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.decisionHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1rem;
}

.decisionHeader h3 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.3rem;
  flex: 1;
  margin-right: 1rem;
}

.impactBadge {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 600;
  white-space: nowrap;
}

.impactBadge.high {
  background: #f8d7da;
  color: #721c24;
}

.impactBadge.medium {
  background: #fff3cd;
  color: #856404;
}

.impactBadge.low {
  background: #d1ecf1;
  color: #0c5460;
}

.decisionMeta {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  font-size: 0.875rem;
  color: #6c757d;
}

.category {
  background: #e9ecef;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-weight: 600;
}

.date {
  color: #6c757d;
}

.description {
  color: #6c757d;
  margin-bottom: 1rem;
  line-height: 1.5;
}

.decisionContent {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 4px;
  margin-bottom: 1rem;
  border-left: 4px solid #3498db;
  font-weight: 500;
}

.rationale {
  color: #495057;
  line-height: 1.5;
}

.loading {
  text-align: center;
  padding: 2rem;
  color: #6c757d;
  font-size: 1.1rem;
}

.emptyState {
  text-align: center;
  padding: 3rem;
  color: #6c757d;
  background: #f8f9fa;
  border-radius: 8px;
  border: 2px dashed #dee2e6;
}

.emptyState p {
  margin: 0;
  font-size: 1.1rem;
}

.errorContainer {
  background: #f8d7da;
  color: #721c24;
  padding: 1rem;
  border-radius: 4px;
  margin: 1rem 0;
  border: 1px solid #f5c6cb;
}

.accessDenied {
  text-align: center;
  padding: 4rem 2rem;
  color: #6c757d;
}

.accessDenied h2 {
  color: #dc3545;
  margin-bottom: 1rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .adminContainer {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    order: 2;
  }
  
  .adminContent {
    order: 1;
  }
  
  .formGrid {
    grid-template-columns: 1fr;
  }
  
  .formFooter {
    flex-direction: column;
    gap: 1rem;
    align-items: stretch;
  }
  
  .statsGrid {
    grid-template-columns: 1fr;
  }
  
  .decisionHeader {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .decisionHeader h3 {
    margin-right: 0;
  }
}
/* Add these styles to your existing Admin.module.css */

.courseManager {
  padding: 2rem;
  max-width: 1200px;
}

.courseForm {
  background: #f8f9fa;
  padding: 2rem;
  border-radius: 8px;
  margin-bottom: 3rem;
  border: 1px solid #e9ecef;
}

.courseForm h2 {
  margin-bottom: 1.5rem;
  color: #2c3e50;
  font-size: 1.5rem;
}

.courseForm small {
  color: #6c757d;
  font-size: 0.875rem;
  display: block;
  margin-top: 0.25rem;
}

.coursesGrid {
  display: grid;
  gap: 1.5rem;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
}

.courseCard {
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 1.5rem;
  background: white;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.courseCard:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.courseHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1rem;
  gap: 1rem;
}

.courseHeader h3 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.3rem;
  flex: 1;
}

.courseHeader > div {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  align-items: flex-end;
}

.courseId {
  background: #e9ecef;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.875rem;
  font-weight: 600;
  color: #495057;
}

.status {
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

.status.active {
  background: #d4edda;
  color: #155724;
}

.status.inactive {
  background: #f8d7da;
  color: #721c24;
}

.status.draft {
  background: #fff3cd;
  color: #856404;
}

.courseMeta {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
  flex-wrap: wrap;
}

.category, .board, .grade, .level {
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.875rem;
  font-weight: 600;
}

.category {
  background: #d1ecf1;
  color: #0c5460;
}

.board {
  background: #d4edda;
  color: #155724;
}

.grade {
  background: #fff3cd;
  color: #856404;
}

.level {
  background: #e2e3e5;
  color: #383d41;
}

.description {
  color: #6c757d;
  margin-bottom: 1rem;
  line-height: 1.5;
  font-size: 0.95rem;
}

.courseDetails {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  font-size: 0.875rem;
  color: #495057;
  flex-wrap: wrap;
}

.courseDetails span {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.subjects {
  color: #495057;
  margin-bottom: 1rem;
  font-size: 0.9rem;
  line-height: 1.4;
}

.courseActions {
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
}

.editButton {
  background: #17a2b8;
  color: white;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.875rem;
  transition: background-color 0.2s ease;
}

.deleteButton {
  background: #dc3545;
  color: white;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.875rem;
  transition: background-color 0.2s ease;
}

.editButton:hover {
  background: #138496;
}

.deleteButton:hover {
  background: #c82333;
}

/* Responsive design */
@media (max-width: 768px) {
  .courseHeader {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .courseHeader > div {
    align-items: flex-start;
    flex-direction: row;
    gap: 0.5rem;
  }
  
  .coursesGrid {
    grid-template-columns: 1fr;
  }
}
/* src/styles/Admin.module.css */
.adminContainer {
  padding: 30px;
  max-width: 1000px;
  margin: 0 auto;
  background: #f8f9fa;
  min-height: 100vh;
}

.adminContainer h2 {
  color: #1e3c72;
  margin-bottom: 30px;
  text-align: center;
  font-size: 2rem;
}

.addCourseForm {
  background: white;
  padding: 25px;
  border-radius: 10px;
  margin-bottom: 30px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.addCourseForm h3 {
  margin-bottom: 20px;
  color: #333;
}

.formInput, .formTextarea, .formSelect {
  width: 100%;
  padding: 12px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 16px;
  box-sizing: border-box;
}

.formTextarea {
  min-height: 100px;
  resize: vertical;
  font-family: inherit;
}

.formActions {
  display: flex;
  gap: 15px;
  margin-top: 20px;
}

.addButton, .refreshButton, .deleteButton {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  font-size: 16px;
  transition: all 0.3s ease;
}

.addButton {
  background: #28a745;
  color: white;
}

.addButton:hover {
  background: #218838;
  transform: translateY(-2px);
}

.refreshButton {
  background: #17a2b8;
  color: white;
}

.refreshButton:hover {
  background: #138496;
  transform: translateY(-2px);
}

.deleteButton {
  background: #dc3545;
  color: white;
  padding: 8px 16px;
  font-size: 14px;
}

.deleteButton:hover {
  background: #c82333;
}

.coursesList {
  background: white;
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.coursesList h3 {
  margin-bottom: 20px;
  color: #333;
}

.courseItem {
  border: 1px solid #e9ecef;
  padding: 20px;
  margin-bottom: 15px;
  border-radius: 8px;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  transition: all 0.3s ease;
}

.courseItem:hover {
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  transform: translateY(-2px);
}

.courseInfo {
  flex: 1;
}

.courseInfo h4 {
  margin: 0 0 10px 0;
  color: #1e3c72;
  font-size: 1.2rem;
}

.courseInfo p {
  margin: 0 0 15px 0;
  color: #666;
  line-height: 1.5;
}

.courseMeta {
  font-size: 0.9rem;
  color: #888;
}

.courseMeta span {
  margin-right: 20px;
  display: inline-block;
}
</file>

<file path="src/styles/Career.module.css">
.aboutContainer {
  padding: 40px 20px;
  max-width: 1200px;
  margin: 0 auto;
  min-height: 60vh;
}

.aboutContainer h1 {
  color: #1e3c72;
  text-align: center;
  margin-bottom: 30px;
}
</file>

<file path="src/styles/CategorySection.module.css">
.categorySection {
  margin-bottom: 20px;
  border: 1px solid #e9ecef;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  background: white;
}

.categoryHeader {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 25px 30px;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: background 0.3s ease;
}

.categoryHeader:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}

.categoryInfo {
  flex: 1;
}

.categoryTitle {
  font-size: 1.8em;
  margin: 0 0 8px 0;
  font-weight: bold;
}

.categoryDescription {
  opacity: 0.9;
  font-size: 1.1em;
}

.categoryStats {
  display: flex;
  align-items: center;
  gap: 20px;
}

.subCategoryCount,
.courseCount {
  background: rgba(255, 255, 255, 0.2);
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.9em;
  font-weight: bold;
}

.arrow {
  font-size: 1.2em;
  transition: transform 0.3s ease;
}

.arrowOpen {
  transform: rotate(180deg);
}

.categoryContent {
  transition: all 0.3s ease;
  overflow: hidden;
}

.contentVisible {
  max-height: 5000px;
  opacity: 1;
  padding: 20px;
  background: #f8f9fa;
}

.contentHidden {
  max-height: 0;
  opacity: 0;
  padding: 0 20px;
  background: #f8f9fa;
}
</file>

<file path="src/styles/Common.module.css">
.pageContainer {
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 20px;
}

.textCenter {
  text-align: center;
  color: white;
  padding: 50px 20px;
}

.btnPrimary {
  background: #4CAF50;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  margin: 10px;
  transition: background 0.3s ease;
}

.btnPrimary:hover {
  background: #45a049;
}

.btnSuccess {
  background: #2196F3;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  margin: 10px;
  transition: background 0.3s ease;
}

.btnSuccess:hover {
  background: #1976D2;
}

/* Course Intro Page Styles */
.courseHeader {
  background: white;
  border-radius: 12px;
  padding: 30px;
  margin-bottom: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.backButton {
  background: #6c757d;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  margin-bottom: 20px;
  font-size: 14px;
}

.backButton:hover {
  background: #5a6268;
}

.courseTitle {
  color: #333;
  font-size: 2.5em;
  margin: 10px 0;
  font-weight: bold;
}

.courseCategory {
  color: #666;
  font-size: 1.2em;
  font-style: italic;
}

.courseContent {
  background: white;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.courseDescription h3 {
  color: #333;
  border-bottom: 2px solid #667eea;
  padding-bottom: 10px;
  margin-bottom: 15px;
}

.courseDescription p {
  color: #666;
  line-height: 1.6;
  font-size: 1.1em;
}

.courseDetails {
  display: flex;
  gap: 30px;
  margin: 25px 0;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 8px;
}

.detailItem {
  font-size: 1.1em;
}

.detailItem strong {
  color: #333;
}

.courseFeatures {
  margin: 30px 0;
}

.courseFeatures h3 {
  color: #333;
  border-bottom: 2px solid #667eea;
  padding-bottom: 10px;
  margin-bottom: 20px;
}

.courseFeatures ul {
  list-style: none;
  padding: 0;
}

.courseFeatures li {
  background: #e3f2fd;
  margin: 10px 0;
  padding: 12px 20px;
  border-radius: 6px;
  border-left: 4px solid #2196F3;
  color: #333;
}

.enrollmentSection {
  background: #f8f9fa;
  padding: 30px;
  border-radius: 10px;
  text-align: center;
  margin-top: 30px;
}

.enrolledUser, .guestUser {
  max-width: 500px;
  margin: 0 auto;
}

.contactInfo {
  margin-top: 15px;
  color: #666;
  font-size: 0.9em;
}

/* Responsive Design */
@media (max-width: 768px) {
  .pageContainer {
    padding: 10px;
  }
  
  .courseHeader {
    padding: 20px;
  }
  
  .courseTitle {
    font-size: 2em;
  }
  
  .courseDetails {
    flex-direction: column;
    gap: 15px;
  }
  
  .courseContent {
    padding: 20px;
  }
}
/* Add these to your existing Common.module.css */

.pageContainer {
  min-height: 80vh;
  padding: 2rem;
  background: #f8f9fa;
}

.content {
  max-width: 800px;
  margin: 0 auto;
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.contactInfo {
  margin: 2rem 0;
  padding: 1.5rem;
  background: #f8f9fa;
  border-radius: 6px;
}

.faqSection {
  margin: 2rem 0;
}

.faqItem {
  margin-bottom: 1.5rem;
  padding-bottom: 1.5rem;
  border-bottom: 1px solid #e9ecef;
}

.faqItem h3 {
  color: #333;
  margin-bottom: 0.5rem;
}

.faqItem p {
  color: #666;
  line-height: 1.6;
}

.careerInfo {
  margin: 2rem 0;
}

.jobListing {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 6px;
}

.jobListing h3 {
  color: #333;
  margin-bottom: 0.5rem;
}

.applicationInfo {
  margin-top: 2rem;
  padding: 1.5rem;
  background: #e3f2fd;
  border-radius: 6px;
  text-align: center;
}
/* Add this to your Common.module.css */
.btnSecondary {
  background: #6c757d;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1rem;
  transition: background 0.3s ease;
}

.btnSecondary:hover {
  background: #5a6268;
}

.loadingSpinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 2s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
/* ===== ENROLLMENT & LOGIN STYLES ===== */

.enrollmentSection {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-top: 2rem;
  text-align: center;
}

.guestUser, .enrolledUser {
  padding: 1rem;
}

.guestUser h3, .enrolledUser h3 {
  color: #333;
  margin-bottom: 1rem;
}

.enrolledUser {
  background: #d4edda;
  border: 1px solid #c3e6cb;
  border-radius: 8px;
}

.btnSuccess {
  background: #28a745;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 6px;
  font-size: 1.1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.3s ease;
  margin-top: 1rem;
}

.btnSuccess:hover {
  background: #218838;
}

.coursePreview {
  margin-top: 2rem;
  padding: 1.5rem;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

/* Login form styles */
.modalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.loginContainer {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  max-width: 400px;
  width: 90%;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.loginHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.closeButton {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #666;
}

.loginForm {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.formGroup {
  text-align: left;
}

.formLabel {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
  color: #333;
}

.formInput {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.errorMessage {
  background: #f8d7da;
  color: #721c24;
  padding: 0.75rem;
  border-radius: 4px;
  border: 1px solid #f5c6cb;
}

.testCredentials {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #e9ecef;
}

.testBtn {
  background: #6c757d;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 0.5rem;
}

.testBtn:hover {
  background: #5a6268;
}

.credentialsNote {
  font-size: 0.9rem;
  color: #666;
  font-style: italic;
}
</file>

<file path="src/styles/CourseCard.module.css">
.courseCard {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  border: 1px solid #e9ecef;
  display: flex;
  align-items: flex-start;
  gap: 15px;
  height: 100%;
}

.courseCard:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: #667eea;
}

.courseIcon {
  width: 45px;
  height: 45px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 1.1em;
  flex-shrink: 0;
}

.courseInfo {
  flex: 1;
}

.courseName {
  font-size: 1.2em;
  margin: 0 0 8px 0;
  color: #333;
  font-weight: bold;
  line-height: 1.3;
}

.courseDescription {
  color: #666;
  margin: 0 0 12px 0;
  line-height: 1.4;
  font-size: 0.95em;
  min-height: 2.8em;
}

.courseMeta {
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
}

.courseDuration,
.courseLevel {
  background: #e9ecef;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8em;
  color: #495057;
  font-weight: bold;
}

.learnMoreBtn {
  background: transparent;
  border: 2px solid #667eea;
  color: #667eea;
  padding: 6px 12px;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.9em;
}

.learnMoreBtn:hover {
  background: #667eea;
  color: white;
}

/* Responsive design */
@media (max-width: 768px) {
  .courseCard {
    padding: 15px;
    flex-direction: column;
    text-align: center;
  }
  
  .courseIcon {
    align-self: center;
  }
  
  .courseMeta {
    justify-content: center;
  }
}
</file>

<file path="src/styles/CourseContent.module.css">
/* src/styles/CourseContent.module.css */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
  min-height: 80vh;
}

/* Course Header */
.courseHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 30px;
  padding: 30px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 15px;
}

.courseInfo {
  flex: 1;
}

.courseTitle {
  font-size: 2.5rem;
  margin-bottom: 10px;
  font-weight: 700;
}

.courseCategory {
  font-size: 1.2rem;
  opacity: 0.9;
  margin-bottom: 15px;
}

.courseDetails {
  display: flex;
  gap: 20px;
  margin-top: 15px;
}

.courseDetails span {
  background: rgba(255, 255, 255, 0.2);
  padding: 8px 15px;
  border-radius: 20px;
  font-size: 0.9rem;
}

.progressSection {
  text-align: center;
  min-width: 120px;
}

.progressCircle {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 10px;
  border: 3px solid white;
}

.progressText {
  font-size: 1.5rem;
  font-weight: 700;
}

.progressLabel {
  font-size: 0.9rem;
  opacity: 0.9;
}

/* Course Layout */
.courseLayout {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 30px;
  margin-top: 20px;
}

/* Modules Sidebar */
.modulesSidebar {
  background: white;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  height: fit-content;
  position: sticky;
  top: 20px;
}

.modulesSidebar h3 {
  margin-bottom: 20px;
  color: #333;
  font-size: 1.3rem;
}

.modulesList {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.moduleItem {
  padding: 15px;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.moduleItem:hover {
  border-color: #667eea;
  transform: translateY(-2px);
}

.moduleItem.activeModule {
  border-color: #667eea;
  background: #f8f9ff;
}

.moduleHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 10px;
}

.moduleHeader h4 {
  margin: 0;
  color: #333;
  font-size: 1rem;
  line-height: 1.4;
}

.lessonCount {
  background: #667eea;
  color: white;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.8rem;
  white-space: nowrap;
}

.moduleProgress {
  margin-top: 10px;
}

.progressBar {
  width: 100%;
  height: 6px;
  background: #e9ecef;
  border-radius: 3px;
  overflow: hidden;
}

.progressFill {
  height: 100%;
  background: #28a745;
  transition: width 0.3s ease;
}

/* Lessons Content */
.lessonsContent {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.moduleTitle {
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #f8f9fa;
}

.moduleTitle h2 {
  color: #333;
  margin-bottom: 5px;
}

.moduleTitle p {
  color: #6c757d;
  margin: 0;
}

.lessonsList {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 30px;
}

.lessonItem {
  display: flex;
  align-items: center;
  padding: 15px;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  gap: 15px;
}

.lessonItem:hover {
  border-color: #667eea;
  background: #f8f9ff;
}

.lessonItem.activeLesson {
  border-color: #667eea;
  background: #f8f9ff;
}

.lessonItem.completed {
  border-color: #28a745;
  background: #f8fff9;
}

.lessonIcon {
  font-size: 1.5rem;
  min-width: 40px;
  text-align: center;
}

.lessonInfo {
  flex: 1;
}

.lessonInfo h4 {
  margin: 0 0 5px 0;
  color: #333;
  font-size: 1.1rem;
}

.lessonMeta {
  display: flex;
  gap: 15px;
  margin: 0;
}

.duration {
  color: #6c757d;
  font-size: 0.9rem;
}

.type {
  color: #667eea;
  font-size: 0.9rem;
  font-weight: 600;
  text-transform: capitalize;
}

.lessonActions {
  min-width: 120px;
  text-align: right;
}

.completedBadge {
  color: #28a745;
  font-weight: 600;
  font-size: 0.9rem;
}

.completeButton {
  background: #28a745;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background 0.3s ease;
}

.completeButton:hover {
  background: #218838;
}

/* Lesson Content Area */
.lessonContent {
  background: #f8f9fa;
  padding: 30px;
  border-radius: 10px;
  border: 2px solid #e9ecef;
}

.lessonContent h3 {
  color: #333;
  margin-bottom: 20px;
  font-size: 1.5rem;
}

.contentPlaceholder {
  text-align: center;
  padding: 40px 20px;
}

.placeholderIcon {
  font-size: 4rem;
  margin-bottom: 20px;
}

.contentPlaceholder h4 {
  color: #333;
  margin-bottom: 15px;
  font-size: 1.3rem;
}

.contentPlaceholder p {
  color: #6c757d;
  margin-bottom: 10px;
  font-size: 1.1rem;
}

.lessonActions {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin-top: 30px;
}

.primaryButton {
  background: #667eea;
  color: white;
  border: none;
  padding: 12px 25px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.primaryButton:hover {
  background: #5a6fd8;
  transform: translateY(-2px);
}

.secondaryButton {
  background: #6c757d;
  color: white;
  border: none;
  padding: 12px 25px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.secondaryButton:hover {
  background: #5a6268;
  transform: translateY(-2px);
}

/* Error States */
.error {
  text-align: center;
  padding: 60px 20px;
}

.error h2 {
  color: #dc3545;
  margin-bottom: 15px;
}

.error p {
  color: #6c757d;
  margin-bottom: 25px;
  font-size: 1.1rem;
}

.backButton {
  background: #6c757d;
  color: white;
  border: none;
  padding: 12px 30px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: background 0.3s ease;
}

.backButton:hover {
  background: #5a6268;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .courseLayout {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .modulesSidebar {
    position: static;
  }
}

@media (max-width: 768px) {
  .courseHeader {
    flex-direction: column;
    gap: 20px;
    text-align: center;
  }
  
  .courseDetails {
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .lessonItem {
    flex-direction: column;
    text-align: center;
    gap: 10px;
  }
  
  .lessonActions {
    text-align: center;
  }
  
  .lessonActions {
    flex-direction: column;
  }
  
  .courseTitle {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 10px;
  }
  
  .courseHeader {
    padding: 20px;
  }
  
  .lessonsContent {
    padding: 20px;
  }
  
  .lessonContent {
    padding: 20px;
  }
}
</file>

<file path="src/styles/CourseEnrollment.module.css">
/* src/styles/CourseEnrollment.module.css */
.enrollmentSection {
  background: #f8f9fa;
  padding: 2rem;
  border-radius: 8px;
  text-align: center;
  margin: 2rem 0;
}

.enrollButton {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 12px 30px;
  border-radius: 6px;
  font-size: 1.1rem;
  font-weight: bold;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.enrollButton:hover:not(:disabled) {
  transform: translateY(-2px);
}

.enrollButton:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.enrolledBadge {
  background: #28a745;
  color: white;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: bold;
  display: inline-block;
  margin-bottom: 1rem;
}

.loginPrompt {
  color: #dc3545;
  font-style: italic;
  margin-top: 1rem;
}

.message {
  margin-top: 1rem;
  padding: 0.5rem;
  border-radius: 4px;
  background: #e7f3ff;
  color: #0066cc;
}
</file>

<file path="src/styles/CourseGrid.module.css">
.courseGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 20px;
  padding: 10px 0;
}
</file>

<file path="src/styles/FAQs.modules.css">
.aboutContainer {
  padding: 40px 20px;
  max-width: 1200px;
  margin: 0 auto;
  min-height: 60vh;
}

.aboutContainer h1 {
  color: #1e3c72;
  text-align: center;
  margin-bottom: 30px;
}
</file>

<file path="src/styles/SchoolBoardTabs.module.css">
.schoolTabsContainer {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  margin: 20px 0;
}

.tabHeaders {
  display: flex;
  background: #f8f9fa;
  border-bottom: 2px solid #e9ecef;
  padding: 0 20px;
  overflow-x: auto;
}

.tabHeader {
  background: none;
  border: none;
  padding: 15px 20px;
  font-size: 1em;
  font-weight: 600;
  color: #666;
  cursor: pointer;
  transition: all 0.3s ease;
  border-bottom: 3px solid transparent;
  white-space: nowrap;
  flex-shrink: 0;
}

.tabHeader:hover {
  color: #333;
  background: rgba(102, 126, 234, 0.1);
}

.activeTab {
  color: #667eea;
  border-bottom: 3px solid #667eea;
  background: white;
}

.tabContent {
  padding: 30px;
}

.boardInfo {
  text-align: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 1px solid #e9ecef;
}

.boardInfo h3 {
  color: #333;
  font-size: 2em;
  margin-bottom: 10px;
}

.boardInfo p {
  color: #666;
  font-size: 1.1em;
  margin-bottom: 20px;
}

.mediumSelector {
  margin-top: 20px;
}

.mediumSelector label {
  display: block;
  margin-bottom: 10px;
  font-weight: 600;
  color: #333;
}

.mediumButtons {
  display: flex;
  justify-content: center;
  gap: 15px;
  flex-wrap: wrap;
}

.mediumButton {
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
}

.mediumButton:hover {
  border-color: #667eea;
  background: rgba(102, 126, 234, 0.1);
}

.activeMedium {
  background: #667eea !important;
  color: white;
  border-color: #667eea !important;
}

.classesGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
  gap: 25px;
}

.classCard {
  background: #f8f9fa;
  border-radius: 12px;
  padding: 25px;
  border: 1px solid #e9ecef;
  transition: all 0.3s ease;
  position: relative;
}

.classCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  border-color: #667eea;
}

.classHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 20px;
  flex-wrap: wrap;
  gap: 10px;
}

.classHeader h4 {
  color: #333;
  font-size: 1.4em;
  margin: 0;
  font-weight: bold;
}

.classInfo {
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: flex-end;
}

.mediumBadge {
  background: #28a745;
  color: white;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.8em;
  font-weight: bold;
}

.classLevel {
  background: #667eea;
  color: white;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.8em;
  font-weight: bold;
}

.subjectsList h5 {
  color: #333;
  margin-bottom: 12px;
  font-size: 1.1em;
}

.subjectsGrid {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 20px;
}

.subjectTag {
  background: white;
  color: #667eea;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 0.9em;
  border: 1px solid #667eea;
  font-weight: 500;
}

.classFeatures {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  margin-bottom: 25px;
}

.feature {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #666;
  font-size: 0.9em;
}

.enrollButton {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 12px;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: transform 0.3s ease;
  font-size: 0.95em;
}

.enrollButton:hover {
  transform: scale(1.02);
}

/* Responsive Design */
@media (max-width: 768px) {
  .tabHeaders {
    flex-wrap: wrap;
    padding: 0 10px;
  }
  
  .tabHeader {
    padding: 12px 15px;
    font-size: 0.9em;
    flex: 1;
    min-width: 100px;
  }
  
  .tabContent {
    padding: 20px;
  }
  
  .classesGrid {
    grid-template-columns: 1fr;
  }
  
  .classHeader {
    flex-direction: column;
    gap: 15px;
  }
  
  .classInfo {
    align-items: flex-start;
    flex-direction: row;
    gap: 10px;
  }
  
  .classFeatures {
    grid-template-columns: 1fr;
  }
  
  .mediumButtons {
    gap: 10px;
  }
  
  .mediumButton {
    padding: 8px 16px;
    font-size: 0.9em;
  }
}

@media (max-width: 480px) {
  .tabHeader {
    min-width: 80px;
    padding: 10px 8px;
    font-size: 0.85em;
  }
  
  .classCard {
    padding: 20px;
  }
  
  .subjectsGrid {
    gap: 6px;
  }
  
  .subjectTag {
    font-size: 0.8em;
    padding: 4px 8px;
  }
  
  .classHeader h4 {
    font-size: 1.2em;
  }
}
</file>

<file path="src/styles/SubCategorySection.module.css">
.subCategorySection {
  margin-bottom: 15px;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  overflow: hidden;
  background: white;
}

.subCategoryHeader {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  color: white;
  padding: 20px 25px;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: background 0.3s ease;
}

.subCategoryHeader:hover {
  background: linear-gradient(135deg, #ee7de8 0%, #f34157 100%);
}

.subCategoryInfo {
  flex: 1;
}

.subCategoryTitle {
  font-size: 1.4em;
  margin: 0 0 5px 0;
  font-weight: bold;
}

.subCategoryDescription {
  opacity: 0.9;
  font-size: 1em;
}

.subCategoryStats {
  display: flex;
  align-items: center;
  gap: 15px;
}

.courseCount {
  background: rgba(255, 255, 255, 0.2);
  padding: 4px 10px;
  border-radius: 15px;
  font-size: 0.85em;
  font-weight: bold;
}

.arrow {
  font-size: 1em;
  transition: transform 0.3s ease;
}

.arrowOpen {
  transform: rotate(180deg);
}

.subCategoryContent {
  transition: all 0.3s ease;
  overflow: hidden;
}

.contentVisible {
  max-height: 5000px;
  opacity: 1;
  padding: 20px;
}

.contentHidden {
  max-height: 0;
  opacity: 0;
  padding: 0 20px;
}

.noCourses {
  text-align: center;
  padding: 40px 20px;
  color: #6c757d;
  font-style: italic;
}
</file>

<file path="src/styles/Support.module.css">
.aboutContainer {
  padding: 40px 20px;
  max-width: 1200px;
  margin: 0 auto;
  min-height: 60vh;
}

.aboutContainer h1 {
  color: #1e3c72;
  text-align: center;
  margin-bottom: 30px;
}
</file>

<file path="src/utils/userIdParser.jsx">
// src/utils/userIdParser.jsx

export const parseUserId = (userId) => {
  if (!userId) return { 
    category: '', 
    subcategory: '', 
    categoryCode: '',
    isValid: false 
  };

  // School Tuitions Pattern: ST_Board_Class_Medium_StudentID
  if (userId.startsWith('ST_')) {
    const parts = userId.split('_');
    if (parts.length >= 4) {
      const [, board, classGrade, medium] = parts;
      return {
        category: 'School Tuitions',
        subcategory: `${board} Board - Class ${classGrade} - ${medium}`,
        categoryCode: 'ST',
        board,
        classGrade,
        medium,
        isValid: true
      };
    }
  }

  // Recruitment Exams Pattern: RE_Exam_00_Medium_StudentID
  if (userId.startsWith('RE_')) {
    const parts = userId.split('_');
    if (parts.length >= 4) {
      const [, examCode] = parts;
      const examMap = {
        'TP': 'TNPSC',
        'TR': 'TRB',
        'TU': 'TNUSRB & Other TN Recruitments',
        'SS': 'SSC',
        'UP': 'UPSC',
        'RR': 'RRB',
        'IB': 'IBPS & Others'
      };
      return {
        category: 'Recruitment Exams',
        subcategory: examMap[examCode] || 'Unknown Recruitment Exam',
        categoryCode: 'RE',
        examCode,
        isValid: true
      };
    }
  }

  // Add patterns for other user types as needed...

  return {
    category: '',
    subcategory: '',
    categoryCode: '',
    isValid: false
  };
};

export const hasCourseAccess = (userInfo, courseId) => {
  if (!userInfo || !userInfo.isValid) return false;

  // School Tuitions access
  if (courseId === 'school-tuitions' && userInfo.categoryCode === 'ST') {
    return true;
  }

  // Recruitment Exams access
  if (courseId.startsWith('Rectt') && userInfo.categoryCode === 'RE') {
    const courseMap = {
      'Rectt1': 'TP', // TNPSC
      'Rectt2': 'TR', // TRB
      'Rectt3': 'TU', // TNUSRB
      'Rectt4': 'SS', // SSC
      'Rectt5': 'UP', // UPSC
      'Rectt6': 'RR', // RRB
      'Rectt7': 'IB'  // IBPS
    };
    return courseMap[courseId] === userInfo.examCode;
  }

  return false;
};

// Sample test users for development
export const SAMPLE_USER_IDS = {
  SCHOOL_TN_10_ENGLISH: 'ST_TN_10_E_000001',
  SCHOOL_CB_12_ENGLISH: 'ST_CB_12_E_000003',
  RECRUITMENT_TNPSC: 'RE_TP_00_E_000006'
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

/src/generated/prisma
</file>

<file path="src/App.jsx">
// src/App.jsx  added <Route path="/admin/courses" element={<CourseManager />} /> import CourseManager from './components/Admin/CourseManager';
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
// Remove AuthContext import for now
// import { AuthProvider } from './context/AuthContext';
import Home from './pages/Home';
import CourseIntroPage from './pages/CourseIntroPage';
import CourseManager from './components/Admin/CourseManager';
import Admin from './pages/Admin';
import './App.css';
import AboutUs from './pages/AboutUs';
import Support from './pages/Support'; 
import FAQs from './pages/FAQs';
import Career from './pages/Career';

function App() {
  return (
    // Remove AuthProvider wrapper for now
    // <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/intro/:courseId" element={<CourseIntroPage />} />
          <Route path="/admin/*" element={<Admin />} />
          <Route path="*" element={<Home />} />
          <Route path="/admin/courses" element={<CourseManager />} />
          <Route path="/about" element={<AboutUs />} />
          <Route path="/support" element={<Support />} />
          <Route path="/faqs" element={<FAQs />} />
          <Route path="/career" element={<Career />} />
        </Routes>
      </Router>
    // </AuthProvider>
  );
}

export default App;
</file>

<file path="src/components/Header.jsx">
// src/components/Header.jsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import styles from './Header.module.css';

export default function Header() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);
  const navigate = useNavigate();

  const toggleMenu = () => setMenuOpen(!menuOpen);
  const closeMenu = () => setMenuOpen(false);

  // Show logout confirmation
  const handleLogoutClick = () => {
    setShowLogoutConfirm(true);
  };

  // Confirm logout - REDIRECT TO HOME PAGE
  const confirmLogout = () => {
    // Clear authentication data
    localStorage.removeItem('userToken');
    localStorage.removeItem('userData');
    localStorage.removeItem('isLoggedIn');
    sessionStorage.clear();
    
    // Close all menus
    closeMenu();
    setShowLogoutConfirm(false);
    
    // Redirect to HOME PAGE instead of login
    navigate('/');
  };

  // Cancel logout
  const cancelLogout = () => {
    setShowLogoutConfirm(false);
  };

  return (
    <>
      <header className={styles.header}>
        {/* Logo Container */}
        <div className={styles.logoContainer}>
          <img 
            src="/Vyasa.jpg" 
            alt="Drillmasters Logo" 
            className={styles.logo}
          />
        </div>

        {/* Caption Container */}
        <div className={styles.captionContainer}>
          <div className={styles.captionContent}>
            <div className={styles.captionLine1}>DRILLMASTERS LMS</div>
            <div className={styles.captionLine2}>
              Free Online Learning for all Recruitment, Entrance and Professional course exams as well as School Tuitions
            </div>
          </div>
        </div>

        {/* Hamburger Menu Container */}
        <div className={styles.hamburgerContainer}>
          <button 
            className={`${styles.hamburger} ${menuOpen ? styles.hamburgerActive : ''}`}
            onClick={toggleMenu}
            aria-label="Toggle menu"
          >
            <span></span>
            <span></span>
            <span></span>
          </button>
        </div>
      </header>

      {/* Mobile Sidebar Navigation */}
      {menuOpen && (
        <div className={styles.mobileMenuContainer}>
          <div className={styles.overlay} onClick={closeMenu}></div>
          <nav className={styles.mobileNav}>
            <div className={styles.mobileNavHeader}>
              <h3>Menu</h3>
              <button 
                className={styles.closeButton}
                onClick={closeMenu}
                aria-label="Close menu"
              >
                ✕
              </button>
            </div>
            <ul className={styles.mobileNavList}>
              <li>
                <Link to="/" className={styles.mobileNavLink} onClick={closeMenu}>
                  🏠 Home
                </Link>
              </li>
              <li>
                <Link to="/about" className={styles.mobileNavLink} onClick={closeMenu}>
                  AboutUs
                </Link>
              </li>
              <li>
                <Link to="/support" className={styles.mobileNavLink} onClick={closeMenu}>
                  Support
                </Link>
              </li>
              <li>
                <Link to="/faqs" className={styles.mobileNavLink} onClick={closeMenu}>
                  FAQs
                </Link>
              </li>
              <li>
                <Link to="/career" className={styles.mobileNavLink} onClick={closeMenu}>
                  Career
                </Link>
              </li>
              <li>
                <button
                  className={styles.logoutButton}
                  onClick={handleLogoutClick}
                >
                  Logout
                </button>
              </li>
            </ul>
          </nav>
        </div>
      )}

      {/* Logout Confirmation Modal */}
      {showLogoutConfirm && (
        <div className={styles.modalOverlay}>
          <div className={styles.confirmationModal}>
            <h3>Confirm Logout</h3>
            <p>Are you sure you want to logout?</p>
            <div className={styles.modalButtons}>
              <button 
                className={styles.confirmButton}
                onClick={confirmLogout}
              >
                Yes, Logout
              </button>
              <button 
                className={styles.cancelButton}
                onClick={cancelLogout}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/components/layout.jsx">
// src/components/Layout.jsx
import React from 'react';
import Header from './Header';
import Footer from './Footer';
import styles from './Layout.module.css';

const Layout = ({ children }) => {
  return (
    <div className={styles.layout}>
      {/* Always show header */}
      <Header />
      
      <main className={styles.main}>
        {children}
      </main>
      
      <Footer />
    </div>
  );
};

export default Layout;
</file>

<file path="src/pages/AboutUs.jsx">
import React from 'react';
import Layout from '../components/Layout';

const AboutUs = () => {
  return (
    <Layout>
      <div style={{ padding: '40px 20px', maxWidth: '1200px', margin: '0 auto' }}>
        <h1 style={{ color: '#1e3c72', textAlign: 'center' }}>About DrillMasters LMS</h1>
        
        <div style={{ marginTop: '30px', lineHeight: '1.6' }}>
          <h2>Our Mission</h2>
          <p>DrillMasters LMS provides free online learning for recruitment, entrance exams, professional courses, and school tuitions.</p>
          
          <h2>What We Offer</h2>
          <ul>
            <li>Comprehensive course materials</li>
            <li>Expert faculty guidance</li>
            <li>Flexible learning schedules</li>
            <li>Regular assessments and feedback</li>
          </ul>
        </div>
      </div>
    </Layout>
  );
};

export default AboutUs;
</file>

<file path="src/pages/Career.jsx">
import React from 'react';
import Layout from '../components/Layout';

const Career = () => {
  return (
    <Layout>
      <div style={{ padding: '40px 20px', maxWidth: '1200px', margin: '0 auto' }}>
        <h1 style={{ color: '#1e3c72', textAlign: 'center' }}>Careers at DrillMasters</h1>
        <p>Join our team and help shape the future of education!</p>
        
        <div style={{ marginTop: '30px' }}>
          <h2>Current Openings</h2>
          <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <h3>Subject Matter Expert</h3>
            <p>Create and review course content for various subjects.</p>
          </div>
          
          <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <h3>Online Tutor</h3>
            <p>Provide live tutoring sessions and doubt clarification.</p>
          </div>
          
          <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <h3>Content Developer</h3>
            <p>Develop engaging educational materials and resources.</p>
          </div>
        </div>
        
        <div style={{ marginTop: '30px' }}>
          <h2>How to Apply</h2>
          <p>Send your resume and portfolio to: careers@drillmasters.in</p>
        </div>
      </div>
    </Layout>
  );
};

export default Career;
</file>

<file path="src/pages/CourseIntroPage.jsx">
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import CourseEnrollment from '../components/CourseEnrollment';
import styles from '../styles/Common.module.css';

// Complete course details with unique IDs
const courseDetails = {
  // Recruitment Exams
  'Rectt1': {
    name: 'TNPSC',
    category: 'Recruitment Exams',
    description: 'Tamil Nadu Public Service Commission exams for various government posts in Tamil Nadu state services. TNPSC has been the gateway to prestigious state government positions since its establishment, offering stable careers with growth opportunities.',
    duration: '6-12 months',
    level: 'Graduate and above',
    features: [
      'Complete syllabus coverage for Group 1, 2, 4 exams',
      'Current affairs and Tamil language special training',
      'Mock tests and previous year question papers',
      'Interview preparation and personality development',
      'Special focus on Tamil Nadu administration and history',
      'Comprehensive general studies and aptitude training'
    ]
  },
  'Rectt2': {
    name: 'TRB',
    category: 'Recruitment Exams',
    description: 'Tamil Nadu Teachers Recruitment Board exams for teaching positions in government schools. TRB ensures qualified educators shape future generations through rigorous selection processes.',
    duration: '6-9 months',
    level: 'B.Ed./M.Ed. required',
    features: [
      'Subject-specific pedagogy training',
      'Child psychology and teaching methodologies',
      'Classroom management techniques',
      'Educational technology integration',
      'Tamil Nadu educational policies coverage',
      'Practical teaching skill development'
    ]
  },
  'Rectt3': {
    name: 'TNUSRB & Other TN Recruitments',
    category: 'Recruitment Exams',
    description: 'Tamil Nadu Uniformed Services Recruitment Board exams for police and other uniformed services.',
    duration: '8-12 months',
    level: '12th Standard and above',
    features: [
      'Physical training and endurance building',
      'Law and order knowledge',
      'Mental ability and reasoning',
      'Medical fitness guidance'
    ]
  },
  'Rectt4': {
    name: 'SSC',
    category: 'Recruitment Exams',
    description: 'Staff Selection Commission exams for various central government posts across India.',
    duration: '10-12 months',
    level: 'Graduate and above',
    features: [
      'Comprehensive coverage of CGL, CHSL, MTS exams',
      'Quantitative aptitude and English language mastery',
      'General awareness and current affairs',
      'Computer proficiency and typing practice'
    ]
  },
  'Rectt5': {
    name: 'UPSC',
    category: 'Recruitment Exams',
    description: 'Union Public Service Commission Civil Services Examination for IAS, IPS, IFS and other central services.',
    duration: '18-24 months',
    level: 'Graduate and above',
    features: [
      'Complete GS, CSAT, and optional subject coverage',
      'Current affairs analysis and essay writing',
      'Personality test and interview preparation',
      'Answer writing practice and test series'
    ]
  },
  'Rectt6': {
    name: 'RRB',
    category: 'Recruitment Exams',
    description: 'Railway Recruitment Board exams for various technical and non-technical posts in Indian Railways.',
    duration: '8-10 months',
    level: '10th Standard to Graduate',
    features: [
      'Technical and non-technical post preparation',
      'Railway specific knowledge and rules',
      'Aptitude and reasoning training',
      'Medical standards guidance'
    ]
  },
  'Rectt7': {
    name: 'IBPS & Others',
    category: 'Recruitment Exams',
    description: 'Institute of Banking Personnel Selection exams for PO, Clerk, and SO positions in public sector banks.',
    duration: '9-12 months',
    level: 'Graduate and above',
    features: [
      'Banking awareness and financial knowledge',
      'Computer awareness and reasoning ability',
      'English language and quantitative aptitude',
      'Interview and group discussion preparation'
    ]
  },

  // Entrance Exams
  'Ent1': {
    name: 'JEE',
    category: 'Entrance Exams',
    description: 'Joint Entrance Examination for admission to engineering colleges including IITs and NITs.',
    duration: '24 months',
    level: '12th Standard Science',
    features: [
      'Physics, Chemistry, Mathematics comprehensive coverage',
      'Problem solving techniques and speed development',
      'Mock tests and previous year papers',
      'Rank improvement strategies'
    ]
  },
  'Ent2': {
    name: 'NEET',
    category: 'Entrance Exams',
    description: 'National Eligibility cum Entrance Test for medical and dental colleges across India.',
    duration: '24 months',
    level: '12th Standard Science',
    features: [
      'Biology, Chemistry, Physics detailed syllabus',
      'Diagram-based learning and concept clarity',
      'Medical entrance specific preparation',
      'Time management and accuracy training'
    ]
  },
  'Ent3': {
    name: 'CAT',
    category: 'Entrance Exams',
    description: 'Common Admission Test for MBA programs in IIMs and other top business schools.',
    duration: '12-15 months',
    level: 'Graduate with 50% marks',
    features: [
      'Quantitative ability and data interpretation',
      'Verbal ability and reading comprehension',
      'Logical reasoning and decision making',
      'GD-PI preparation and profile building'
    ]
  },
  'Ent4': {
    name: 'GATE',
    category: 'Entrance Exams',
    description: 'Graduate Aptitude Test in Engineering for PG programs and PSU recruitment.',
    duration: '12 months',
    level: 'Engineering Graduate',
    features: [
      'Subject-specific technical knowledge',
      'Engineering mathematics and general aptitude',
      'PSU recruitment pattern preparation',
      'Research orientation development'
    ]
  },
  'Ent5': {
    name: 'CLAT',
    category: 'Entrance Exams',
    description: 'Common Law Admission Test for National Law Universities across India.',
    duration: '12 months',
    level: '12th Standard and above',
    features: [
      'Legal aptitude and reasoning',
      'General knowledge and current affairs',
      'English language and comprehension',
      'Logical and analytical reasoning'
    ]
  },
  'Ent6': {
    name: 'CUET',
    category: 'Entrance Exams',
    description: 'Common University Entrance Test for undergraduate programs in central universities.',
    duration: '10 months',
    level: '12th Standard',
    features: [
      'Domain specific subject preparation',
      'General test and language training',
      'Current affairs and general knowledge',
      'Mock tests and time management'
    ]
  },
  'Ent7': {
    name: 'TET',
    category: 'Entrance Exams',
    description: 'Teacher Eligibility Test for teaching positions in primary and upper primary schools.',
    duration: '6 months',
    level: 'Diploma/Degree in Education',
    features: [
      'Child development and pedagogy',
      'Language and subject knowledge',
      'Teaching methodologies and assessment',
      'Classroom management techniques'
    ]
  },
  'Ent8': {
    name: 'TANCET',
    category: 'Entrance Exams',
    description: 'Tamil Nadu Common Entrance Test for PG programs in engineering, management, and architecture.',
    duration: '8 months',
    level: 'Graduate in relevant field',
    features: [
      'Engineering and management streams',
      'Technical knowledge and aptitude',
      'Previous year pattern analysis',
      'State-specific preparation'
    ]
  },
  'Ent9': {
    name: 'MAT',
    category: 'Entrance Exams',
    description: 'Management Aptitude Test for MBA programs in various B-schools across India.',
    duration: '9 months',
    level: 'Graduate in any discipline',
    features: [
      'Language comprehension and mathematical skills',
      'Data analysis and sufficiency',
      'Intelligence and critical reasoning',
      'Indian and global environment awareness'
    ]
  },

  // Professional Courses
  'Prof1': {
    name: 'CA',
    category: 'Professional Courses',
    description: 'Chartered Accountancy program offering expertise in accounting, auditing, and taxation.',
    duration: '4-5 years',
    level: '12th Standard/ Graduate',
    features: [
      'Accounting and financial reporting',
      'Auditing and assurance standards',
      'Taxation laws and corporate laws',
      'Strategic management and ethics'
    ]
  },
  'Prof2': {
    name: 'CMA',
    category: 'Professional Courses',
    description: 'Cost and Management Accounting focusing on cost control and strategic decision making.',
    duration: '3-4 years',
    level: '12th Standard/ Graduate',
    features: [
      'Cost accounting and financial management',
      'Operations management and strategic management',
      'Direct and indirect taxation',
      'Corporate laws and ethics'
    ]
  },
  'Prof3': {
    name: 'CS',
    category: 'Professional Courses',
    description: 'Company Secretaryship program specializing in corporate laws and governance.',
    duration: '3-4 years',
    level: '12th Standard/ Graduate',
    features: [
      'Company law and corporate governance',
      'Securities laws and capital markets',
      'Economic and commercial laws',
      'Tax laws and drafting appearances'
    ]
  },
  'Prof4': {
    name: 'CFA',
    category: 'Professional Courses',
    description: 'Chartered Financial Analyst focusing on investment management and financial analysis.',
    duration: '2-3 years',
    level: 'Graduate/Working Professionals',
    features: [
      'Investment analysis and portfolio management',
      'Corporate finance and equity investments',
      'Fixed income and derivatives',
      'Ethical and professional standards'
    ]
  },
  'Prof5': {
    name: 'FRM',
    category: 'Professional Courses',
    description: 'Financial Risk Manager specializing in risk management and financial markets.',
    duration: '1-2 years',
    level: 'Graduate/Finance Professionals',
    features: [
      'Risk management concepts and tools',
      'Market risk measurement and management',
      'Credit risk and operational risk',
      'Regulatory frameworks and compliance'
    ]
  },
  'Prof6': {
    name: 'ACCA',
    category: 'Professional Courses',
    description: 'Association of Chartered Certified Accountants for global accounting careers.',
    duration: '2-3 years',
    level: '12th Standard/ Graduate',
    features: [
      'International accounting standards',
      'Financial management and reporting',
      'Business analysis and strategy',
      'Global taxation and audit practices'
    ]
  },

  // Technology & IT Certification
  'IT1': {
    name: 'Computer Programming',
    category: 'Technology & IT Certification',
    description: 'Comprehensive programming skills from basics to advanced software development.',
    duration: '6-9 months',
    level: '12th Standard and above',
    features: [
      'Multiple programming languages (Python, Java, C++)',
      'Data structures and algorithms',
      'Web development and databases',
      'Software engineering principles'
    ]
  },
  'IT2': {
    name: 'Data Science',
    category: 'Technology & IT Certification',
    description: 'Data analysis, machine learning, and statistical modeling for business insights.',
    duration: '8-10 months',
    level: 'Graduate with mathematics background',
    features: [
      'Statistical analysis and probability',
      'Machine learning algorithms',
      'Data visualization tools',
      'Big data technologies'
    ]
  },
  'IT3': {
    name: 'ML & AI',
    category: 'Technology & IT Certification',
    description: 'Machine Learning and Artificial Intelligence for intelligent system development.',
    duration: '10-12 months',
    level: 'Engineering/Mathematics background',
    features: [
      'Deep learning and neural networks',
      'Natural language processing',
      'Computer vision and robotics',
      'AI ethics and responsible AI'
    ]
  },
  'IT4': {
    name: 'Cloud Computing',
    category: 'Technology & IT Certification',
    description: 'Cloud infrastructure, services, and deployment models for modern applications.',
    duration: '6-8 months',
    level: 'Basic IT knowledge',
    features: [
      'AWS, Azure, GCP platform expertise',
      'Cloud security and compliance',
      'Containerization and orchestration',
      'Serverless architecture'
    ]
  },
  'IT5': {
    name: 'Cyber Security',
    category: 'Technology & IT Certification',
    description: 'Network security, ethical hacking, and information protection strategies.',
    duration: '9-12 months',
    level: 'Networking basics required',
    features: [
      'Network security and cryptography',
      'Vulnerability assessment',
      'Incident response and forensics',
      'Security compliance and auditing'
    ]
  },
  'IT6': {
    name: 'Ethical Hacking',
    category: 'Technology & IT Certification',
    description: 'Penetration testing and security assessment to protect digital assets.',
    duration: '8-10 months',
    level: 'Networking and programming basics',
    features: [
      'Penetration testing methodologies',
      'Web application security',
      'Wireless network security',
      'Social engineering techniques'
    ]
  },
  'IT7': {
    name: 'Dev Ops',
    category: 'Technology & IT Certification',
    description: 'Development and operations integration for continuous delivery and deployment.',
    duration: '7-9 months',
    level: 'Software development basics',
    features: [
      'CI/CD pipeline implementation',
      'Containerization with Docker',
      'Orchestration with Kubernetes',
      'Infrastructure as Code'
    ]
  },
  'IT8': {
    name: 'Blockchain',
    category: 'Technology & IT Certification',
    description: 'Web3 & Blockchain Development for decentralized applications and systems.',
    duration: '8-10 months',
    level: 'Programming knowledge required',
    features: [
      'Blockchain fundamentals and cryptography',
      'Smart contract development',
      'Decentralized application architecture',
      'Web3 technologies and protocols'
    ]
  },
  'IT9': {
    name: 'IoT',
    category: 'Technology & IT Certification',
    description: 'Internet of Things for connected devices and smart systems development.',
    duration: '7-9 months',
    level: 'Electronics/Programming basics',
    features: [
      'IoT architecture and protocols',
      'Sensor networks and data acquisition',
      'Edge computing and cloud integration',
      'IoT security and implementation'
    ]
  },

  // ================= SCHOOL TUITIONS =================
    // Tamil Nadu Board - Various Classes
    'ST_TN_09_E': {
      name: 'Tamil Nadu Board - Class 9 - English Medium',
      description: 'Complete syllabus coverage for TN Board Class 9 English Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '9',
      medium: 'E',
      longDescription: 'Comprehensive coaching for Tamil Nadu State Board Class 9 English Medium students. Covering all subjects with expert guidance and regular assessments.',
      features: [
        'Complete TN Board Class 9 syllabus',
        'English medium instruction',
        'Mathematics, Science, Social Science',
        'English and Tamil languages',
        'Regular tests and assignments',
        'Doubt clearing sessions'
      ]
    },
    'ST_TN_09_T': {
      name: 'Tamil Nadu Board - Class 9 - Tamil Medium',
      description: 'Complete syllabus coverage for TN Board Class 9 Tamil Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '9',
      medium: 'T',
      longDescription: 'Comprehensive coaching for Tamil Nadu State Board Class 9 Tamil Medium students.',
      features: [
        'Complete TN Board Class 9 syllabus',
        'Tamil medium instruction',
        'All subjects covered',
        'Regular assessments'
      ]
    },
    'ST_TN_10_E': {
      name: 'Tamil Nadu Board - Class 10 - English Medium',
      description: 'Complete syllabus coverage for TN Board Class 10 English Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '10',
      medium: 'E',
      longDescription: 'SSLC preparation for Tamil Nadu State Board Class 10 English Medium. Comprehensive coverage with focus on board exam preparation.',
      features: [
        'Complete SSLC syllabus coverage',
        'English medium instruction',
        'Board exam focused preparation',
        'Previous year question papers',
        'Model tests and revisions',
        'Special focus on important topics'
      ]
    },
    'ST_TN_10_T': {
      name: 'Tamil Nadu Board - Class 10 - Tamil Medium',
      description: 'Complete syllabus coverage for TN Board Class 10 Tamil Medium',
      category: 'School Tuitions',
      board: 'TN',
      classGrade: '10',
      medium: 'T',
      longDescription: 'SSLC preparation for Tamil Nadu State Board Class 10 Tamil Medium.',
      features: [
        'Complete SSLC syllabus coverage',
        'Tamil medium instruction',
        'Board exam preparation',
        'Comprehensive study materials'
      ]
    },

    // CBSE Board
    'ST_CB_09_E': {
      name: 'CBSE Board - Class 9 - English Medium',
      description: 'Complete syllabus coverage for CBSE Board Class 9',
      category: 'School Tuitions',
      board: 'CB',
      classGrade: '9',
      medium: 'E',
      longDescription: 'Comprehensive coaching for CBSE Board Class 9 students.',
      features: [
        'Complete CBSE Class 9 syllabus',
        'NCERT based instruction',
        'All main subjects',
        'Regular assessments'
      ]
    },
    'ST_CB_10_E': {
      name: 'CBSE Board - Class 10 - English Medium',
      description: 'Complete syllabus coverage for CBSE Board Class 10',
      category: 'School Tuitions',
      board: 'CB',
      classGrade: '10',
      medium: 'E',
      longDescription: 'Board preparation for CBSE Class 10 with comprehensive syllabus coverage.',
      features: [
        'Complete CBSE Class 10 syllabus',
        'NCERT focused teaching',
        'Sample papers practice',
        'Board exam strategy'
      ]
    },

  // Insert these in the courseDetails object in CourseIntroPage.jsx

// Skill Development Courses
'Skill1': {
  name: 'Digital Marketing',
  category: 'Skill Development',
  description: 'Comprehensive digital marketing training covering SEO, SEM, and social media marketing strategies. In the digital-first economy, businesses are shifting marketing budgets from traditional to digital channels, creating high demand for skilled digital marketers. This course provides hands-on experience with the latest tools and platforms to drive online visibility, engagement, and conversions.',
  duration: '4-6 months',
  level: 'Marketing Professionals/Business Owners/Beginners',
  features: [
    'Search Engine Optimization (SEO) techniques',
    'Search Engine Marketing (SEM) and PPC advertising',
    'Social media marketing across major platforms',
    'Content marketing strategy and execution',
    'Email marketing and automation',
    'Analytics and performance measurement',
    'Conversion rate optimization',
    'Digital marketing campaign management'
  ]
},
'Skill2': {
  name: 'Project Management',
  category: 'Skill Development',
  description: 'Professional project management training covering PMP, Agile, and Scrum methodologies. With organizations increasingly adopting structured project management approaches, certified project managers are in high demand across industries. This course prepares you for PMP certification while providing practical skills for managing projects of all sizes in both traditional and agile environments.',
  duration: '5-7 months',
  level: 'Working Professionals/Team Leads/Aspiring Managers',
  features: [
    'PMP certification preparation and exam strategies',
    'Agile methodology and Scrum framework',
    'Project planning and scheduling techniques',
    'Risk management and mitigation strategies',
    'Stakeholder management and communication',
    'Budgeting and resource allocation',
    'Quality management and control',
    'Project documentation and reporting'
  ]
},
'Skill3': {
  name: 'Business Analytics',
  category: 'Skill Development',
  description: 'Data analysis and business intelligence training for data-driven decision making. In the era of big data, organizations rely on business analytics to gain competitive insights and drive strategic decisions. This course covers the complete analytics lifecycle from data collection to visualization and storytelling, using industry-standard tools and techniques.',
  duration: '6-8 months',
  level: 'Analysts/Managers/Data Enthusiasts',
  features: [
    'Statistical analysis and hypothesis testing',
    'Data visualization with modern BI tools',
    'Predictive modeling and forecasting',
    'Database querying and data manipulation',
    'Business intelligence dashboard creation',
    'Data-driven decision making frameworks',
    'Storytelling with data techniques',
    'Industry case studies and real-world projects'
  ]
},
'Skill4': {
  name: 'UI/UX Design',
  category: 'Skill Development',
  description: 'User Interface and User Experience design training for creating intuitive digital products. As user expectations for digital experiences continue to rise, UI/UX design has become critical for product success. This course combines design principles with user research methodologies to create interfaces that are both beautiful and functional across web and mobile platforms.',
  duration: '5-7 months',
  level: 'Designers/Developers/Product Managers',
  features: [
    'User research and persona development',
    'Wireframing and prototyping techniques',
    'Visual design principles and color theory',
    'Interaction design and micro-interactions',
    'Usability testing and user feedback',
    'Design systems and component libraries',
    'Mobile-first and responsive design',
    'Portfolio development with real projects'
  ]
},
'Skill5': {
  name: 'Content Writing',
  category: 'Skill Development',
  description: 'Professional writing and copywriting skills for digital and traditional media. Quality content has become the backbone of digital marketing, brand building, and customer engagement. This course develops versatile writing skills for various formats including blogs, social media, marketing copy, technical documentation, and corporate communications.',
  duration: '3-5 months',
  level: 'Writers/Marketers/Business Professionals',
  features: [
    'SEO writing and keyword optimization',
    'Copywriting for conversions and sales',
    'Blog and article writing techniques',
    'Social media content creation',
    'Technical and business writing',
    'Editing and proofreading skills',
    'Content strategy and planning',
    'Freelance writing business setup'
  ]
},
'Skill6': {
  name: 'Public Speaking',
  category: 'Skill Development',
  description: 'Communication and presentation skills training for confident public speaking. Effective public speaking is a critical leadership skill that influences career advancement, business success, and personal confidence. This course provides practical techniques to overcome stage fright, structure compelling presentations, and engage diverse audiences in various settings.',
  duration: '2-4 months',
  level: 'Professionals/Students/Leaders/All Levels',
  features: [
    'Overcoming stage fright and building confidence',
    'Speech structure and content organization',
    'Vocal variety and body language mastery',
    'Visual aids and presentation design',
    'Audience engagement and interaction techniques',
    'Handling Q&A sessions effectively',
    'Persuasive speaking and storytelling',
    'Practice sessions with personalized feedback'
  ]
},
  // Language Courses
  'Lang1': {
    name: 'English Proficiency',
    category: 'Language Courses',
    description: 'Comprehensive English language training for international proficiency tests including IELTS, TOEFL, and PTE. In todays globalized world, English proficiency has become essential for higher education abroad, international career opportunities, and global communication. Our program focuses on all four language skills: reading, writing, listening, and speaking, with special emphasis on test-taking strategies and real-world communication.',
    duration: '4-6 months',
    level: 'Intermediate to Advanced',
    features: [
      'IELTS, TOEFL, PTE test preparation',
      'Academic and general training modules',
      'Speaking practice with native accent training',
      'Writing skills for essays and reports',
      'Listening comprehension and note-taking',
      'Reading strategies for complex texts',
      'Mock tests and performance analysis',
      'Personalized feedback and improvement plans'
    ]
  },
  'Lang2': {
    name: 'Spoken English',
    category: 'Language Courses',
    description: 'Fluency development and communication skills for professional and social contexts. Effective spoken English is crucial for career advancement, business communication, and social confidence. This course focuses on practical conversation skills, pronunciation improvement, and building confidence in various speaking situations from formal presentations to casual conversations.',
    duration: '3-5 months',
    level: 'Beginner to Intermediate',
    features: [
      'Pronunciation and accent neutralization',
      'Everyday conversation practice',
      'Professional communication skills',
      'Public speaking and presentation training',
      'Vocabulary building and idiom usage',
      'Listening and comprehension exercises',
      'Role-playing and situational dialogues',
      'Confidence building activities'
    ]
  },
  'Lang3': {
    name: 'French',
    category: 'Language Courses',
    description: 'Comprehensive French language training from beginner to advanced levels. French is not only the language of love and culture but also an official language in 29 countries and crucial for international diplomacy, tourism, and business. Learning French opens doors to opportunities in Europe, Canada, Africa, and international organizations.',
    duration: '6-9 months',
    level: 'Beginner to Advanced',
    features: [
      'DELF/DALF certification preparation',
      'Grammar and vocabulary building',
      'Conversational French practice',
      'French culture and civilization',
      'Business French communication',
      'Reading and writing skills',
      'Listening comprehension exercises',
      'Interactive cultural immersion'
    ]
  },
  'Lang4': {
    name: 'German',
    category: 'Language Courses',
    description: 'German language certification training for academic and professional purposes. Germany is Europes economic powerhouse and offers excellent opportunities for education and employment. German language skills are highly valued in engineering, automotive, and research fields, making it a strategic choice for career development.',
    duration: '6-8 months',
    level: 'Beginner to Intermediate',
    features: [
      'Goethe-Zertifikat preparation',
      'German grammar and syntax',
      'Business German communication',
      'Technical vocabulary development',
      'Cultural context and etiquette',
      'Reading and comprehension skills',
      'Speaking practice with native speakers',
      'Test preparation strategies'
    ]
  },
  'Lang5': {
    name: 'Japanese',
    category: 'Language Courses',
    description: 'Japanese Language Proficiency Test (JLPT) preparation and cultural immersion. Japan is a global leader in technology, automotive, and innovation industries. Learning Japanese provides access to unique career opportunities, cultural understanding, and business relationships with one of the worlds most advanced economies.',
    duration: '8-12 months',
    level: 'Beginner to Advanced',
    features: [
      'JLPT N5 to N1 level preparation',
      'Hiragana, Katakana, and Kanji writing',
      'Japanese grammar and sentence structure',
      'Business etiquette and communication',
      'Cultural context and traditions',
      'Listening and speaking practice',
      'Reading comprehension exercises',
      'Interactive cultural activities'
    ]
  },
  'Lang6': {
    name: 'Spanish',
    category: 'Language Courses',
    description: 'Spanish for beginners focusing on practical communication skills. Spanish is the second most spoken native language globally and official in 21 countries. Learning Spanish opens up opportunities in tourism, international business, and cultural exchange across Latin America, Spain, and the United States.',
    duration: '5-7 months',
    level: 'Beginner',
    features: [
      'Basic grammar and vocabulary',
      'Everyday conversation skills',
      'Pronunciation and accent training',
      'Hispanic culture and traditions',
      'Travel Spanish and practical phrases',
      'Listening and comprehension practice',
      'Reading simple texts and stories',
      'Interactive speaking activities'
    ]
  },
  'Lang7': {
    name: 'Tamil',
    category: 'Language Courses',
    description: 'Comprehensive Tamil language training for spoken and written proficiency. Tamil is one of the worlds oldest living languages with rich literary heritage and cultural significance. Learning Tamil connects you to ancient traditions, Tamil literature, and enables effective communication in Tamil-speaking regions worldwide.',
    duration: '4-6 months',
    level: 'Beginner to Advanced',
    features: [
      'Tamil script reading and writing',
      'Spoken Tamil for daily communication',
      'Grammar and sentence structure',
      'Tamil literature and poetry appreciation',
      'Cultural context and traditions',
      'Business Tamil communication',
      'Listening and comprehension exercises',
      'Writing skills development'
    ]
  },
  'Lang8': {
    name: 'Hindi',
    category: 'Language Courses',
    description: 'Hindi language proficiency development for effective communication. As Indias most widely spoken language and the fourth most spoken language globally, Hindi is essential for business, administration, and cultural integration in much of India. Learning Hindi facilitates better understanding of Indian culture and enhances career opportunities.',
    duration: '3-5 months',
    level: 'Beginner to Intermediate',
    features: [
      'Devanagari script reading and writing',
      'Basic to advanced conversation skills',
      'Grammar and vocabulary building',
      'Hindi literature and cinema appreciation',
      'Business and official communication',
      'Pronunciation and accent training',
      'Cultural context and regional variations',
      'Practical usage in daily life'
    ]
  },

  // Creative Arts
  'Art1': {
    name: 'Graphic Design',
    category: 'Creative Arts',
    description: 'Professional graphic design training using Adobe Photoshop and Illustrator. In the digital age, graphic design skills are essential for branding, marketing, and visual communication across all industries. This course combines technical skills with creative thinking to prepare students for careers in advertising, media, and design studios.',
    duration: '6-8 months',
    level: 'Beginner to Advanced',
    features: [
      'Adobe Photoshop mastery',
      'Adobe Illustrator vector graphics',
      'Logo design and brand identity',
      'Typography and layout principles',
      'Digital illustration techniques',
      'Print and web design preparation',
      'Portfolio development',
      'Industry-standard workflows'
    ]
  },
  'Art2': {
    name: 'Video Editing',
    category: 'Creative Arts',
    description: 'Professional video editing and post-production using Premiere Pro and After Effects. With the explosion of digital content and social media, video editing skills are in high demand for YouTube creators, filmmakers, marketers, and corporate communicators. This course covers the complete video production workflow from raw footage to finished product.',
    duration: '7-9 months',
    level: 'Beginner to Intermediate',
    features: [
      'Adobe Premiere Pro editing',
      'After Effects motion graphics',
      'Color correction and grading',
      'Audio editing and sound design',
      'Visual effects and compositing',
      'Workflow optimization techniques',
      'Project organization and management',
      'Portfolio project completion'
    ]
  },
  'Art3': {
    name: 'Photography',
    category: 'Creative Arts',
    description: 'Digital photography techniques and artistic expression. Photography has evolved from hobby to essential skill in marketing, journalism, and personal branding. This course covers both technical camera skills and artistic composition to help students capture compelling images for various purposes and build a professional portfolio.',
    duration: '5-7 months',
    level: 'Beginner to Advanced',
    features: [
      'Camera operation and settings',
      'Composition and framing techniques',
      'Lighting and exposure control',
      'Portrait and landscape photography',
      'Post-processing with Lightroom',
      'Commercial photography basics',
      'Storytelling through images',
      'Portfolio development and critique'
    ]
  },
  'Art4': {
    name: 'Music Theory',
    category: 'Creative Arts',
    description: 'Comprehensive music education covering Western classical and Carnatic music traditions. Music theory provides the foundation for understanding, creating, and appreciating music across genres. This course bridges traditional Indian music systems with Western classical theory, offering a unique perspective for aspiring musicians and music enthusiasts.',
    duration: '8-10 months',
    level: 'Beginner to Intermediate',
    features: [
      'Western music notation and scales',
      'Carnatic music raga system',
      'Rhythm and time signatures',
      'Harmony and chord progressions',
      'Ear training and sight-reading',
      'Music composition basics',
      'Historical context and evolution',
      'Practical application exercises'
    ]
  },
  'Art5': {
    name: 'Drawing & Painting',
    category: 'Creative Arts',
    description: 'Fine arts training in drawing, sketching, and painting techniques. Artistic skills enhance creativity, observation, and self-expression while providing therapeutic benefits. This course covers fundamental to advanced techniques in various media, helping students develop their unique artistic style and build a strong foundation in visual arts.',
    duration: '6-9 months',
    level: 'All Levels',
    features: [
      'Pencil sketching and shading',
      'Watercolor painting techniques',
      'Acrylic and oil painting',
      'Perspective and proportion',
      'Color theory and mixing',
      'Still life and portrait drawing',
      'Landscape and composition',
      'Personal style development'
    ]
  },
  'Art6': {
    name: 'Digital Art',
    category: 'Creative Arts',
    description: 'Digital illustration and concept art creation using modern tools and techniques. The digital art revolution has transformed illustration, animation, and game design industries. This course prepares students for careers in digital media, covering everything from basic digital painting to advanced concept development for films and games.',
    duration: '8-10 months',
    level: 'Beginner to Advanced',
    features: [
      'Digital painting fundamentals',
      'Character design and development',
      'Environment and background art',
      'Concept art creation process',
      'Tablet and stylus techniques',
      'Color theory for digital media',
      'Industry workflow and practices',
      'Professional portfolio building'
    ]
  },

  // Business & Management Courses
  'Biz1': {
    name: 'Artificial Intelligence for Business',
    category: 'Business & Management',
    description: 'Master AI applications in business strategy and operations. With AI revolutionizing industries globally, this course prepares professionals to leverage machine learning, predictive analytics, and automation for competitive advantage in the digital economy.',
    duration: '4-6 months',
    level: 'Graduates/Working Professionals',
    features: [
      'AI strategy development and implementation',
      'Machine learning applications in business',
      'Predictive analytics and data-driven decision making',
      'Automation and process optimization',
      'AI ethics and responsible AI practices',
      'Case studies from successful AI implementations',
      'Hands-on projects with AI tools'
    ]
  },
  'Biz2': {
    name: 'Sustainable Business & ESG',
    category: 'Business & Management',
    description: 'Comprehensive training in Environmental, Social, and Governance principles for modern businesses. As global focus shifts toward sustainable development, ESG expertise has become crucial for corporate leadership and investor relations.',
    duration: '3-5 months',
    level: 'Management Professionals/Entrepreneurs',
    features: [
      'ESG framework implementation',
      'Sustainable business model development',
      'Carbon footprint assessment and reduction',
      'Social responsibility and community engagement',
      'Corporate governance best practices',
      'ESG reporting and compliance',
      'Green financing and sustainable investing'
    ]
  },
  'Biz3': {
    name: 'Digital Marketing & Analytics',
    category: 'Business & Management',
    description: 'Data-driven digital marketing strategies for the modern business landscape. With digital advertising spending projected to exceed traditional media, this course provides essential skills for online brand building and customer engagement.',
    duration: '4-6 months',
    level: 'Marketing Professionals/Business Owners',
    features: [
      'SEO and SEM optimization techniques',
      'Social media marketing and analytics',
      'Content marketing strategy development',
      'Marketing automation tools',
      'Customer journey mapping and analysis',
      'ROI measurement and campaign optimization',
      'Emerging digital marketing trends'
    ]
  },
  'Biz4': {
    name: 'Global Supply Chain & Operations Management',
    category: 'Business & Management',
    description: 'International operations excellence and supply chain optimization. In an increasingly interconnected global economy, efficient supply chain management has become critical for business resilience and competitive advantage.',
    duration: '5-7 months',
    level: 'Operations Professionals/Logistics Managers',
    features: [
      'Global logistics and distribution networks',
      'Inventory management optimization',
      'Supply chain risk assessment and mitigation',
      'International trade regulations',
      'Digital supply chain technologies',
      'Sustainable supply chain practices',
      'Vendor and partner management'
    ]
  },
  'Biz5': {
    name: 'Financial Technology (FinTech) & Digital Finance',
    category: 'Business & Management',
    description: 'Modern financial systems and digital banking technologies. The FinTech revolution is transforming traditional finance, with digital payments, blockchain, and AI-driven financial services reshaping the industry landscape.',
    duration: '4-6 months',
    level: 'Finance Professionals/Technology Enthusiasts',
    features: [
      'Blockchain and cryptocurrency fundamentals',
      'Digital payment systems and mobile banking',
      'Regulatory technology (RegTech)',
      'AI in financial services',
      'Cybersecurity in finance',
      'Open banking and API integration',
      'FinTech startup ecosystem'
    ]
  },
  'Biz6': {
    name: 'Product Management & Innovation',
    category: 'Business & Management',
    description: 'End-to-end product development lifecycle management. As companies increasingly compete on innovation, product management has emerged as a critical function bridging technology, business, and user experience.',
    duration: '5-7 months',
    level: 'Tech Professionals/Aspiring Product Managers',
    features: [
      'Product strategy and roadmap development',
      'User research and market analysis',
      'Agile product development methodologies',
      'Minimum Viable Product (MVP) creation',
      'Product metrics and performance tracking',
      'Stakeholder management and communication',
      'Innovation frameworks and design thinking'
    ]
  },
  'Biz7': {
    name: 'People Analytics & Strategic HR',
    category: 'Business & Management',
    description: 'Data-driven human resources and organizational development. The digital transformation of HR enables evidence-based decision making for talent management, employee engagement, and organizational effectiveness.',
    duration: '4-6 months',
    level: 'HR Professionals/Managers',
    features: [
      'HR analytics tools and techniques',
      'Employee performance prediction models',
      'Talent acquisition optimization',
      'Workforce planning and analytics',
      'Employee engagement measurement',
      'Diversity and inclusion analytics',
      'HR technology implementation'
    ]
  },

  // Health & Wellness Courses
  'Health1': {
    name: 'Nutrition & Lifestyle Medicine',
    category: 'Health & Wellness',
    description: 'Holistic health approaches combining modern nutrition science with lifestyle interventions. With rising lifestyle diseases and increased health consciousness, evidence-based nutritional guidance has become essential for preventive healthcare.',
    duration: '6-8 months',
    level: 'Health Enthusiasts/Wellness Professionals',
    features: [
      'Evidence-based nutritional science',
      'Dietary planning for different health conditions',
      'Lifestyle disease prevention strategies',
      'Gut health and microbiome optimization',
      'Sports nutrition and performance enhancement',
      'Weight management techniques',
      'Nutritional counseling skills'
    ]
  },
  'Health2': {
    name: 'Integrative & Functional Wellness',
    category: 'Health & Wellness',
    description: 'Comprehensive wellness strategies combining traditional and modern approaches. The integrative medicine movement addresses the root causes of health issues rather than just symptoms, representing the future of holistic healthcare.',
    duration: '8-10 months',
    level: 'Healthcare Professionals/Wellness Coaches',
    features: [
      'Functional medicine principles',
      'Mind-body connection techniques',
      'Stress management and resilience building',
      'Sleep optimization strategies',
      'Detoxification and cleansing protocols',
      'Hormonal balance and metabolic health',
      'Integrative treatment planning'
    ]
  },

  // Personal Development & Soft Skills
  'PD1': {
    name: 'Critical Thinking & Complex Problem-Solving',
    category: 'Personal Development & Soft Skills',
    description: 'Advanced analytical thinking and problem-solving skills for the modern workplace. In an era of information overload and rapid change, critical thinking has been identified by the World Economic Forum as the most crucial skill for future employment.',
    duration: '3-5 months',
    level: 'Professionals/Students/Leaders',
    features: [
      'Logical reasoning and argument analysis',
      'Cognitive biases and decision-making psychology',
      'Systems thinking and complexity management',
      'Creative problem-solving techniques',
      'Data interpretation and evidence evaluation',
      'Strategic thinking and planning',
      'Case-based learning and real-world applications'
    ]
  },
  'PD2': {
    name: 'Leadership & Entrepreneurial Mindset',
    category: 'Personal Development & Soft Skills',
    description: 'Leadership development and entrepreneurial thinking for career advancement. The post-pandemic business environment demands adaptive leaders who can navigate uncertainty and drive innovation in dynamic market conditions.',
    duration: '4-6 months',
    level: 'Managers/Aspiring Leaders/Entrepreneurs',
    features: [
      'Leadership styles and situational leadership',
      'Change management and organizational transformation',
      'Entrepreneurial opportunity identification',
      'Risk assessment and decision-making under uncertainty',
      'Team building and talent development',
      'Strategic vision and execution planning',
      'Personal leadership brand development'
    ]
  },
  'PD3': {
    name: 'Emotional Intelligence (EQ) & Resilience',
    category: 'Personal Development & Soft Skills',
    description: 'Emotional mastery and psychological resilience for personal and professional success. Research consistently shows that emotional intelligence is a stronger predictor of success than IQ, especially in leadership roles and team environments.',
    duration: '3-4 months',
    level: 'All Professionals/Students',
    features: [
      'Self-awareness and emotional regulation',
      'Empathy and interpersonal skills development',
      'Stress management and coping strategies',
      'Conflict resolution and difficult conversations',
      'Resilience building and adaptability training',
      'Mindfulness and emotional balance practices',
      'Relationship management and social skills'
    ]
  },

  // Vocational & Technical Training
  'Voc1': {
    name: 'ITI/ISC Trades',
    category: 'Vocational & Technical Training',
    description: 'Industrial Training Institute courses for skilled workforce development. With Indias focus on "Make in India" and manufacturing growth, ITI-certified professionals are in high demand across industries for their practical technical skills.',
    duration: '1-2 years',
    level: '10th/12th Pass',
    features: [
      'Government-recognized certification',
      'Hands-on workshop training',
      'Industry-relevant skill development',
      'Apprenticeship and job placement assistance',
      'Multiple trade options (fitter, electrician, mechanic, etc.)',
      'Safety protocols and quality standards',
      'Entrepreneurship development'
    ]
  },
  'Voc2': {
    name: 'Manufacturing Skills',
    category: 'Vocational & Technical Training',
    description: 'Production and manufacturing techniques for industrial employment. As India positions itself as a global manufacturing hub, skilled manufacturing professionals are essential for quality production and operational excellence.',
    duration: '6-12 months',
    level: 'ITI/Diploma Holders',
    features: [
      'Production planning and control',
      'Quality control and assurance techniques',
      'Lean manufacturing principles',
      'Equipment operation and maintenance',
      'Safety standards and compliance',
      'Process optimization methods',
      'Team leadership in manufacturing'
    ]
  },
  'Voc3': {
    name: 'Automotive Repair',
    category: 'Vocational & Technical Training',
    description: 'Comprehensive vehicle maintenance and repair training. With increasing vehicle ownership and technological complexity, skilled automotive technicians are crucial for the growing automobile service industry.',
    duration: '8-12 months',
    level: '10th Pass and Above',
    features: [
      'Engine repair and maintenance',
      'Electrical systems and diagnostics',
      'Transmission and drivetrain systems',
      'Brake and suspension systems',
      'HVAC and comfort systems',
      'Computerized diagnostics training',
      'Customer service and workshop management'
    ]
  },
  'Voc4': {
    name: 'Culinary Arts',
    category: 'Vocational & Technical Training',
    description: 'Professional cooking, baking, and kitchen management skills. The hospitality industrys rapid growth, combined with rising food culture awareness, creates abundant opportunities for trained culinary professionals.',
    duration: '12-18 months',
    level: '10th Pass and Above',
    features: [
      'Basic to advanced cooking techniques',
      'International cuisine preparation',
      'Baking and pastry arts',
      'Food safety and sanitation',
      'Kitchen management and cost control',
      'Menu planning and development',
      'Restaurant operations knowledge'
    ]
  },
  'Voc5': {
    name: 'Plumbing',
    category: 'Vocational & Technical Training',
    description: 'Professional pipe systems installation and sanitation services. Essential infrastructure development and urban expansion drive continuous demand for skilled plumbing professionals in residential and commercial sectors.',
    duration: '6-9 months',
    level: '8th Pass and Above',
    features: [
      'Pipe fitting and installation techniques',
      'Sanitary system design and implementation',
      'Water supply and drainage systems',
      'Plumbing codes and regulations',
      'Tools and equipment handling',
      'Maintenance and repair procedures',
      'Estimation and costing skills'
    ]
  },
  'Voc6': {
    name: 'Electrical',
    category: 'Vocational & Technical Training',
    description: 'Comprehensive electrical systems installation and maintenance. With rapid electrification and smart technology integration, skilled electricians are essential for modern infrastructure development and maintenance.',
    duration: '9-12 months',
    level: '10th Pass and Above',
    features: [
      'Electrical wiring and circuit design',
      'Safety protocols and regulations',
      'Residential and commercial electrical systems',
      'Troubleshooting and repair techniques',
      'Energy efficiency and conservation',
      'Smart home electrical systems',
      'Electrical estimation and project management'
    ]
  },
  'Voc7': {
    name: 'Electronics/Mobile Repair',
    category: 'Vocational & Technical Training',
    description: 'Electronic device repair and maintenance services. The electronics repair industry offers significant entrepreneurial opportunities, especially with the proliferation of smartphones and consumer electronics.',
    duration: '6-8 months',
    level: '10th Pass and Above',
    features: [
      'Mobile phone hardware repair',
      'Circuit board troubleshooting and repair',
      'Software installation and troubleshooting',
      'Data recovery techniques',
      'Tools and equipment handling',
      'Customer service and business management',
      'Latest device repair methodologies'
    ]
  },
  'Voc8': {
    name: 'Tailoring',
    category: 'Vocational & Technical Training',
    description: 'Fashion design, garment construction, and stitching techniques. The growing fashion industry and personalized clothing需求 create excellent opportunities for skilled tailors and fashion entrepreneurs.',
    duration: '8-10 months',
    level: '8th Pass and Above',
    features: [
      'Basic to advanced stitching techniques',
      'Pattern making and garment construction',
      'Fabric knowledge and selection',
      'Fashion design principles',
      'Alteration and customization skills',
      'Industrial sewing machine operation',
      'Boutique management and entrepreneurship'
    ]
  },
  'Voc9': {
    name: 'Beautician Course',
    category: 'Vocational & Technical Training',
    description: 'Professional beauty and skin care services training. The booming beauty and wellness industry offers diverse career opportunities in salons, spas, and entrepreneurial ventures.',
    duration: '6-9 months',
    level: '10th Pass and Above',
    features: [
      'Skin care and facial treatments',
      'Hair styling and coloring techniques',
      'Makeup artistry and application',
      'Nail art and hand care',
      'Beauty product knowledge',
      'Sanitation and hygiene standards',
      'Salon management and client handling'
    ]
  },

  // Sanatana Dharmic Life Styles
  'SD1': {
    name: 'Foundations of Sanatana Dharma',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Core principles and philosophical foundations of eternal dharma. This course explores the timeless wisdom of Sanatana Dharma, providing a comprehensive understanding of its philosophical roots and practical applications in modern life.',
    duration: '6-8 months',
    level: 'All Interested Learners',
    features: [
      'Vedic philosophy and core principles',
      'Concept of Dharma and righteous living',
      'Four Purusharthas framework',
      'Major scriptures and their significance',
      'Philosophical schools of thought',
      'Modern relevance of ancient wisdom',
      'Practical application in daily life'
    ]
  },
  'SD2': {
    name: 'Yoga & Meditation',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Ancient spiritual practices for physical, mental, and spiritual well-being. With global recognition of yogas benefits, this course offers authentic training in traditional practices while addressing contemporary lifestyle challenges.',
    duration: '8-10 months',
    level: 'All Age Groups',
    features: [
      'Asana practice and alignment principles',
      'Pranayama and breath control techniques',
      'Meditation and mindfulness practices',
      'Yoga philosophy and history',
      'Therapeutic applications of yoga',
      'Lifestyle integration strategies',
      'Yoga for stress management'
    ]
  },
  'SD3': {
    name: 'Ayurveda & Vedic Wellness',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Traditional healing systems and holistic wellness approaches. Ayurveda, the science of life, offers time-tested natural healing methods that are gaining global acceptance for their effectiveness and minimal side effects.',
    duration: '10-12 months',
    level: 'Wellness Enthusiasts/Healthcare Professionals',
    features: [
      'Ayurvedic principles and dosha theory',
      'Diet and nutrition according to constitution',
      'Herbal medicine and natural remedies',
      'Detoxification and cleansing procedures',
      'Seasonal living and daily routines',
      'Preventive healthcare strategies',
      'Integration with modern wellness practices'
    ]
  },
  'SD4': {
    name: 'Sanskrit Language & Indian Philosophy',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Classical language studies and philosophical exploration. Sanskrit, the language of Indias intellectual heritage, provides direct access to original texts and profound philosophical insights of Sanatana Dharma.',
    duration: '12-15 months',
    level: 'Language Enthusiasts/Philosophy Students',
    features: [
      'Sanskrit grammar and vocabulary',
      'Reading and comprehension of simple texts',
      'Pronunciation and chanting techniques',
      'Major philosophical text studies',
      'Comparative philosophy analysis',
      'Cultural context and historical significance',
      'Practical conversation skills'
    ]
  },
  'SD5': {
    name: 'Rituals, Festivals & Dharmic Practices',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Cultural traditions, ceremonies, and spiritual practices. This course explores the rich tapestry of Hindu rituals and festivals, explaining their symbolic meanings and relevance in contemporary life.',
    duration: '6-8 months',
    level: 'All Interested Learners',
    features: [
      'Significance of major Hindu festivals',
      'Ritual procedures and their meanings',
      'Temple traditions and worship methods',
      'Life cycle ceremonies (samskaras)',
      'Fast and festival observance',
      'Cultural continuity and adaptation',
      'Community participation and celebration'
    ]
  },
  'SD6': {
    name: 'Dharmic Ethics & Leadership',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Moral leadership principles based on dharma. Drawing from ancient Indian leadership models, this course applies timeless ethical principles to modern organizational and community leadership challenges.',
    duration: '5-7 months',
    level: 'Leaders/Managers/Community Organizers',
    features: [
      'Dharma-based decision making',
      'Leadership lessons from epics',
      'Ethical frameworks in business',
      'Stakeholder responsibility concepts',
      'Conflict resolution through dharma',
      'Sustainable leadership practices',
      'Personal integrity development'
    ]
  },
  'SD7': {
    name: 'Indian Art, Music & Storytelling',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Cultural arts heritage and expressive traditions. This course explores the rich artistic traditions of India, understanding their spiritual foundations and continuing relevance in cultural preservation.',
    duration: '8-10 months',
    level: 'Art Enthusiasts/Cultural Practitioners',
    features: [
      'Classical music theory and practice',
      'Traditional dance forms and their significance',
      'Indian painting and sculpture traditions',
      'Mythological storytelling techniques',
      'Temple architecture and symbolism',
      'Folk arts and regional traditions',
      'Contemporary adaptations of traditional arts'
    ]
  },
  'SD8': {
    name: 'Seva (Service) & Dharmic Contribution',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Selfless service practices and community contribution. Seva, or selfless service, is a fundamental aspect of dharma that fosters personal growth while benefiting society, creating meaningful social impact.',
    duration: '4-6 months',
    level: 'All Interested Individuals',
    features: [
      'Philosophy of selfless service',
      'Community needs assessment',
      'Sustainable service project planning',
      'Volunteer management and coordination',
      'Cultural sensitivity in service',
      'Personal transformation through seva',
      'Creating lasting social impact'
    ]
  },
  'SD9': {
    name: 'Symbolism in Sanatana Dharma',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Sacred symbols, their meanings, and spiritual significance. This course decodes the rich symbolic language of Hinduism, from deities and rituals to geometric patterns and natural elements.',
    duration: '5-7 months',
    level: 'Spiritual Seekers/Art Students',
    features: [
      'Deity symbolism and attributes',
      'Mudras and their meanings',
      'Yantra and mandala interpretation',
      'Temple architecture symbolism',
      'Natural element representations',
      'Color symbolism in rituals',
      'Contemporary symbolic applications'
    ]
  },
  'SD10': {
    name: 'Applied Family & Satvik Living',
    category: 'Sanatana Dharmic Life Styles',
    description: 'Pure, balanced lifestyle implementation in family contexts. This practical course helps families integrate dharma principles into daily life, creating harmonious, spiritually aligned households.',
    duration: '6-8 months',
    level: 'Family Members/Home-makers',
    features: [
      'Satvik diet and cooking practices',
      'Family rituals and daily routines',
      'Values-based parenting approaches',
      'Home environment optimization',
      'Conflict resolution in family settings',
      'Financial management through dharma',
      'Creating family spiritual practices'
    ]
  }
};

export default function CourseIntroPage() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const { user, isUserEnrolled } = useAuth();
  const [currentCourse, setCurrentCourse] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('Course ID from URL:', courseId);
    
    // Directly use courseId since we changed the route structure
    if (courseId) {
      console.log('Available courses:', Object.keys(courseDetails));
      
      const course = courseDetails[courseId];
      if (course) {
        setCurrentCourse(course);
      } else {
        console.log('Course not found for ID:', courseId);
      }
    }
    
    setLoading(false);
  }, [courseId]);

  const handleEnrollSuccess = () => {
    // After successful enrollment, redirect to course content
    setTimeout(() => {
      navigate(`/course/${courseId}`);
    }, 1500);
  };

  const handleBackToHome = () => {
    navigate('/');
  };

  if (loading) {
    return (
      <div className={styles.pageContainer}>
        <div className={styles.textCenter}>
          <h2>Loading...</h2>
        </div>
      </div>
    );
  }

  if (!currentCourse) {
    return (
      <div className={styles.pageContainer}>
        <div className={styles.textCenter}>
          <h2>Course Not Found</h2>
          <p>Course ID: {courseId}</p>
          <button onClick={handleBackToHome} className={styles.btnPrimary}>
            Back to Home
          </button>
        </div>
      </div>
    );
  }

  // Check if user is already enrolled
  const enrolled = isUserEnrolled(courseId);

  return (
    <div className={styles.pageContainer}>
      <div className={styles.courseHeader}>
        <button onClick={handleBackToHome} className={styles.backButton}>
          ← Back to Courses
        </button>
        <h1 className={styles.courseTitle}>{currentCourse.name}</h1>
        <p className={styles.courseCategory}>{currentCourse.category}</p>
        
        {/* Enrollment Status Badge */}
        {user && enrolled && (
          <div style={{
            background: '#28a745',
            color: 'white',
            padding: '8px 16px',
            borderRadius: '20px',
            fontWeight: 'bold',
            display: 'inline-block',
            marginTop: '10px'
          }}>
            ✅ Already Enrolled
          </div>
        )}
      </div>

      <div className={styles.courseContent}>
        <div className={styles.courseDescription}>
          <h3>Course Overview</h3>
          <p>{currentCourse.description}</p>
        </div>

        <div className={styles.courseDetails}>
          <div className={styles.detailItem}>
            <strong>Duration:</strong> {currentCourse.duration}
          </div>
          <div className={styles.detailItem}>
            <strong>Level:</strong> {currentCourse.level}
          </div>
        </div>

        <div className={styles.courseFeatures}>
          <h3>What You'll Learn</h3>
          <ul>
            {currentCourse.features.map((feature, index) => (
              <li key={index}>{feature}</li>
            ))}
          </ul>
        </div>

        {/* Enrollment Section */}
        <div className={styles.enrollmentSection}>
          {!user ? (
            <div className={styles.guestUser}>
              <h3>Ready to Start Learning?</h3>
              <p>Login to enroll in this course and access all learning materials.</p>
              <div style={{ 
                background: '#e7f3ff', 
                padding: '1.5rem', 
                borderRadius: '8px',
                marginTop: '1rem'
              }}>
                <h4 style={{ color: '#0066cc', marginBottom: '1rem' }}>What you get after enrollment:</h4>
                <ul style={{ textAlign: 'left', display: 'inline-block' }}>
                  <li>Full access to course materials</li>
                  <li>Interactive quizzes and assessments</li>
                  <li>Progress tracking</li>
                  <li>Certificate of completion</li>
                </ul>
              </div>
              <p style={{ marginTop: '1rem', fontStyle: 'italic' }}>
                Please login to enroll in this course.
              </p>
            </div>
          ) : enrolled ? (
            <div className={styles.enrolledUser}>
              <h3>🎉 You're Enrolled!</h3>
              <p>You have full access to this course. Start your learning journey now!</p>
              <button 
                onClick={() => navigate(`/course/${courseId}`)} 
                className={styles.btnSuccess}
              >
                Go to Course Content →
              </button>
            </div>
          ) : (
            <CourseEnrollment 
              courseId={courseId} 
              courseName={currentCourse.name}
              onEnrollmentSuccess={handleEnrollSuccess}
            />
          )}
        </div>

        {/* Course Preview for non-enrolled users */}
        {user && !enrolled && (
          <div className={styles.coursePreview}>
            <h3>Course Preview</h3>
            <div style={{ 
              background: '#f8f9fa', 
              padding: '1.5rem', 
              borderRadius: '8px',
              marginTop: '1rem'
            }}>
              <h4>Learning Structure:</h4>
              <ul style={{ textAlign: 'left', display: 'inline-block' }}>
                <li><strong>5-Level Progression:</strong> Foundation → Elementary → Intermediate → Advanced → Expert</li>
                <li><strong>Rich Content:</strong> Videos, animations, interactive notes</li>
                <li><strong>Smart Assessments:</strong> MCQ quizzes and AI-powered descriptive evaluations</li>
                <li><strong>Progress Analytics:</strong> Track your learning journey</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
export { courseDetails };
</file>

<file path="src/pages/FAQs.jsx">
import React from 'react';
import Layout from '../components/Layout';

const FAQs = () => {
  return (
    <Layout>
      <div style={{ padding: '40px 20px', maxWidth: '1200px', margin: '0 auto' }}>
        <h1 style={{ color: '#1e3c72', textAlign: 'center' }}>Frequently Asked Questions</h1>
        
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>How do I enroll in a course?</h3>
          <p>Click on any course card from the home page and follow the enrollment instructions.</p>
        </div>
        
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>Are the courses free?</h3>
          <p>Yes, all our courses are completely free as mentioned in our platform description.</p>
        </div>
        
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>Do I get a certificate after completion?</h3>
          <p>Yes, certificates are provided upon successful completion of courses.</p>
        </div>
        
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>Can I access courses on mobile?</h3>
          <p>Yes, our platform is fully responsive and works on all devices.</p>
        </div>
        
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>How do I reset my password?</h3>
          <p>Please contact support for password reset assistance.</p>
        </div>
      </div>
    </Layout>
  );
};

export default FAQs;
</file>

<file path="src/pages/Home.jsx">
// src/pages/Home.jsx Removed import { useAuth } from '../context/AuthContext';

//Removed const { isUserEnrolled, canEnrollInCourse } = useAuth();

//Kept all other functionality intact
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
// import { useAuth } from '../context/AuthContext';
import Layout from '../components/Layout';
import LoginForm from '../components/LoginForm';
import CategorySection from '../components/CategorySection';
import styles from '../styles/Home.module.css';

// Import your existing course details structure
import { courseDetails } from './CourseIntroPage';

const Home = () => {
  const navigate = useNavigate();
  //const { isUserEnrolled, canEnrollInCourse } = useAuth();
  const [showLoginForm, setShowLoginForm] = useState(false);
  const [user, setUser] = useState(() => {
    const storedUser = localStorage.getItem('drillmasters_user');
    return storedUser ? JSON.parse(storedUser) : null;
  });
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);

  // Helper functions to match your Excel structure
  const getCategoryCode = (categoryName) => {
    const codes = {
      'School Tuitions': 'ST',
      'Recruitment': 'RE', 
      'Entrance Exams': 'EE',
      'Professional Courses': 'PC',
      'Technology & IT Certification': 'IT',
      'Skill Development': 'SD',
      'Language Courses': 'LA',
      'Creative Arts': 'CA',
      'Business & Management': 'BM',
      'Health & Wellness': 'HW',
      'Personal Development & Soft Skills': 'PD',
      'Vocational & Technical Training': 'VT',
      'Sanatana Dharmic Life Styles': 'SD'
    };
    return codes[categoryName] || categoryName.replace(/\s+/g, '_').toUpperCase();
  };

  const getSubCategoryName = (categoryName, course) => {
    // Map course names to proper sub-category names from Excel
    if (categoryName === 'School Tuitions') {
      if (course.name.includes('Tamil Nadu Board')) return 'TN State Board';
      if (course.name.includes('CBSE')) return 'CBSE';
      if (course.name.includes('ICSE')) return 'ICSE';
      if (course.name.includes('Pearson')) return 'Pearson,UK';
      if (course.name.includes('Canada')) return 'Canada';
    }
    if (categoryName === 'Recruitment') {
      if (course.name === 'TNPSC') return 'TNPSC';
      if (course.name === 'TRB') return 'TRB';
      if (course.name === 'TNUSRB & Other TN Recruitments') return 'TNUSRB';
      if (course.name === 'SSC') return 'SSC';
      if (course.name === 'UPSC') return 'UPSC';
      if (course.name === 'RRB') return 'RRB';
      if (course.name === 'IBPS & Others') return 'IBPS';
      if (course.name === 'SBI') return 'SBI';
      if (course.name === 'NDA') return 'NDA';
    }
    if (categoryName === 'Entrance Exams') {
      if (course.name === 'JEE') return 'IIT';
      if (course.name === 'NEET') return 'MEDICAL';
      if (course.name === 'CAT') return 'MANAGEMENT';
      if (course.name === 'GATE') return 'ENGINEERING';
      if (course.name === 'CLAT') return 'LAW';
      if (course.name === 'CUET') return 'CENTRAL UNIVERSITIES';
      if (course.name === 'TANCET') return 'ANNA UNIVERSITY';
      if (course.name === 'NET' || course.name === 'SLET') return 'EDUCATION';
      if (course.name === 'MAT') return 'MANAGEMENT';
      if (course.name === 'TET') return 'EDUCATION';
    }
    if (categoryName === 'Professional Courses') {
      if (course.name === 'CA') return 'ICAI';
      if (course.name === 'CMA') return 'ICMAI';
      if (course.name === 'CS') return 'ICS';
      if (course.name === 'CFA') return 'CFA Institute';
      if (course.name === 'FRM') return 'GARP';
      if (course.name === 'ACCA') return 'ACCA';
    }
    return course.name.split(' - ')[0] || 'General';
  };

  const getSubCategoryCode = (categoryName, subCategoryName) => {
    // Map to your Excel sub-category codes
    const codes = {
      // School Tuitions
      'TN State Board': 'TN',
      'CBSE': 'CB',
      'ICSE': 'IC',
      'Pearson,UK': 'PE',
      'Canada': 'CA',
      
      // Recruitment
      'TNPSC': 'TP',
      'TRB': 'TR',
      'TNUSRB': 'TU',
      'RRB': 'RR',
      'SSC': 'SS',
      'NDA': 'ND',
      'IBPS': 'IB',
      'SBI': 'SB',
      'UPSC': 'UP',
      
      // Entrance Exams
      'IIT': 'II',
      'MEDICAL': 'ME',
      'MANAGEMENT': 'MG',
      'LAW': 'CL',
      'ENGINEERING': 'GA',
      'CENTRAL UNIVERSITIES': 'CU',
      'ANNA UNIVERSITY': 'AU',
      'EDUCATION': 'ED',
      
      // Professional Courses
      'ICAI': 'CA',
      'ICS': 'CS',
      'ICMAI': 'MA',
      
      // Others (to be updated)
      'Technology & IT Certification': 'IT',
      'Skill Development': 'SD',
      'Language Courses': 'LA',
      'Creative Arts': 'CA',
      'Business & Management': 'BM',
      'Health & Wellness': 'HW',
      'Personal Development & Soft Skills': 'PD',
      'Vocational & Technical Training': 'VT',
      'Sanatana Dharmic Life Styles': 'SD'
    };
    return codes[subCategoryName] || subCategoryName.replace(/\s+/g, '_').toUpperCase();
  };

  // Organize courses into categories based on your courseDetails structure
  useEffect(() => {
    const organizeCoursesByCategory = () => {
      const categoryMap = {};
      
      // Process all courses from your courseDetails
      Object.entries(courseDetails).forEach(([courseId, course]) => {
        const categoryName = course.category;
        
        if (!categoryMap[categoryName]) {
          categoryMap[categoryName] = {
            id: getCategoryCode(categoryName),
            name: categoryName,
            description: `${categoryName} courses and programs`,
            subCategories: {}
          };
        }
        
        // Get proper sub-category name and code from your Excel structure
        let subCategoryName = getSubCategoryName(categoryName, course);
        let subCategoryCode = getSubCategoryCode(categoryName, subCategoryName);
        
        if (!categoryMap[categoryName].subCategories[subCategoryName]) {
          categoryMap[categoryName].subCategories[subCategoryName] = {
            id: subCategoryCode,
            name: subCategoryName,
            description: `${subCategoryName} courses`,
            courses: []
          };
        }
        
        categoryMap[categoryName].subCategories[subCategoryName].courses.push({
          id: courseId, // This uses your existing course IDs (Rectt1, ST_TN_09_E, etc.)
          name: course.name,
          description: course.description,
          duration: course.duration,
          level: course.level
        });
      });
      
      // Convert to array format for components
      return Object.values(categoryMap).map(category => ({
        ...category,
        subCategories: Object.values(category.subCategories)
      }));
    };

    const categoriesData = organizeCoursesByCategory();
    setCategories(categoriesData);
    setLoading(false);
  }, []);

  const handleCourseClick = (courseId) => {
    console.log('Course clicked:', courseId);
    navigate(`/intro/${courseId}`);
  };

  const handleLoginSuccess = (userData) => {
    setUser(userData);
    setShowLoginForm(false);
  };

  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('drillmasters_user');
    localStorage.removeItem('drillmasters_enrollments');
    window.location.reload();
  };

  if (loading) {
    return (
      <Layout>
        <div className={styles.loadingContainer}>
          <div className={styles.spinner}></div>
          <p>Loading courses...</p>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className={styles.homeContainer}>
        {/* Hero Section */}
        <div className={styles.heroSection}>
          <div className={styles.heroContent}>
            <h1 className={styles.heroTitle}>Welcome to DrillMasters</h1>
            <p className={styles.heroSubtitle}>
              Your comprehensive learning platform with structured curriculum across multiple categories
            </p>

            <div className={styles.heroStats}>
              <div className={styles.statItem}>
                <h3>{Object.keys(courseDetails).length}+</h3>
                <p>Courses</p>
              </div>
              <div className={styles.statItem}>
                <h3>20,000+</h3>
                <p>Students</p>
              </div>
              <div className={styles.statItem}>
                <h3>97%</h3>
                <p>Success Rate</p>
              </div>
            </div>

            {/* Home-specific Auth Section */}
            <div className={styles.homeAuthSection}>
              {user ? (
                <div className={styles.userInfo}>
                  <span className={styles.welcomeText}>Welcome, {user.name}!</span>
                  <button 
                    className={styles.logoutBtn}
                    onClick={handleLogout}
                  >
                    Logout
                  </button>
                </div>
              ) : (
                <button 
                  className={styles.loginBtn}
                  onClick={() => setShowLoginForm(true)}
                >
                  Student Login
                </button>
                
              )}
            </div>
          </div>
        </div>

        {/* Login Form Modal */}
        {showLoginForm && (
          <LoginForm 
            onLoginSuccess={handleLoginSuccess}
            onClose={() => setShowLoginForm(false)}
          />
        )}

        {/* Categories Section */}
        <div className={styles.categoriesSection}>
          <div className={styles.container}>
            <h2 className={styles.sectionTitle}>Our Learning Programs</h2>
            <p className={styles.sectionSubtitle}>
              Explore {Object.keys(courseDetails).length}+ courses across {categories.length} categories
            </p>

            {categories.map((category) => (
              <CategorySection
                key={category.id}
                category={category}
                onCourseClick={handleCourseClick}
              />
            ))}
          </div>
        </div>

        {/* Features Section */}
        <div className={styles.featuresSection}>
          <div className={styles.container}>
            <h2 className={styles.sectionTitle}>Why Choose DrillMasters?</h2>
            <div className={styles.featuresGrid}>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>👨‍🏫</div>
                <h3>Expert Faculty</h3>
                <p>Learn from experienced professionals and subject matter experts</p>
              </div>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>💻</div>
                <h3>Interactive Learning</h3>
                <p>Engaging video lectures, quizzes, and interactive sessions</p>
              </div>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>📱</div>
                <h3>Flexible Schedule</h3>
                <p>Learn at your own pace with 24/7 access to course materials</p>
              </div>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>🎯</div>
                <h3>Result Oriented</h3>
                <p>Proven track record of success in competitive exams</p>
              </div>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>📚</div>
                <h3>Comprehensive Curriculum</h3>
                <p>Wide range of courses from academics to professional skills</p>
              </div>
              <div className={styles.featureCard}>
                <div className={styles.featureIcon}>🤝</div>
                <h3>Personalized Support</h3>
                <p>Individual attention and doubt clearing sessions</p>
              </div>
            </div>
          </div>
        </div>

        {/* CTA Section */}
        <div className={styles.ctaSection}>
          <div className={styles.container}>
            <h2>Ready to Start Your Journey?</h2>
            <p>Join thousands of successful students who achieved their dreams with DrillMasters</p>
            <div className={styles.contactInfo}>
              <p>📧 support@drillmasters.in | 📞 +91-XXXXXXXXXX</p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Home;
</file>

<file path="src/pages/Support.jsx">
import React from 'react';
import Layout from '../components/Layout';

const Support = () => {
  return (
    <Layout> {/* Fixed: was <laout> */}
      <div style={{ padding: '40px 20px', maxWidth: '1200px', margin: '0 auto' }}>
        <h1 style={{ color: '#1e3c72', textAlign: 'center' }}>Support</h1>
        <p>We're here to help you with any questions or issues you may have.</p>
        
        <div style={{ marginTop: '30px' }}>
          <h2>Contact Support</h2>
          <p>📧 Email: support@drillmasters.in</p>
          <p>📞 Phone: +91-XXXXXXXXXX</p>
          <p>🕒 Support Hours: 9:00 AM - 6:00 PM (IST)</p>
        </div>
        
        <div style={{ marginTop: '30px' }}>
          <h2>Common Issues</h2>
          <ul>
            <li>Course access problems</li>
            <li>Payment and enrollment issues</li>
            <li>Technical difficulties</li>
            <li>Account management</li>
          </ul>
        </div>
      </div>
    </Layout>
  );
};

export default Support;
</file>

<file path="src/styles/Home.module.css">
.homeContainer {
  min-height: 100vh;
  background: #f8f9fa;
}

/* Hero Section */
.heroSection {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 60px 20px 80px;
  text-align: center;
}

.heroContent {
  max-width: 1200px;
  margin: 0 auto;
}

.heroTitle {
  font-size: 3em;
  margin-bottom: 20px;
  font-weight: bold;
}

.heroSubtitle {
  font-size: 1.2em;
  margin-bottom: 40px;
  opacity: 0.9;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

/* Home-specific auth section */
.homeAuthSection {
  margin: 30px 0;
}

.userInfo {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 20px;
  flex-wrap: wrap;
}

.welcomeText {
  font-size: 1.2em;
  font-weight: bold;
}

.loginBtn {
  background: rgba(255, 255, 255, 0.2);
  color: white;
  border: 2px solid white;
  padding: 12px 30px;
  border-radius: 8px;
  font-size: 1.1em;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.loginBtn:hover {
  background: white;
  color: #667eea;
}

.logoutBtn {
  background: rgba(220, 53, 69, 0.8);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s ease;
}

.logoutBtn:hover {
  background: rgba(220, 53, 69, 1);
}

.heroStats {
  display: flex;
  justify-content: center;
  gap: 60px;
  margin-top: 50px;
}

.statItem {
  text-align: center;
}

.statItem h3 {
  font-size: 2.5em;
  margin-bottom: 5px;
  font-weight: bold;
}

.statItem p {
  font-size: 1.1em;
  opacity: 0.8;
}

/* Loading Styles */
.loadingContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 100px 20px;
  min-height: 50vh;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Rest of your existing styles for container, sections, etc. */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.sectionTitle {
  text-align: center;
  font-size: 2.5em;
  margin-bottom: 20px;
  color: #333;
}

.sectionSubtitle {
  text-align: center;
  font-size: 1.2em;
  color: #666;
  margin-bottom: 50px;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.categoriesSection {
  padding: 80px 0;
  background: white;
}

.featuresSection {
  padding: 80px 0;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.featuresSection .sectionTitle {
  color: white;
}

.featuresGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 30px;
  margin-top: 50px;
}

.featureCard {
  background: rgba(255, 255, 255, 0.1);
  padding: 30px;
  border-radius: 12px;
  text-align: center;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: transform 0.3s ease;
}

.featureCard:hover {
  transform: translateY(-5px);
}

.featureIcon {
  font-size: 3em;
  margin-bottom: 20px;
}

.featureCard h3 {
  font-size: 1.5em;
  margin-bottom: 15px;
}

.featureCard p {
  opacity: 0.9;
  line-height: 1.6;
}

.ctaSection {
  padding: 80px 0;
  background: white;
  text-align: center;
}

.ctaSection h2 {
  font-size: 2.5em;
  margin-bottom: 20px;
  color: #333;
}

.ctaSection p {
  font-size: 1.2em;
  color: #666;
  margin-bottom: 30px;
}

.contactInfo {
  margin-top: 30px;
}

.contactInfo p {
  color: #333;
  font-weight: bold;
}

/* Responsive Design */
@media (max-width: 768px) {
  .heroTitle {
    font-size: 2.2em;
  }
  
  .heroSubtitle {
    font-size: 1.1em;
  }
  
  .heroStats {
    gap: 30px;
    flex-wrap: wrap;
  }
  
  .sectionTitle {
    font-size: 2em;
  }
  
  .featuresGrid {
    grid-template-columns: 1fr;
  }
  
  .userInfo {
    flex-direction: column;
    gap: 15px;
  }
}
/* Add this to your Home.module.css */
.heroSection {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 100px 20px 80px; /* Increased top padding to account for header */
  text-align: center;
}
</file>

<file path="package.json">
{
  "name": "my-lms",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "predev": "node src/scripts/pre-dev-checklist.js",
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint .",
    "seed": "node src/scripts/seed.js",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate dev",
    "db:seed": "node src/scripts/seed-decisions.js",
    "db:studio": "prisma studio",
    "db:reset": "prisma migrate reset",
    "context": "node src/scripts/test-decision-system.js",
    "log:decisions": "node src/scripts/log-decisions.js",
    "log:tanstack": "node src/scripts/log-tanstack-decision.js",
    "guard": "node src/scripts/decision-guard.js"
  },
  "dependencies": {
    "@prisma/client": "^6.17.1",
    "@tanstack/react-query": "^5.90.5",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "prisma": "^6.17.1",
    "vite": "^7.1.7"
  }
}
</file>

</files>
